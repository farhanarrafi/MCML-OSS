/**
 * say_as.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.ssml.xml.types;

import jp.go.nict.ssml.xml.altova.types.*;

public class say_as extends jp.go.nict.ssml.xml.altova.xml.Node {
	public say_as() {
		super();
	}

	public say_as(say_as node) {
		super(node);
	}

	public say_as(org.w3c.dom.Node node) {
		super(node);
	}

	public say_as(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "interpret-as");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "interpret-as", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getinterpret_asMinCount() {
		return 1;
	}

	public int getinterpret_asMaxCount() {
		return 1;
	}

	public int getinterpret_asCount() {
		return getDomChildCount(Attribute, null, "interpret-as");
	}

	public boolean hasinterpret_as() {
		return hasDomChild(Attribute, null, "interpret-as");
	}

	public SchemaNMToken getinterpret_asAt(int index) throws Exception {
		return new SchemaNMToken(getDomNodeValue(getDomChildAt(Attribute, null, "interpret-as", index)));
	}

	public SchemaNMToken getinterpret_as() throws Exception {
		return getinterpret_asAt(0);
	}

	public void removeinterpret_asAt(int index) {
		removeDomChildAt(Attribute, null, "interpret-as", index);
	}

	public void removeinterpret_as() {
		while (hasinterpret_as())
			removeinterpret_asAt(0);
	}

	public void addinterpret_as(SchemaNMToken value) {
		appendDomChild(Attribute, null, "interpret-as", value.toString());
	}

	public void addinterpret_as(String value) throws Exception {
		addinterpret_as(new SchemaNMToken(value));
	}

	public void insertinterpret_asAt(SchemaNMToken value, int index) {
		insertDomChildAt(Attribute, null, "interpret-as", index, value.toString());
	}

	public void insertinterpret_asAt(String value, int index) throws Exception {
		insertinterpret_asAt(new SchemaNMToken(value), index);
	}

	public void replaceinterpret_asAt(SchemaNMToken value, int index) {
		replaceDomChildAt(Attribute, null, "interpret-as", index, value.toString());
	}

	public void replaceinterpret_asAt(String value, int index) throws Exception {
		replaceinterpret_asAt(new SchemaNMToken(value), index);
	}
}
