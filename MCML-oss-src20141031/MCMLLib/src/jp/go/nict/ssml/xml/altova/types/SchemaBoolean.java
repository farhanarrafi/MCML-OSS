/**
 * SchemaBoolean.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.ssml.xml.altova.types;

import java.math.BigInteger;
import java.math.BigDecimal;

public class SchemaBoolean implements SchemaTypeNumber {
  protected boolean value;
  protected boolean isempty;

  // construction
  public SchemaBoolean() {
    isempty = true;
    value = false;
  }

  public SchemaBoolean(SchemaBoolean newvalue) {
    value = newvalue.value;
    isempty = newvalue.isempty;
  }

  public SchemaBoolean(boolean newvalue) {
    setValue( newvalue );
  }

  public SchemaBoolean(String newvalue) {
    parse( newvalue );
  }

  public SchemaBoolean(SchemaType newvalue) {
    assign( newvalue );
  }

  public SchemaBoolean(SchemaTypeNumber newvalue) {
    assign( (SchemaType)newvalue );
  }

  // getValue, setValue
  public boolean getValue() {
    return value;
  }

  public void setValue(boolean newvalue) {
    isempty = false;
    value = newvalue;
  }

  public void parse(String newvalue) {
    if( newvalue == null ) {
      isempty = true;
      value = false;
      return;
    }
    setValue( new SchemaString(newvalue).booleanValue() );
  }

  public void assign(SchemaType newvalue) {
    parse( newvalue.toString() );
  }

  // further
  public int hashCode() {
    return value ? 1231 : 1237;
  }

  public boolean equals(Object obj) {
    if (! (obj instanceof SchemaBoolean))
      return false;
    return value == ( (SchemaBoolean) obj).value;
  }

  public Object clone() {
    return new SchemaBoolean(value);
  }

  public String toString() {
    if( isempty )
      return "";
    return value ? "true" : "false"; // when converting to an string-value, than XML-Schema would expect "" for false.
  }

  public int length() {
    return 1;	// length of the number (0 or 1)
  }

  public boolean booleanValue() {
    return value;
  }

  public boolean isEmpty() {
    return isempty;
  }

  public int compareTo(Object obj) {
    return compareTo( (SchemaBoolean) obj);
  }

  public int compareTo(SchemaBoolean obj) {
    if (value == obj.value)
      return 0;
    else if (value == false)
      return -1;
    else
      return 1;
  }

  // interface SchemaTypeNumber
  public int numericType() {
    return NUMERIC_VALUE_INT;
  }

  public void setValue(int newvalue) {
    value = ! (newvalue == 0);
  }

  public void setValue(long newvalue) {
    value = ! (newvalue == 0);
  }

  public void setValue(BigInteger newvalue) {
    value = newvalue.compareTo(BigInteger.valueOf(0)) != 0;
  }

  public void setValue(float newvalue) {
    value = ! (newvalue == 0);
  }

  public void setValue(double newvalue) {
    value = ! (newvalue == 0);
  }

  public void setValue(BigDecimal newvalue) {
    value = newvalue.compareTo(BigDecimal.valueOf(0)) != 0;
  }

  public int intValue() {
    if (value)
      return 1;
    return 0;
  }

  public long longValue() {
    if (value)
      return 1L;
    return 0L;
  }

  public BigInteger bigIntegerValue() {
    if (value)
      return BigInteger.valueOf(1L);
    return BigInteger.valueOf(0L);
  }

  public float floatValue() {
    if (value)
      return 1;
    return 0;
  }

  public double doubleValue() {
    if (value)
      return 1.0;
    return 0.0;
  }

  public BigDecimal bigDecimalValue() {
    if (value)
      return BigDecimal.valueOf(1L);
    return BigDecimal.valueOf(0L);
  }
}
