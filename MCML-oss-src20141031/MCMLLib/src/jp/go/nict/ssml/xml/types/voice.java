/**
 * voice.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.ssml.xml.types;

import jp.go.nict.ssml.xml.altova.types.*;

public class voice extends jp.go.nict.ssml.xml.altova.xml.Node {
	public voice() {
		super();
	}

	public voice(voice node) {
		super(node);
	}

	public voice(org.w3c.dom.Node node) {
		super(node);
	}

	public voice(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "languages");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "languages", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "name");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "name", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "gender");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "gender", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "f0-mean");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "f0-mean", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "p");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "p", i);
			internalAdjustPrefix(tmpNode, true);
			new paragraph(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "s");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "s", i);
			internalAdjustPrefix(tmpNode, true);
			new sentence(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "say-as");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "say-as", i);
			internalAdjustPrefix(tmpNode, true);
			new say_as(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "break");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "break", i);
			internalAdjustPrefix(tmpNode, true);
			new break2(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "token");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "token", i);
			internalAdjustPrefix(tmpNode, true);
			new tokenType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "w");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "w", i);
			internalAdjustPrefix(tmpNode, true);
			new tokenType(tmpNode).adjustPrefix();
		}
	}

	public int getlanguagesMinCount() {
		return 1;
	}

	public int getlanguagesMaxCount() {
		return 1;
	}

	public int getlanguagesCount() {
		return getDomChildCount(Attribute, null, "languages");
	}

	public boolean haslanguages() {
		return hasDomChild(Attribute, null, "languages");
	}

	public SchemaNMToken getlanguagesAt(int index) throws Exception {
		return new SchemaNMToken(getDomNodeValue(getDomChildAt(Attribute, null, "languages", index)));
	}

	public SchemaNMToken getlanguages() throws Exception {
		return getlanguagesAt(0);
	}

	public void removelanguagesAt(int index) {
		removeDomChildAt(Attribute, null, "languages", index);
	}

	public void removelanguages() {
		while (haslanguages())
			removelanguagesAt(0);
	}

	public void addlanguages(SchemaNMToken value) {
		appendDomChild(Attribute, null, "languages", value.toString());
	}

	public void addlanguages(String value) throws Exception {
		addlanguages(new SchemaNMToken(value));
	}

	public void insertlanguagesAt(SchemaNMToken value, int index) {
		insertDomChildAt(Attribute, null, "languages", index, value.toString());
	}

	public void insertlanguagesAt(String value, int index) throws Exception {
		insertlanguagesAt(new SchemaNMToken(value), index);
	}

	public void replacelanguagesAt(SchemaNMToken value, int index) {
		replaceDomChildAt(Attribute, null, "languages", index, value.toString());
	}

	public void replacelanguagesAt(String value, int index) throws Exception {
		replacelanguagesAt(new SchemaNMToken(value), index);
	}

	public int getnameMinCount() {
		return 0;
	}

	public int getnameMaxCount() {
		return 1;
	}

	public int getnameCount() {
		return getDomChildCount(Attribute, null, "name");
	}

	public boolean hasname() {
		return hasDomChild(Attribute, null, "name");
	}

	public name_datatype getnameAt(int index) throws Exception {
		return new name_datatype(getDomNodeValue(getDomChildAt(Attribute, null, "name", index)));
	}

	public name_datatype getname() throws Exception {
		return getnameAt(0);
	}

	public void removenameAt(int index) {
		removeDomChildAt(Attribute, null, "name", index);
	}

	public void removename() {
		while (hasname())
			removenameAt(0);
	}

	public void addname(name_datatype value) {
		appendDomChild(Attribute, null, "name", value.toString());
	}

	public void addname(String value) throws Exception {
		addname(new name_datatype(value));
	}

	public void insertnameAt(name_datatype value, int index) {
		insertDomChildAt(Attribute, null, "name", index, value.toString());
	}

	public void insertnameAt(String value, int index) throws Exception {
		insertnameAt(new name_datatype(value), index);
	}

	public void replacenameAt(name_datatype value, int index) {
		replaceDomChildAt(Attribute, null, "name", index, value.toString());
	}

	public void replacenameAt(String value, int index) throws Exception {
		replacenameAt(new name_datatype(value), index);
	}

	public int getgenderMinCount() {
		return 0;
	}

	public int getgenderMaxCount() {
		return 1;
	}

	public int getgenderCount() {
		return getDomChildCount(Attribute, null, "gender");
	}

	public boolean hasgender() {
		return hasDomChild(Attribute, null, "gender");
	}

	public gender_datatype getgenderAt(int index) throws Exception {
		return new gender_datatype(getDomNodeValue(getDomChildAt(Attribute, null, "gender", index)));
	}

	public gender_datatype getgender() throws Exception {
		return getgenderAt(0);
	}

	public void removegenderAt(int index) {
		removeDomChildAt(Attribute, null, "gender", index);
	}

	public void removegender() {
		while (hasgender())
			removegenderAt(0);
	}

	public void addgender(gender_datatype value) {
		appendDomChild(Attribute, null, "gender", value.toString());
	}

	public void addgender(String value) throws Exception {
		addgender(new gender_datatype(value));
	}

	public void insertgenderAt(gender_datatype value, int index) {
		insertDomChildAt(Attribute, null, "gender", index, value.toString());
	}

	public void insertgenderAt(String value, int index) throws Exception {
		insertgenderAt(new gender_datatype(value), index);
	}

	public void replacegenderAt(gender_datatype value, int index) {
		replaceDomChildAt(Attribute, null, "gender", index, value.toString());
	}

	public void replacegenderAt(String value, int index) throws Exception {
		replacegenderAt(new gender_datatype(value), index);
	}

	public int getf0_meanMinCount() {
		return 0;
	}

	public int getf0_meanMaxCount() {
		return 1;
	}

	public int getf0_meanCount() {
		return getDomChildCount(Attribute, null, "f0-mean");
	}

	public boolean hasf0_mean() {
		return hasDomChild(Attribute, null, "f0-mean");
	}

	public SchemaFloat getf0_meanAt(int index) throws Exception {
		return new SchemaFloat(getDomNodeValue(getDomChildAt(Attribute, null, "f0-mean", index)));
	}

	public SchemaFloat getf0_mean() throws Exception {
		return getf0_meanAt(0);
	}

	public void removef0_meanAt(int index) {
		removeDomChildAt(Attribute, null, "f0-mean", index);
	}

	public void removef0_mean() {
		while (hasf0_mean())
			removef0_meanAt(0);
	}

	public void addf0_mean(SchemaFloat value) {
		appendDomChild(Attribute, null, "f0-mean", value.toString());
	}

	public void addf0_mean(String value) throws Exception {
		addf0_mean(new SchemaFloat(value));
	}

	public void insertf0_meanAt(SchemaFloat value, int index) {
		insertDomChildAt(Attribute, null, "f0-mean", index, value.toString());
	}

	public void insertf0_meanAt(String value, int index) throws Exception {
		insertf0_meanAt(new SchemaFloat(value), index);
	}

	public void replacef0_meanAt(SchemaFloat value, int index) {
		replaceDomChildAt(Attribute, null, "f0-mean", index, value.toString());
	}

	public void replacef0_meanAt(String value, int index) throws Exception {
		replacef0_meanAt(new SchemaFloat(value), index);
	}

	public int getpMinCount() {
		return 1;
	}

	public int getpMaxCount() {
		return 1;
	}

	public int getpCount() {
		return getDomChildCount(Element, null, "p");
	}

	public boolean hasp() {
		return hasDomChild(Element, null, "p");
	}

	public paragraph getpAt(int index) throws Exception {
		return new paragraph(getDomChildAt(Element, null, "p", index));
	}

	public paragraph getp() throws Exception {
		return getpAt(0);
	}

	public void removepAt(int index) {
		removeDomChildAt(Element, null, "p", index);
	}

	public void removep() {
		while (hasp())
			removepAt(0);
	}

	public void addp(paragraph value) {
		appendDomElement(null, "p", value);
	}

	public void insertpAt(paragraph value, int index) {
		insertDomElementAt(null, "p", index, value);
	}

	public void replacepAt(paragraph value, int index) {
		replaceDomElementAt(null, "p", index, value);
	}

	public int getsMinCount() {
		return 1;
	}

	public int getsMaxCount() {
		return 1;
	}

	public int getsCount() {
		return getDomChildCount(Element, null, "s");
	}

	public boolean hass() {
		return hasDomChild(Element, null, "s");
	}

	public sentence getsAt(int index) throws Exception {
		return new sentence(getDomChildAt(Element, null, "s", index));
	}

	public sentence gets() throws Exception {
		return getsAt(0);
	}

	public void removesAt(int index) {
		removeDomChildAt(Element, null, "s", index);
	}

	public void removes() {
		while (hass())
			removesAt(0);
	}

	public void adds(sentence value) {
		appendDomElement(null, "s", value);
	}

	public void insertsAt(sentence value, int index) {
		insertDomElementAt(null, "s", index, value);
	}

	public void replacesAt(sentence value, int index) {
		replaceDomElementAt(null, "s", index, value);
	}

	public int getsay_asMinCount() {
		return 1;
	}

	public int getsay_asMaxCount() {
		return 1;
	}

	public int getsay_asCount() {
		return getDomChildCount(Element, null, "say-as");
	}

	public boolean hassay_as() {
		return hasDomChild(Element, null, "say-as");
	}

	public say_as getsay_asAt(int index) throws Exception {
		return new say_as(getDomChildAt(Element, null, "say-as", index));
	}

	public say_as getsay_as() throws Exception {
		return getsay_asAt(0);
	}

	public void removesay_asAt(int index) {
		removeDomChildAt(Element, null, "say-as", index);
	}

	public void removesay_as() {
		while (hassay_as())
			removesay_asAt(0);
	}

	public void addsay_as(say_as value) {
		appendDomElement(null, "say-as", value);
	}

	public void insertsay_asAt(say_as value, int index) {
		insertDomElementAt(null, "say-as", index, value);
	}

	public void replacesay_asAt(say_as value, int index) {
		replaceDomElementAt(null, "say-as", index, value);
	}

	public int getbreak2MinCount() {
		return 1;
	}

	public int getbreak2MaxCount() {
		return 1;
	}

	public int getbreak2Count() {
		return getDomChildCount(Element, null, "break");
	}

	public boolean hasbreak2() {
		return hasDomChild(Element, null, "break");
	}

	public break2 getbreak2At(int index) throws Exception {
		return new break2(getDomChildAt(Element, null, "break", index));
	}

	public break2 getbreak2() throws Exception {
		return getbreak2At(0);
	}

	public void removebreak2At(int index) {
		removeDomChildAt(Element, null, "break", index);
	}

	public void removebreak2() {
		while (hasbreak2())
			removebreak2At(0);
	}

	public void addbreak2(break2 value) {
		appendDomElement(null, "break", value);
	}

	public void insertbreak2At(break2 value, int index) {
		insertDomElementAt(null, "break", index, value);
	}

	public void replacebreak2At(break2 value, int index) {
		replaceDomElementAt(null, "break", index, value);
	}

	public int gettokenMinCount() {
		return 1;
	}

	public int gettokenMaxCount() {
		return 1;
	}

	public int gettokenCount() {
		return getDomChildCount(Element, null, "token");
	}

	public boolean hastoken() {
		return hasDomChild(Element, null, "token");
	}

	public tokenType gettokenAt(int index) throws Exception {
		return new tokenType(getDomChildAt(Element, null, "token", index));
	}

	public tokenType gettoken() throws Exception {
		return gettokenAt(0);
	}

	public void removetokenAt(int index) {
		removeDomChildAt(Element, null, "token", index);
	}

	public void removetoken() {
		while (hastoken())
			removetokenAt(0);
	}

	public void addtoken(tokenType value) {
		appendDomElement(null, "token", value);
	}

	public void inserttokenAt(tokenType value, int index) {
		insertDomElementAt(null, "token", index, value);
	}

	public void replacetokenAt(tokenType value, int index) {
		replaceDomElementAt(null, "token", index, value);
	}

	public int getwMinCount() {
		return 1;
	}

	public int getwMaxCount() {
		return 1;
	}

	public int getwCount() {
		return getDomChildCount(Element, null, "w");
	}

	public boolean hasw() {
		return hasDomChild(Element, null, "w");
	}

	public tokenType getwAt(int index) throws Exception {
		return new tokenType(getDomChildAt(Element, null, "w", index));
	}

	public tokenType getw() throws Exception {
		return getwAt(0);
	}

	public void removewAt(int index) {
		removeDomChildAt(Element, null, "w", index);
	}

	public void removew() {
		while (hasw())
			removewAt(0);
	}

	public void addw(tokenType value) {
		appendDomElement(null, "w", value);
	}

	public void insertwAt(tokenType value, int index) {
		insertDomElementAt(null, "w", index, value);
	}

	public void replacewAt(tokenType value, int index) {
		replaceDomElementAt(null, "w", index, value);
	}
}
