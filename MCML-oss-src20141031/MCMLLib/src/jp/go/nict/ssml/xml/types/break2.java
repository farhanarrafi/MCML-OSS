/**
 * break2.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.ssml.xml.types;

import jp.go.nict.ssml.xml.altova.types.*;

public class break2 extends jp.go.nict.ssml.xml.altova.xml.Node {
	public break2() {
		super();
	}

	public break2(break2 node) {
		super(node);
	}

	public break2(org.w3c.dom.Node node) {
		super(node);
	}

	public break2(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "strength");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "strength", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "time");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "time", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getstrengthMinCount() {
		return 0;
	}

	public int getstrengthMaxCount() {
		return 1;
	}

	public int getstrengthCount() {
		return getDomChildCount(Attribute, null, "strength");
	}

	public boolean hasstrength() {
		return hasDomChild(Attribute, null, "strength");
	}

	public strength_datatype getstrengthAt(int index) throws Exception {
		return new strength_datatype(getDomNodeValue(getDomChildAt(Attribute, null, "strength", index)));
	}

	public strength_datatype getstrength() throws Exception {
		return getstrengthAt(0);
	}

	public void removestrengthAt(int index) {
		removeDomChildAt(Attribute, null, "strength", index);
	}

	public void removestrength() {
		while (hasstrength())
			removestrengthAt(0);
	}

	public void addstrength(strength_datatype value) {
		appendDomChild(Attribute, null, "strength", value.toString());
	}

	public void addstrength(String value) throws Exception {
		addstrength(new strength_datatype(value));
	}

	public void insertstrengthAt(strength_datatype value, int index) {
		insertDomChildAt(Attribute, null, "strength", index, value.toString());
	}

	public void insertstrengthAt(String value, int index) throws Exception {
		insertstrengthAt(new strength_datatype(value), index);
	}

	public void replacestrengthAt(strength_datatype value, int index) {
		replaceDomChildAt(Attribute, null, "strength", index, value.toString());
	}

	public void replacestrengthAt(String value, int index) throws Exception {
		replacestrengthAt(new strength_datatype(value), index);
	}

	public int gettimeMinCount() {
		return 0;
	}

	public int gettimeMaxCount() {
		return 1;
	}

	public int gettimeCount() {
		return getDomChildCount(Attribute, null, "time");
	}

	public boolean hastime() {
		return hasDomChild(Attribute, null, "time");
	}

	public duration gettimeAt(int index) throws Exception {
		return new duration(getDomNodeValue(getDomChildAt(Attribute, null, "time", index)));
	}

	public duration gettime() throws Exception {
		return gettimeAt(0);
	}

	public void removetimeAt(int index) {
		removeDomChildAt(Attribute, null, "time", index);
	}

	public void removetime() {
		while (hastime())
			removetimeAt(0);
	}

	public void addtime(duration value) {
		appendDomChild(Attribute, null, "time", value.toString());
	}

	public void addtime(String value) throws Exception {
		addtime(new duration(value));
	}

	public void inserttimeAt(duration value, int index) {
		insertDomChildAt(Attribute, null, "time", index, value.toString());
	}

	public void inserttimeAt(String value, int index) throws Exception {
		inserttimeAt(new duration(value), index);
	}

	public void replacetimeAt(duration value, int index) {
		replaceDomChildAt(Attribute, null, "time", index, value.toString());
	}

	public void replacetimeAt(String value, int index) throws Exception {
		replacetimeAt(new duration(value), index);
	}
}
