/**
 * SchemaShort.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.ssml.xml.altova.types;

import java.math.BigInteger;
import java.math.BigDecimal;

public class SchemaShort implements SchemaTypeNumber {
  protected short value;
  protected boolean isempty;

  // construction
  public SchemaShort() {
    value = 0;
    isempty = true;
  }

  public SchemaShort(SchemaShort newvalue) {
    value = newvalue.value;
    isempty = newvalue.isempty;
  }

  public SchemaShort(short newvalue) {
    setValue ((short) newvalue);
  }

  public SchemaShort(int newvalue) {
    setValue ((short)newvalue);
  }

  public SchemaShort(String newvalue) {
    parse(newvalue);
  }

  public SchemaShort(SchemaType newvalue) {
    assign( newvalue );
  }

  public SchemaShort(SchemaTypeNumber newvalue) {
    assign( (SchemaType)newvalue );
  }

  // getValue, setValue
  public short getValue() {
    return value;
  }

  public void setValue(short newvalue) {
    value = newvalue;
    isempty = false;
  }

  public void parse(String newvalue) {
    if( newvalue == null  ||  newvalue == "" ) {
      isempty = true;
      value = 0;
      return;
    }
    value = Short.parseShort(newvalue);
    isempty = false;
  }

  public void assign(SchemaType newvalue) {
    if( newvalue == null || newvalue.isEmpty() ) {
      isempty = true;
      value = 0;
      return;
    }
    if( newvalue instanceof SchemaTypeNumber) {
      value = (short) ( (SchemaTypeNumber) newvalue).intValue();
      isempty = false;
    }
    else
      throw new TypesIncompatibleException( newvalue, this );
  }

  // further
  public int hashCode() {
    return value;
  }

  public boolean equals(Object obj) {
    if (! (obj instanceof SchemaShort))
      return false;
    return value == ( (SchemaShort) obj).value;
  }

  public Object clone() {
    return new SchemaShort(value);
  }

  public String toString() {
    if( isempty )
      return "";
    return Short.toString(value);
  }

  public int length() {
    return toString().length();
  }

  public boolean booleanValue() {
    return value != 0;
  }

  public boolean isEmpty() {
    return isempty;
  }

  public int compareTo(Object obj) {
    return compareTo( (SchemaShort) obj);
  }

  public int compareTo(SchemaShort obj) {
    return new Short(value).compareTo(new Short(obj.value));
  }

  // interface SchemaTypeNumber
  public int numericType() {
    return NUMERIC_VALUE_INT;
  }

  public int intValue() {
    return value;
  }

  public long longValue() {
    return value;
  }

  public BigInteger bigIntegerValue() {
    return BigInteger.valueOf(value);
  }

  public float floatValue() {
    return value;
  }

  public double doubleValue() {
    return value;
  }

  public BigDecimal bigDecimalValue() {
    return BigDecimal.valueOf(value);
  }

}
