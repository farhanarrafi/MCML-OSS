/**
 * speakType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.ssml.xml.types;

import jp.go.nict.ssml.xml.altova.types.*;

public class speakType extends jp.go.nict.ssml.xml.altova.xml.Node {
	public speakType() {
		super();
	}

	public speakType(speakType node) {
		super(node);
	}

	public speakType(org.w3c.dom.Node node) {
		super(node);
	}

	public speakType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "version");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "version", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, "http://www.w3.org/XML/1998/namespace", "lang");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, "http://www.w3.org/XML/1998/namespace", "lang", i);
			internalAdjustPrefix(tmpNode, true);
		}
		count = getDomChildCount(Element, "http://www.w3.org/XML/1998/namespace", "p");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, "http://www.w3.org/XML/1998/namespace", "p", i);
			internalAdjustPrefix(tmpNode, true);
			new paragraph(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, "http://www.w3.org/XML/1998/namespace", "s");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, "http://www.w3.org/XML/1998/namespace", "s", i);
			internalAdjustPrefix(tmpNode, true);
			new sentence(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, "http://www.w3.org/XML/1998/namespace", "voice");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, "http://www.w3.org/XML/1998/namespace", "voice", i);
			internalAdjustPrefix(tmpNode, true);
			new voice(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, "http://www.w3.org/XML/1998/namespace", "say-as");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, "http://www.w3.org/XML/1998/namespace", "say-as", i);
			internalAdjustPrefix(tmpNode, true);
			new say_as(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, "http://www.w3.org/XML/1998/namespace", "break");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, "http://www.w3.org/XML/1998/namespace", "break", i);
			internalAdjustPrefix(tmpNode, true);
			new break2(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, "http://www.w3.org/XML/1998/namespace", "token");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, "http://www.w3.org/XML/1998/namespace", "token", i);
			internalAdjustPrefix(tmpNode, true);
			new tokenType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, "http://www.w3.org/XML/1998/namespace", "w");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, "http://www.w3.org/XML/1998/namespace", "w", i);
			internalAdjustPrefix(tmpNode, true);
			new tokenType(tmpNode).adjustPrefix();
		}
	}

	public int getversionMinCount() {
		return 0;
	}

	public int getversionMaxCount() {
		return 1;
	}

	public int getversionCount() {
		return getDomChildCount(Attribute, null, "version");
	}

	public boolean hasversion() {
		return hasDomChild(Attribute, null, "version");
	}

	public SchemaNMToken getversionAt(int index) throws Exception {
		return new SchemaNMToken(getDomNodeValue(getDomChildAt(Attribute, null, "version", index)));
	}

	public SchemaNMToken getversion() throws Exception {
		return getversionAt(0);
	}

	public void removeversionAt(int index) {
		removeDomChildAt(Attribute, null, "version", index);
	}

	public void removeversion() {
		while (hasversion())
			removeversionAt(0);
	}

	public void addversion(SchemaNMToken value) {
		appendDomChild(Attribute, null, "version", value.toString());
	}

	public void addversion(String value) throws Exception {
		addversion(new SchemaNMToken(value));
	}

	public void insertversionAt(SchemaNMToken value, int index) {
		insertDomChildAt(Attribute, null, "version", index, value.toString());
	}

	public void insertversionAt(String value, int index) throws Exception {
		insertversionAt(new SchemaNMToken(value), index);
	}

	public void replaceversionAt(SchemaNMToken value, int index) {
		replaceDomChildAt(Attribute, null, "version", index, value.toString());
	}

	public void replaceversionAt(String value, int index) throws Exception {
		replaceversionAt(new SchemaNMToken(value), index);
	}

	public int getlangMinCount() {
		return 0;
	}

	public int getlangMaxCount() {
		return 1;
	}

	public int getlangCount() {
		return getDomChildCount(Attribute, "http://www.w3.org/XML/1998/namespace", "lang");
	}

	public boolean haslang() {
		return hasDomChild(Attribute, "http://www.w3.org/XML/1998/namespace", "lang");
	}

	public SchemaLanguage getlangAt(int index) throws Exception {
		return new SchemaLanguage(getDomNodeValue(getDomChildAt(Attribute, "http://www.w3.org/XML/1998/namespace", "lang", index)));
	}

	public SchemaLanguage getlang() throws Exception {
		return getlangAt(0);
	}

	public void removelangAt(int index) {
		removeDomChildAt(Attribute, "http://www.w3.org/XML/1998/namespace", "lang", index);
	}

	public void removelang() {
		while (haslang())
			removelangAt(0);
	}

	public void addlang(SchemaLanguage value) {
		appendDomChild(Attribute, "http://www.w3.org/XML/1998/namespace", "lang", value.toString());
	}

	public void addlang(String value) throws Exception {
		addlang(new SchemaLanguage(value));
	}

	public void insertlangAt(SchemaLanguage value, int index) {
		insertDomChildAt(Attribute, "http://www.w3.org/XML/1998/namespace", "lang", index, value.toString());
	}

	public void insertlangAt(String value, int index) throws Exception {
		insertlangAt(new SchemaLanguage(value), index);
	}

	public void replacelangAt(SchemaLanguage value, int index) {
		replaceDomChildAt(Attribute, "http://www.w3.org/XML/1998/namespace", "lang", index, value.toString());
	}

	public void replacelangAt(String value, int index) throws Exception {
		replacelangAt(new SchemaLanguage(value), index);
	}

	public int getpMinCount() {
		return 1;
	}

	public int getpMaxCount() {
		return 1;
	}

	public int getpCount() {
		return getDomChildCount(Element, null, "p");
	}

	public boolean hasp() {
		return hasDomChild(Element, null, "p");
	}

	public paragraph getpAt(int index) throws Exception {
		return new paragraph(getDomChildAt(Element, null, "p", index));
	}

	public paragraph getp() throws Exception {
		return getpAt(0);
	}

	public void removepAt(int index) {
		removeDomChildAt(Element, null, "p", index);
	}

	public void removep() {
		while (hasp())
			removepAt(0);
	}

	public void addp(paragraph value) {
		appendDomElement(null, "p", value);
	}

	public void insertpAt(paragraph value, int index) {
		insertDomElementAt(null, "p", index, value);
	}

	public void replacepAt(paragraph value, int index) {
		replaceDomElementAt(null, "p", index, value);
	}

	public int getsMinCount() {
		return 1;
	}

	public int getsMaxCount() {
		return 1;
	}

	public int getsCount() {
		return getDomChildCount(Element, null, "s");
	}

	public boolean hass() {
		return hasDomChild(Element, null, "s");
	}

	public sentence getsAt(int index) throws Exception {
		return new sentence(getDomChildAt(Element, null, "s", index));
	}

	public sentence gets() throws Exception {
		return getsAt(0);
	}

	public void removesAt(int index) {
		removeDomChildAt(Element, null, "s", index);
	}

	public void removes() {
		while (hass())
			removesAt(0);
	}

	public void adds(sentence value) {
		appendDomElement(null, "s", value);
	}

	public void insertsAt(sentence value, int index) {
		insertDomElementAt(null, "s", index, value);
	}

	public void replacesAt(sentence value, int index) {
		replaceDomElementAt(null, "s", index, value);
	}

	public int getvoiceMinCount() {
		return 1;
	}

	public int getvoiceMaxCount() {
		return 1;
	}

	public int getvoiceCount() {
		return getDomChildCount(Element, null, "voice");
	}

	public boolean hasvoice() {
		return hasDomChild(Element, null, "voice");
	}

	public voice getvoiceAt(int index) throws Exception {
		return new voice(getDomChildAt(Element, null, "voice", index));
	}

	public voice getvoice() throws Exception {
		return getvoiceAt(0);
	}

	public void removevoiceAt(int index) {
		removeDomChildAt(Element, null, "voice", index);
	}

	public void removevoice() {
		while (hasvoice())
			removevoiceAt(0);
	}

	public void addvoice(voice value) {
		appendDomElement(null, "voice", value);
	}

	public void insertvoiceAt(voice value, int index) {
		insertDomElementAt(null, "voice", index, value);
	}

	public void replacevoiceAt(voice value, int index) {
		replaceDomElementAt(null, "voice", index, value);
	}

	public int getsay_asMinCount() {
		return 1;
	}

	public int getsay_asMaxCount() {
		return 1;
	}

	public int getsay_asCount() {
		return getDomChildCount(Element, null, "say-as");
	}

	public boolean hassay_as() {
		return hasDomChild(Element, null, "say-as");
	}

	public say_as getsay_asAt(int index) throws Exception {
		return new say_as(getDomChildAt(Element, null, "say-as", index));
	}

	public say_as getsay_as() throws Exception {
		return getsay_asAt(0);
	}

	public void removesay_asAt(int index) {
		removeDomChildAt(Element, null, "say-as", index);
	}

	public void removesay_as() {
		while (hassay_as())
			removesay_asAt(0);
	}

	public void addsay_as(say_as value) {
		appendDomElement(null, "say-as", value);
	}

	public void insertsay_asAt(say_as value, int index) {
		insertDomElementAt(null, "say-as", index, value);
	}

	public void replacesay_asAt(say_as value, int index) {
		replaceDomElementAt(null, "say-as", index, value);
	}

	public int getbreak2MinCount() {
		return 1;
	}

	public int getbreak2MaxCount() {
		return 1;
	}

	public int getbreak2Count() {
		return getDomChildCount(Element, null, "break");
	}

	public boolean hasbreak2() {
		return hasDomChild(Element, null, "break");
	}

	public break2 getbreak2At(int index) throws Exception {
		return new break2(getDomChildAt(Element, null, "break", index));
	}

	public break2 getbreak2() throws Exception {
		return getbreak2At(0);
	}

	public void removebreak2At(int index) {
		removeDomChildAt(Element, null, "break", index);
	}

	public void removebreak2() {
		while (hasbreak2())
			removebreak2At(0);
	}

	public void addbreak2(break2 value) {
		appendDomElement(null, "break", value);
	}

	public void insertbreak2At(break2 value, int index) {
		insertDomElementAt(null, "break", index, value);
	}

	public void replacebreak2At(break2 value, int index) {
		replaceDomElementAt(null, "break", index, value);
	}

	public int gettokenMinCount() {
		return 1;
	}

	public int gettokenMaxCount() {
		return 1;
	}

	public int gettokenCount() {
		return getDomChildCount(Element, null, "token");
	}

	public boolean hastoken() {
		return hasDomChild(Element, null, "token");
	}

	public tokenType gettokenAt(int index) throws Exception {
		return new tokenType(getDomChildAt(Element, null, "token", index));
	}

	public tokenType gettoken() throws Exception {
		return gettokenAt(0);
	}

	public void removetokenAt(int index) {
		removeDomChildAt(Element, null, "token", index);
	}

	public void removetoken() {
		while (hastoken())
			removetokenAt(0);
	}

	public void addtoken(tokenType value) {
		appendDomElement(null, "token", value);
	}

	public void inserttokenAt(tokenType value, int index) {
		insertDomElementAt(null, "token", index, value);
	}

	public void replacetokenAt(tokenType value, int index) {
		replaceDomElementAt(null, "token", index, value);
	}

	public int getwMinCount() {
		return 1;
	}

	public int getwMaxCount() {
		return 1;
	}

	public int getwCount() {
		return getDomChildCount(Element, null, "w");
	}

	public boolean hasw() {
		return hasDomChild(Element, null, "w");
	}

	public tokenType getwAt(int index) throws Exception {
		return new tokenType(getDomChildAt(Element, null, "w", index));
	}

	public tokenType getw() throws Exception {
		return getwAt(0);
	}

	public void removewAt(int index) {
		removeDomChildAt(Element, null, "w", index);
	}

	public void removew() {
		while (hasw())
			removewAt(0);
	}

	public void addw(tokenType value) {
		appendDomElement(null, "w", value);
	}

	public void insertwAt(tokenType value, int index) {
		insertDomElementAt(null, "w", index, value);
	}

	public void replacewAt(tokenType value, int index) {
		replaceDomElementAt(null, "w", index, value);
	}
}
