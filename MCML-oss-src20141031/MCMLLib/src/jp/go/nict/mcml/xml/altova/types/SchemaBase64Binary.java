/**
 * SchemaBase64Binary.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.altova.types;


public class SchemaBase64Binary extends SchemaBinaryBase {
  // construction
  public SchemaBase64Binary() {
    super();
  }

  public SchemaBase64Binary(SchemaBase64Binary newvalue) {
    value = newvalue.value;
    isempty = newvalue.isempty;
  }

  public SchemaBase64Binary(byte[] newvalue) {
    value = newvalue;
	isempty = (newvalue != null);
  }

  public SchemaBase64Binary(String newvalue) {
    parse( newvalue );
  }

  public SchemaBase64Binary(SchemaType newvalue) {
    assign( newvalue );
  }

  public SchemaBase64Binary(SchemaTypeBinary newvalue) {
    assign( (SchemaType)newvalue );
  }

  // getValue, setValue
  public void parse(String newvalue) {
    if( newvalue == null ) {
      isempty = true;
      value = null;
    }
    else {
      isempty = false;
	  try {
		  value = new sun.misc.BASE64Decoder().decodeBuffer(newvalue);
	  }
	  catch( java.io.IOException e ) {
		value = null;
		isempty = true;
	  }
    }
  }

  // further
  public int hashCode() {
    return value.hashCode();
  }

  public boolean equals(Object obj) {
    if (! (obj instanceof SchemaBase64Binary))
      return false;
    return value == ( (SchemaBase64Binary) obj).value;
  }

  public Object clone() {
    return new SchemaBase64Binary( value );
  }

  public String toString() {
    if( isempty || value == null )
	  return "";
    String sResult = new sun.misc.BASE64Encoder().encode(value);
	return sResult.replaceAll( "&#13;", "\n" );
  }

  // ---------- interface SchemaTypeBinary ----------
  public int binaryType() {
	  return BINARY_VALUE_BASE64;
  }
}
