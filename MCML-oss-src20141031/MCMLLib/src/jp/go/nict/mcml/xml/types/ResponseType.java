/**
 * ResponseType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class ResponseType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public ResponseType() {
		super();
	}

	public ResponseType(ResponseType node) {
		super(node);
	}

	public ResponseType(org.w3c.dom.Node node) {
		super(node);
	}

	public ResponseType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "Service");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Service", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "ProcessOrder");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ProcessOrder", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "Routing");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Routing", i);
			internalAdjustPrefix(tmpNode, true);
			new RoutingType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Output");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Output", i);
			internalAdjustPrefix(tmpNode, true);
			new OutputType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Error");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Error", i);
			internalAdjustPrefix(tmpNode, true);
			new ErrorType(tmpNode).adjustPrefix();
		}
	}

	public int getServiceMinCount() {
		return 1;
	}

	public int getServiceMaxCount() {
		return 1;
	}

	public int getServiceCount() {
		return getDomChildCount(Attribute, null, "Service");
	}

	public boolean hasService() {
		return hasDomChild(Attribute, null, "Service");
	}

	public SchemaString getServiceAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Service", index)));
	}

	public SchemaString getService() throws Exception {
		return getServiceAt(0);
	}

	public void removeServiceAt(int index) {
		removeDomChildAt(Attribute, null, "Service", index);
	}

	public void removeService() {
		while (hasService())
			removeServiceAt(0);
	}

	public void addService(SchemaString value) {
		appendDomChild(Attribute, null, "Service", value.toString());
	}

	public void addService(String value) throws Exception {
		addService(new SchemaString(value));
	}

	public void insertServiceAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Service", index, value.toString());
	}

	public void insertServiceAt(String value, int index) throws Exception {
		insertServiceAt(new SchemaString(value), index);
	}

	public void replaceServiceAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Service", index, value.toString());
	}

	public void replaceServiceAt(String value, int index) throws Exception {
		replaceServiceAt(new SchemaString(value), index);
	}

	public int getProcessOrderMinCount() {
		return 1;
	}

	public int getProcessOrderMaxCount() {
		return 1;
	}

	public int getProcessOrderCount() {
		return getDomChildCount(Attribute, null, "ProcessOrder");
	}

	public boolean hasProcessOrder() {
		return hasDomChild(Attribute, null, "ProcessOrder");
	}

	public SchemaInt getProcessOrderAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "ProcessOrder", index)));
	}

	public SchemaInt getProcessOrder() throws Exception {
		return getProcessOrderAt(0);
	}

	public void removeProcessOrderAt(int index) {
		removeDomChildAt(Attribute, null, "ProcessOrder", index);
	}

	public void removeProcessOrder() {
		while (hasProcessOrder())
			removeProcessOrderAt(0);
	}

	public void addProcessOrder(SchemaInt value) {
		appendDomChild(Attribute, null, "ProcessOrder", value.toString());
	}

	public void addProcessOrder(String value) throws Exception {
		addProcessOrder(new SchemaInt(value));
	}

	public void insertProcessOrderAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "ProcessOrder", index, value.toString());
	}

	public void insertProcessOrderAt(String value, int index) throws Exception {
		insertProcessOrderAt(new SchemaInt(value), index);
	}

	public void replaceProcessOrderAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "ProcessOrder", index, value.toString());
	}

	public void replaceProcessOrderAt(String value, int index) throws Exception {
		replaceProcessOrderAt(new SchemaInt(value), index);
	}

	public int getRoutingMinCount() {
		return 1;
	}

	public int getRoutingMaxCount() {
		return 1;
	}

	public int getRoutingCount() {
		return getDomChildCount(Element, null, "Routing");
	}

	public boolean hasRouting() {
		return hasDomChild(Element, null, "Routing");
	}

	public RoutingType getRoutingAt(int index) throws Exception {
		return new RoutingType(getDomChildAt(Element, null, "Routing", index));
	}

	public RoutingType getRouting() throws Exception {
		return getRoutingAt(0);
	}

	public void removeRoutingAt(int index) {
		removeDomChildAt(Element, null, "Routing", index);
	}

	public void removeRouting() {
		while (hasRouting())
			removeRoutingAt(0);
	}

	public void addRouting(RoutingType value) {
		appendDomElement(null, "Routing", value);
	}

	public void insertRoutingAt(RoutingType value, int index) {
		insertDomElementAt(null, "Routing", index, value);
	}

	public void replaceRoutingAt(RoutingType value, int index) {
		replaceDomElementAt(null, "Routing", index, value);
	}

	public int getOutputMinCount() {
		return 1;
	}

	public int getOutputMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getOutputCount() {
		return getDomChildCount(Element, null, "Output");
	}

	public boolean hasOutput() {
		return hasDomChild(Element, null, "Output");
	}

	public OutputType getOutputAt(int index) throws Exception {
		return new OutputType(getDomChildAt(Element, null, "Output", index));
	}

	public OutputType getOutput() throws Exception {
		return getOutputAt(0);
	}

	public void removeOutputAt(int index) {
		removeDomChildAt(Element, null, "Output", index);
	}

	public void removeOutput() {
		while (hasOutput())
			removeOutputAt(0);
	}

	public void addOutput(OutputType value) {
		appendDomElement(null, "Output", value);
	}

	public void insertOutputAt(OutputType value, int index) {
		insertDomElementAt(null, "Output", index, value);
	}

	public void replaceOutputAt(OutputType value, int index) {
		replaceDomElementAt(null, "Output", index, value);
	}

	public int getErrorMinCount() {
		return 1;
	}

	public int getErrorMaxCount() {
		return 1;
	}

	public int getErrorCount() {
		return getDomChildCount(Element, null, "Error");
	}

	public boolean hasError() {
		return hasDomChild(Element, null, "Error");
	}

	public ErrorType getErrorAt(int index) throws Exception {
		return new ErrorType(getDomChildAt(Element, null, "Error", index));
	}

	public ErrorType getError() throws Exception {
		return getErrorAt(0);
	}

	public void removeErrorAt(int index) {
		removeDomChildAt(Element, null, "Error", index);
	}

	public void removeError() {
		while (hasError())
			removeErrorAt(0);
	}

	public void addError(ErrorType value) {
		appendDomElement(null, "Error", value);
	}

	public void insertErrorAt(ErrorType value, int index) {
		insertDomElementAt(null, "Error", index, value);
	}

	public void replaceErrorAt(ErrorType value, int index) {
		replaceDomElementAt(null, "Error", index, value);
	}
}
