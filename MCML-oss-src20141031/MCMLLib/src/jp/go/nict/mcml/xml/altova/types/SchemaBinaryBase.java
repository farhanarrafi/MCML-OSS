/**
 * SchemaBinaryBase.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.altova.types;

import java.lang.*;

public abstract class SchemaBinaryBase implements SchemaTypeBinary {
  protected byte[] value;
  protected boolean isempty;

  public SchemaBinaryBase() {
    isempty = true;
  }

  public boolean equals(Object obj) {
    if (! (obj instanceof SchemaBinaryBase))
      return false;
    SchemaBinaryBase bin = (SchemaBinaryBase)obj;
	if( value.length != bin.value.length )
      return false;
    for( int i = 0; i < value.length; i++ )
      if( value[i] != bin.value[i] )
        return false;
    return true;
  }

  public void assign(SchemaType newvalue) {
	if( newvalue == null || newvalue.isEmpty() ) {
	  value = null;
	  isempty = true;
	  return;
	}
	else if( newvalue instanceof SchemaBinaryBase ) {
		value = ((SchemaBinaryBase)newvalue).value;
		isempty = ((SchemaBinaryBase)newvalue).isempty;
	}
	else if( newvalue instanceof SchemaString )
	  parse( newvalue.toString() );
	else
	  throw new TypesIncompatibleException( newvalue, this );
  }

  // getValue, setValue
  public byte[] getValue() {
	return value;
  }

  public void setValue(byte[] newvalue) {
	value = newvalue;
	isempty = (newvalue == null ) ? true : false;
  }

  public abstract void parse(String s);

  // other interfaces
  public int hashCode() {
    if( value == null )
      return 0;
    return (int)value[0];
  }

  public int length() {
    return value.length;
  }

  public boolean booleanValue() {
    return true;
  }

  public boolean isEmpty() {
    return isempty;
  }

  public int compareTo(Object obj) {
    return compareTo( (SchemaBinaryBase) obj);
  }

  public int compareTo(SchemaBinaryBase obj) {
    if( value.length != obj.value.length )
      return new Integer( value.length ).compareTo( new Integer(obj.value.length) );
    for( int i = 0; i < value.length; i++ )
      if( value[i] != obj.value[i] )
        return new Integer(value[i]).compareTo( new Integer(obj.value[i]) );
    return 0;
  }

}
