/**
 * TextType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class TextType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public TextType() {
		super();
	}

	public TextType(TextType node) {
		super(node);
	}

	public TextType(org.w3c.dom.Node node) {
		super(node);
	}

	public TextType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "ChannelID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ChannelID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "BeginTimestamp");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "BeginTimestamp", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "EndTimestamp");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "EndTimestamp", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "EndPoint");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "EndPoint", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "ModelType");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "ModelType", i);
			internalAdjustPrefix(tmpNode, true);
			new ModelTypeType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "SentenceSequence");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "SentenceSequence", i);
			internalAdjustPrefix(tmpNode, true);
			new SentenceSequenceType(tmpNode).adjustPrefix();
		}
	}

	public int getChannelIDMinCount() {
		return 1;
	}

	public int getChannelIDMaxCount() {
		return 1;
	}

	public int getChannelIDCount() {
		return getDomChildCount(Attribute, null, "ChannelID");
	}

	public boolean hasChannelID() {
		return hasDomChild(Attribute, null, "ChannelID");
	}

	public SchemaInt getChannelIDAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "ChannelID", index)));
	}

	public SchemaInt getChannelID() throws Exception {
		return getChannelIDAt(0);
	}

	public void removeChannelIDAt(int index) {
		removeDomChildAt(Attribute, null, "ChannelID", index);
	}

	public void removeChannelID() {
		while (hasChannelID())
			removeChannelIDAt(0);
	}

	public void addChannelID(SchemaInt value) {
		appendDomChild(Attribute, null, "ChannelID", value.toString());
	}

	public void addChannelID(String value) throws Exception {
		addChannelID(new SchemaInt(value));
	}

	public void insertChannelIDAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "ChannelID", index, value.toString());
	}

	public void insertChannelIDAt(String value, int index) throws Exception {
		insertChannelIDAt(new SchemaInt(value), index);
	}

	public void replaceChannelIDAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "ChannelID", index, value.toString());
	}

	public void replaceChannelIDAt(String value, int index) throws Exception {
		replaceChannelIDAt(new SchemaInt(value), index);
	}

	public int getBeginTimestampMinCount() {
		return 1;
	}

	public int getBeginTimestampMaxCount() {
		return 1;
	}

	public int getBeginTimestampCount() {
		return getDomChildCount(Attribute, null, "BeginTimestamp");
	}

	public boolean hasBeginTimestamp() {
		return hasDomChild(Attribute, null, "BeginTimestamp");
	}

	public SchemaDateTime getBeginTimestampAt(int index) throws Exception {
		return new SchemaDateTime(getDomNodeValue(getDomChildAt(Attribute, null, "BeginTimestamp", index)));
	}

	public SchemaDateTime getBeginTimestamp() throws Exception {
		return getBeginTimestampAt(0);
	}

	public void removeBeginTimestampAt(int index) {
		removeDomChildAt(Attribute, null, "BeginTimestamp", index);
	}

	public void removeBeginTimestamp() {
		while (hasBeginTimestamp())
			removeBeginTimestampAt(0);
	}

	public void addBeginTimestamp(SchemaDateTime value) {
		appendDomChild(Attribute, null, "BeginTimestamp", value.toString());
	}

	public void addBeginTimestamp(String value) throws Exception {
		addBeginTimestamp(new SchemaDateTime(value));
	}

	public void insertBeginTimestampAt(SchemaDateTime value, int index) {
		insertDomChildAt(Attribute, null, "BeginTimestamp", index, value.toString());
	}

	public void insertBeginTimestampAt(String value, int index) throws Exception {
		insertBeginTimestampAt(new SchemaDateTime(value), index);
	}

	public void replaceBeginTimestampAt(SchemaDateTime value, int index) {
		replaceDomChildAt(Attribute, null, "BeginTimestamp", index, value.toString());
	}

	public void replaceBeginTimestampAt(String value, int index) throws Exception {
		replaceBeginTimestampAt(new SchemaDateTime(value), index);
	}

	public int getEndTimestampMinCount() {
		return 1;
	}

	public int getEndTimestampMaxCount() {
		return 1;
	}

	public int getEndTimestampCount() {
		return getDomChildCount(Attribute, null, "EndTimestamp");
	}

	public boolean hasEndTimestamp() {
		return hasDomChild(Attribute, null, "EndTimestamp");
	}

	public SchemaDateTime getEndTimestampAt(int index) throws Exception {
		return new SchemaDateTime(getDomNodeValue(getDomChildAt(Attribute, null, "EndTimestamp", index)));
	}

	public SchemaDateTime getEndTimestamp() throws Exception {
		return getEndTimestampAt(0);
	}

	public void removeEndTimestampAt(int index) {
		removeDomChildAt(Attribute, null, "EndTimestamp", index);
	}

	public void removeEndTimestamp() {
		while (hasEndTimestamp())
			removeEndTimestampAt(0);
	}

	public void addEndTimestamp(SchemaDateTime value) {
		appendDomChild(Attribute, null, "EndTimestamp", value.toString());
	}

	public void addEndTimestamp(String value) throws Exception {
		addEndTimestamp(new SchemaDateTime(value));
	}

	public void insertEndTimestampAt(SchemaDateTime value, int index) {
		insertDomChildAt(Attribute, null, "EndTimestamp", index, value.toString());
	}

	public void insertEndTimestampAt(String value, int index) throws Exception {
		insertEndTimestampAt(new SchemaDateTime(value), index);
	}

	public void replaceEndTimestampAt(SchemaDateTime value, int index) {
		replaceDomChildAt(Attribute, null, "EndTimestamp", index, value.toString());
	}

	public void replaceEndTimestampAt(String value, int index) throws Exception {
		replaceEndTimestampAt(new SchemaDateTime(value), index);
	}

	public int getEndPointMinCount() {
		return 0;
	}

	public int getEndPointMaxCount() {
		return 1;
	}

	public int getEndPointCount() {
		return getDomChildCount(Attribute, null, "EndPoint");
	}

	public boolean hasEndPoint() {
		return hasDomChild(Attribute, null, "EndPoint");
	}

	public SchemaDateTime getEndPointAt(int index) throws Exception {
		return new SchemaDateTime(getDomNodeValue(getDomChildAt(Attribute, null, "EndPoint", index)));
	}

	public SchemaDateTime getEndPoint() throws Exception {
		return getEndPointAt(0);
	}

	public void removeEndPointAt(int index) {
		removeDomChildAt(Attribute, null, "EndPoint", index);
	}

	public void removeEndPoint() {
		while (hasEndPoint())
			removeEndPointAt(0);
	}

	public void addEndPoint(SchemaDateTime value) {
		appendDomChild(Attribute, null, "EndPoint", value.toString());
	}

	public void addEndPoint(String value) throws Exception {
		addEndPoint(new SchemaDateTime(value));
	}

	public void insertEndPointAt(SchemaDateTime value, int index) {
		insertDomChildAt(Attribute, null, "EndPoint", index, value.toString());
	}

	public void insertEndPointAt(String value, int index) throws Exception {
		insertEndPointAt(new SchemaDateTime(value), index);
	}

	public void replaceEndPointAt(SchemaDateTime value, int index) {
		replaceDomChildAt(Attribute, null, "EndPoint", index, value.toString());
	}

	public void replaceEndPointAt(String value, int index) throws Exception {
		replaceEndPointAt(new SchemaDateTime(value), index);
	}

	public int getModelTypeMinCount() {
		return 0;
	}

	public int getModelTypeMaxCount() {
		return 1;
	}

	public int getModelTypeCount() {
		return getDomChildCount(Element, null, "ModelType");
	}

	public boolean hasModelType() {
		return hasDomChild(Element, null, "ModelType");
	}

	public ModelTypeType getModelTypeAt(int index) throws Exception {
		return new ModelTypeType(getDomChildAt(Element, null, "ModelType", index));
	}

	public ModelTypeType getModelType() throws Exception {
		return getModelTypeAt(0);
	}

	public void removeModelTypeAt(int index) {
		removeDomChildAt(Element, null, "ModelType", index);
	}

	public void removeModelType() {
		while (hasModelType())
			removeModelTypeAt(0);
	}

	public void addModelType(ModelTypeType value) {
		appendDomElement(null, "ModelType", value);
	}

	public void insertModelTypeAt(ModelTypeType value, int index) {
		insertDomElementAt(null, "ModelType", index, value);
	}

	public void replaceModelTypeAt(ModelTypeType value, int index) {
		replaceDomElementAt(null, "ModelType", index, value);
	}

	public int getSentenceSequenceMinCount() {
		return 1;
	}

	public int getSentenceSequenceMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getSentenceSequenceCount() {
		return getDomChildCount(Element, null, "SentenceSequence");
	}

	public boolean hasSentenceSequence() {
		return hasDomChild(Element, null, "SentenceSequence");
	}

	public SentenceSequenceType getSentenceSequenceAt(int index) throws Exception {
		return new SentenceSequenceType(getDomChildAt(Element, null, "SentenceSequence", index));
	}

	public SentenceSequenceType getSentenceSequence() throws Exception {
		return getSentenceSequenceAt(0);
	}

	public void removeSentenceSequenceAt(int index) {
		removeDomChildAt(Element, null, "SentenceSequence", index);
	}

	public void removeSentenceSequence() {
		while (hasSentenceSequence())
			removeSentenceSequenceAt(0);
	}

	public void addSentenceSequence(SentenceSequenceType value) {
		appendDomElement(null, "SentenceSequence", value);
	}

	public void insertSentenceSequenceAt(SentenceSequenceType value, int index) {
		insertDomElementAt(null, "SentenceSequence", index, value);
	}

	public void replaceSentenceSequenceAt(SentenceSequenceType value, int index) {
		replaceDomElementAt(null, "SentenceSequence", index, value);
	}
}
