/**
 * UserProfileType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class UserProfileType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public UserProfileType() {
		super();
	}

	public UserProfileType(UserProfileType node) {
		super(node);
	}

	public UserProfileType(org.w3c.dom.Node node) {
		super(node);
	}

	public UserProfileType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "ID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Age");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Age", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Gender");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Gender", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Email");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Email", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Password");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Password", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "AccessCode");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "AccessCode", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getIDMinCount() {
		return 1;
	}

	public int getIDMaxCount() {
		return 1;
	}

	public int getIDCount() {
		return getDomChildCount(Attribute, null, "ID");
	}

	public boolean hasID() {
		return hasDomChild(Attribute, null, "ID");
	}

	public SchemaString getIDAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "ID", index)));
	}

	public SchemaString getID() throws Exception {
		return getIDAt(0);
	}

	public void removeIDAt(int index) {
		removeDomChildAt(Attribute, null, "ID", index);
	}

	public void removeID() {
		while (hasID())
			removeIDAt(0);
	}

	public void addID(SchemaString value) {
		appendDomChild(Attribute, null, "ID", value.toString());
	}

	public void addID(String value) throws Exception {
		addID(new SchemaString(value));
	}

	public void insertIDAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "ID", index, value.toString());
	}

	public void insertIDAt(String value, int index) throws Exception {
		insertIDAt(new SchemaString(value), index);
	}

	public void replaceIDAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "ID", index, value.toString());
	}

	public void replaceIDAt(String value, int index) throws Exception {
		replaceIDAt(new SchemaString(value), index);
	}

	public int getAgeMinCount() {
		return 0;
	}

	public int getAgeMaxCount() {
		return 1;
	}

	public int getAgeCount() {
		return getDomChildCount(Attribute, null, "Age");
	}

	public boolean hasAge() {
		return hasDomChild(Attribute, null, "Age");
	}

	public SchemaInt getAgeAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "Age", index)));
	}

	public SchemaInt getAge() throws Exception {
		return getAgeAt(0);
	}

	public void removeAgeAt(int index) {
		removeDomChildAt(Attribute, null, "Age", index);
	}

	public void removeAge() {
		while (hasAge())
			removeAgeAt(0);
	}

	public void addAge(SchemaInt value) {
		appendDomChild(Attribute, null, "Age", value.toString());
	}

	public void addAge(String value) throws Exception {
		addAge(new SchemaInt(value));
	}

	public void insertAgeAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "Age", index, value.toString());
	}

	public void insertAgeAt(String value, int index) throws Exception {
		insertAgeAt(new SchemaInt(value), index);
	}

	public void replaceAgeAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "Age", index, value.toString());
	}

	public void replaceAgeAt(String value, int index) throws Exception {
		replaceAgeAt(new SchemaInt(value), index);
	}

	public int getGenderMinCount() {
		return 0;
	}

	public int getGenderMaxCount() {
		return 1;
	}

	public int getGenderCount() {
		return getDomChildCount(Attribute, null, "Gender");
	}

	public boolean hasGender() {
		return hasDomChild(Attribute, null, "Gender");
	}

	public SchemaString getGenderAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Gender", index)));
	}

	public SchemaString getGender() throws Exception {
		return getGenderAt(0);
	}

	public void removeGenderAt(int index) {
		removeDomChildAt(Attribute, null, "Gender", index);
	}

	public void removeGender() {
		while (hasGender())
			removeGenderAt(0);
	}

	public void addGender(SchemaString value) {
		appendDomChild(Attribute, null, "Gender", value.toString());
	}

	public void addGender(String value) throws Exception {
		addGender(new SchemaString(value));
	}

	public void insertGenderAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Gender", index, value.toString());
	}

	public void insertGenderAt(String value, int index) throws Exception {
		insertGenderAt(new SchemaString(value), index);
	}

	public void replaceGenderAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Gender", index, value.toString());
	}

	public void replaceGenderAt(String value, int index) throws Exception {
		replaceGenderAt(new SchemaString(value), index);
	}

	public int getEmailMinCount() {
		return 0;
	}

	public int getEmailMaxCount() {
		return 1;
	}

	public int getEmailCount() {
		return getDomChildCount(Attribute, null, "Email");
	}

	public boolean hasEmail() {
		return hasDomChild(Attribute, null, "Email");
	}

	public SchemaString getEmailAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Email", index)));
	}

	public SchemaString getEmail() throws Exception {
		return getEmailAt(0);
	}

	public void removeEmailAt(int index) {
		removeDomChildAt(Attribute, null, "Email", index);
	}

	public void removeEmail() {
		while (hasEmail())
			removeEmailAt(0);
	}

	public void addEmail(SchemaString value) {
		appendDomChild(Attribute, null, "Email", value.toString());
	}

	public void addEmail(String value) throws Exception {
		addEmail(new SchemaString(value));
	}

	public void insertEmailAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Email", index, value.toString());
	}

	public void insertEmailAt(String value, int index) throws Exception {
		insertEmailAt(new SchemaString(value), index);
	}

	public void replaceEmailAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Email", index, value.toString());
	}

	public void replaceEmailAt(String value, int index) throws Exception {
		replaceEmailAt(new SchemaString(value), index);
	}

	public int getPasswordMinCount() {
		return 0;
	}

	public int getPasswordMaxCount() {
		return 1;
	}

	public int getPasswordCount() {
		return getDomChildCount(Attribute, null, "Password");
	}

	public boolean hasPassword() {
		return hasDomChild(Attribute, null, "Password");
	}

	public SchemaString getPasswordAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Password", index)));
	}

	public SchemaString getPassword() throws Exception {
		return getPasswordAt(0);
	}

	public void removePasswordAt(int index) {
		removeDomChildAt(Attribute, null, "Password", index);
	}

	public void removePassword() {
		while (hasPassword())
			removePasswordAt(0);
	}

	public void addPassword(SchemaString value) {
		appendDomChild(Attribute, null, "Password", value.toString());
	}

	public void addPassword(String value) throws Exception {
		addPassword(new SchemaString(value));
	}

	public void insertPasswordAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Password", index, value.toString());
	}

	public void insertPasswordAt(String value, int index) throws Exception {
		insertPasswordAt(new SchemaString(value), index);
	}

	public void replacePasswordAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Password", index, value.toString());
	}

	public void replacePasswordAt(String value, int index) throws Exception {
		replacePasswordAt(new SchemaString(value), index);
	}

	public int getAccessCodeMinCount() {
		return 0;
	}

	public int getAccessCodeMaxCount() {
		return 1;
	}

	public int getAccessCodeCount() {
		return getDomChildCount(Attribute, null, "AccessCode");
	}

	public boolean hasAccessCode() {
		return hasDomChild(Attribute, null, "AccessCode");
	}

	public SchemaString getAccessCodeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "AccessCode", index)));
	}

	public SchemaString getAccessCode() throws Exception {
		return getAccessCodeAt(0);
	}

	public void removeAccessCodeAt(int index) {
		removeDomChildAt(Attribute, null, "AccessCode", index);
	}

	public void removeAccessCode() {
		while (hasAccessCode())
			removeAccessCodeAt(0);
	}

	public void addAccessCode(SchemaString value) {
		appendDomChild(Attribute, null, "AccessCode", value.toString());
	}

	public void addAccessCode(String value) throws Exception {
		addAccessCode(new SchemaString(value));
	}

	public void insertAccessCodeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "AccessCode", index, value.toString());
	}

	public void insertAccessCodeAt(String value, int index) throws Exception {
		insertAccessCodeAt(new SchemaString(value), index);
	}

	public void replaceAccessCodeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "AccessCode", index, value.toString());
	}

	public void replaceAccessCodeAt(String value, int index) throws Exception {
		replaceAccessCodeAt(new SchemaString(value), index);
	}
}
