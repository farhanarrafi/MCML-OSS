/**
 * SchemaDecimal.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.altova.types;

import java.math.BigDecimal;
import java.math.BigInteger;

public class SchemaDecimal implements SchemaTypeNumber {
  protected BigDecimal value;
  protected boolean isempty;

  // construction
  public SchemaDecimal() {
    value = BigDecimal.valueOf( 0 );
    isempty = true;
  }

  public SchemaDecimal(SchemaDecimal newvalue ) {
    value = newvalue.value;
    isempty = newvalue.isempty;
  }

  public SchemaDecimal(BigDecimal newvalue) {
    setValue(newvalue);
  }

  public SchemaDecimal(double newvalue) {
    setValue( newvalue );
  }

  public SchemaDecimal(String newvalue) {
    parse(newvalue);
  }

  public SchemaDecimal(SchemaType newvalue) {
    assign( newvalue );
  }

  public SchemaDecimal(SchemaTypeNumber newvalue) {
    assign( (SchemaType)newvalue );
  }

  // setValue, getValue
  public BigDecimal getValue() {
    return value;
  }

  public void setValue(BigDecimal newvalue) {
    if( newvalue == null ) {
      value = new BigDecimal(0);
      isempty = true;
      return;
    }
    value = newvalue;
    isempty = false;
  }

  public void setValue(double newvalue) {
    value = new BigDecimal(newvalue);
    isempty = false;
  }

  public void parse(String newvalue) {
    if( newvalue == null  ||  newvalue == "" ) {
      value = new BigDecimal(0);
      isempty = true;
      return;
	}
    try {
      value = new BigDecimal(newvalue);
    }
    catch (NumberFormatException e) {
      throw new StringParseException(e);
    }
  }

  public void assign(SchemaType newvalue) {
    if( newvalue == null || newvalue.isEmpty() ) {
      value = new BigDecimal(0);
      isempty = true;
      return;
    }
    if(newvalue instanceof SchemaTypeNumber) {
      value = ((SchemaTypeNumber)newvalue).bigDecimalValue();
      isempty = false;
    }
    else
      throw new TypesIncompatibleException( newvalue, this );
  }

  // further
  public int hashCode() {
    return value.hashCode();
  }

  public boolean equals(Object obj) {
    if (! (obj instanceof SchemaDecimal))
      return false;
    if (value.compareTo( ( (SchemaDecimal) obj).value) == 0)
      return true;
    return false;
  }

  public Object clone() {
    return new SchemaDecimal(value.toString());
  }

  public String toString() {
    if( isempty )
      return "";
    String result = value.toString();
    if( result.length() > 2 ) {
		// remove trailing "0"s after comma
		int n = result.length()-1;
		while( n > 0  &&  result.substring( n , n+1 ).equals( "0" ) )
			n--;
		if( result.substring( n, n+1 ).equals( "." ) )
			return result.substring( 0, n );
	}
    return result;
  }

  public int length() {
    return toString().length();
  }

  public boolean booleanValue() {
    return value.compareTo(new BigDecimal(0)) != 0;
  }

  public boolean isEmpty() {
    return isempty;
  }

  public int compareTo(Object obj) {
    return compareTo( (SchemaDecimal) obj);
  }

  public int compareTo(SchemaDecimal obj) {
    return value.compareTo(obj.value);
  }

  public void reduceScale() {
    if( value.scale() <= 0 )
      return;
    String sScaled = value.toString();
    int nPos = sScaled.length()-1;
    int nReduceScale = 0;
    while( nPos >= 0  &&  sScaled.substring(nPos, nPos+1).equals("0") ) {
      nPos--;
      nReduceScale++;
    }
    value = value.setScale( value.scale() - nReduceScale );
  }

  // interface SchemaTypeNumber
  public int numericType() {
    return NUMERIC_VALUE_BIGDECIMAL;
  }

  public int intValue() {
    return value.intValue();
  }

  public long longValue() {
    return value.longValue();
  }

  public BigInteger bigIntegerValue() {
    return value.toBigInteger();
  }

  public float floatValue() {
    return value.floatValue();
  }

  public double doubleValue() {
    return value.doubleValue();
  }

  public BigDecimal bigDecimalValue() {
    return value;
  }
}
