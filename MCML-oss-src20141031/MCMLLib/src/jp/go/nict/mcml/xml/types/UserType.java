/**
 * UserType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class UserType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public UserType() {
		super();
	}

	public UserType(UserType node) {
		super(node);
	}

	public UserType(org.w3c.dom.Node node) {
		super(node);
	}

	public UserType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "Transmitter");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Transmitter", i);
			internalAdjustPrefix(tmpNode, true);
			new TransmitterType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Receiver");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Receiver", i);
			internalAdjustPrefix(tmpNode, true);
			new ReceiverType(tmpNode).adjustPrefix();
		}
	}

	public int getTransmitterMinCount() {
		return 1;
	}

	public int getTransmitterMaxCount() {
		return 1;
	}

	public int getTransmitterCount() {
		return getDomChildCount(Element, null, "Transmitter");
	}

	public boolean hasTransmitter() {
		return hasDomChild(Element, null, "Transmitter");
	}

	public TransmitterType getTransmitterAt(int index) throws Exception {
		return new TransmitterType(getDomChildAt(Element, null, "Transmitter", index));
	}

	public TransmitterType getTransmitter() throws Exception {
		return getTransmitterAt(0);
	}

	public void removeTransmitterAt(int index) {
		removeDomChildAt(Element, null, "Transmitter", index);
	}

	public void removeTransmitter() {
		while (hasTransmitter())
			removeTransmitterAt(0);
	}

	public void addTransmitter(TransmitterType value) {
		appendDomElement(null, "Transmitter", value);
	}

	public void insertTransmitterAt(TransmitterType value, int index) {
		insertDomElementAt(null, "Transmitter", index, value);
	}

	public void replaceTransmitterAt(TransmitterType value, int index) {
		replaceDomElementAt(null, "Transmitter", index, value);
	}

	public int getReceiverMinCount() {
		return 1;
	}

	public int getReceiverMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getReceiverCount() {
		return getDomChildCount(Element, null, "Receiver");
	}

	public boolean hasReceiver() {
		return hasDomChild(Element, null, "Receiver");
	}

	public ReceiverType getReceiverAt(int index) throws Exception {
		return new ReceiverType(getDomChildAt(Element, null, "Receiver", index));
	}

	public ReceiverType getReceiver() throws Exception {
		return getReceiverAt(0);
	}

	public void removeReceiverAt(int index) {
		removeDomChildAt(Element, null, "Receiver", index);
	}

	public void removeReceiver() {
		while (hasReceiver())
			removeReceiverAt(0);
	}

	public void addReceiver(ReceiverType value) {
		appendDomElement(null, "Receiver", value);
	}

	public void insertReceiverAt(ReceiverType value, int index) {
		insertDomElementAt(null, "Receiver", index, value);
	}

	public void replaceReceiverAt(ReceiverType value, int index) {
		replaceDomElementAt(null, "Receiver", index, value);
	}
}
