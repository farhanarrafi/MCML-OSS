/**
 * DataType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class DataType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public DataType() {
		super();
	}

	public DataType(DataType node) {
		super(node);
	}

	public DataType(org.w3c.dom.Node node) {
		super(node);
	}

	public DataType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "Text");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Text", i);
			internalAdjustPrefix(tmpNode, true);
			new TextType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Audio");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Audio", i);
			internalAdjustPrefix(tmpNode, true);
			new AudioType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Image");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Image", i);
			internalAdjustPrefix(tmpNode, true);
			new ImageType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Video");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Video", i);
			internalAdjustPrefix(tmpNode, true);
			new VideoType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "URL");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "URL", i);
			internalAdjustPrefix(tmpNode, true);
			new URLType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "HTML");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "HTML", i);
			internalAdjustPrefix(tmpNode, true);
			new HTMLType(tmpNode).adjustPrefix();
		}
	}

	public int getTextMinCount() {
		return 0;
	}

	public int getTextMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getTextCount() {
		return getDomChildCount(Element, null, "Text");
	}

	public boolean hasText() {
		return hasDomChild(Element, null, "Text");
	}

	public TextType getTextAt(int index) throws Exception {
		return new TextType(getDomChildAt(Element, null, "Text", index));
	}

	public TextType getText() throws Exception {
		return getTextAt(0);
	}

	public void removeTextAt(int index) {
		removeDomChildAt(Element, null, "Text", index);
	}

	public void removeText() {
		while (hasText())
			removeTextAt(0);
	}

	public void addText(TextType value) {
		appendDomElement(null, "Text", value);
	}

	public void insertTextAt(TextType value, int index) {
		insertDomElementAt(null, "Text", index, value);
	}

	public void replaceTextAt(TextType value, int index) {
		replaceDomElementAt(null, "Text", index, value);
	}

	public int getAudioMinCount() {
		return 0;
	}

	public int getAudioMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getAudioCount() {
		return getDomChildCount(Element, null, "Audio");
	}

	public boolean hasAudio() {
		return hasDomChild(Element, null, "Audio");
	}

	public AudioType getAudioAt(int index) throws Exception {
		return new AudioType(getDomChildAt(Element, null, "Audio", index));
	}

	public AudioType getAudio() throws Exception {
		return getAudioAt(0);
	}

	public void removeAudioAt(int index) {
		removeDomChildAt(Element, null, "Audio", index);
	}

	public void removeAudio() {
		while (hasAudio())
			removeAudioAt(0);
	}

	public void addAudio(AudioType value) {
		appendDomElement(null, "Audio", value);
	}

	public void insertAudioAt(AudioType value, int index) {
		insertDomElementAt(null, "Audio", index, value);
	}

	public void replaceAudioAt(AudioType value, int index) {
		replaceDomElementAt(null, "Audio", index, value);
	}

	public int getImageMinCount() {
		return 0;
	}

	public int getImageMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getImageCount() {
		return getDomChildCount(Element, null, "Image");
	}

	public boolean hasImage() {
		return hasDomChild(Element, null, "Image");
	}

	public ImageType getImageAt(int index) throws Exception {
		return new ImageType(getDomChildAt(Element, null, "Image", index));
	}

	public ImageType getImage() throws Exception {
		return getImageAt(0);
	}

	public void removeImageAt(int index) {
		removeDomChildAt(Element, null, "Image", index);
	}

	public void removeImage() {
		while (hasImage())
			removeImageAt(0);
	}

	public void addImage(ImageType value) {
		appendDomElement(null, "Image", value);
	}

	public void insertImageAt(ImageType value, int index) {
		insertDomElementAt(null, "Image", index, value);
	}

	public void replaceImageAt(ImageType value, int index) {
		replaceDomElementAt(null, "Image", index, value);
	}

	public int getVideoMinCount() {
		return 0;
	}

	public int getVideoMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getVideoCount() {
		return getDomChildCount(Element, null, "Video");
	}

	public boolean hasVideo() {
		return hasDomChild(Element, null, "Video");
	}

	public VideoType getVideoAt(int index) throws Exception {
		return new VideoType(getDomChildAt(Element, null, "Video", index));
	}

	public VideoType getVideo() throws Exception {
		return getVideoAt(0);
	}

	public void removeVideoAt(int index) {
		removeDomChildAt(Element, null, "Video", index);
	}

	public void removeVideo() {
		while (hasVideo())
			removeVideoAt(0);
	}

	public void addVideo(VideoType value) {
		appendDomElement(null, "Video", value);
	}

	public void insertVideoAt(VideoType value, int index) {
		insertDomElementAt(null, "Video", index, value);
	}

	public void replaceVideoAt(VideoType value, int index) {
		replaceDomElementAt(null, "Video", index, value);
	}

	public int getURLMinCount() {
		return 0;
	}

	public int getURLMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getURLCount() {
		return getDomChildCount(Element, null, "URL");
	}

	public boolean hasURL() {
		return hasDomChild(Element, null, "URL");
	}

	public URLType getURLAt(int index) throws Exception {
		return new URLType(getDomChildAt(Element, null, "URL", index));
	}

	public URLType getURL() throws Exception {
		return getURLAt(0);
	}

	public void removeURLAt(int index) {
		removeDomChildAt(Element, null, "URL", index);
	}

	public void removeURL() {
		while (hasURL())
			removeURLAt(0);
	}

	public void addURL(URLType value) {
		appendDomElement(null, "URL", value);
	}

	public void insertURLAt(URLType value, int index) {
		insertDomElementAt(null, "URL", index, value);
	}

	public void replaceURLAt(URLType value, int index) {
		replaceDomElementAt(null, "URL", index, value);
	}

	public int getHTMLMinCount() {
		return 0;
	}

	public int getHTMLMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getHTMLCount() {
		return getDomChildCount(Element, null, "HTML");
	}

	public boolean hasHTML() {
		return hasDomChild(Element, null, "HTML");
	}

	public HTMLType getHTMLAt(int index) throws Exception {
		return new HTMLType(getDomChildAt(Element, null, "HTML", index));
	}

	public HTMLType getHTML() throws Exception {
		return getHTMLAt(0);
	}

	public void removeHTMLAt(int index) {
		removeDomChildAt(Element, null, "HTML", index);
	}

	public void removeHTML() {
		while (hasHTML())
			removeHTMLAt(0);
	}

	public void addHTML(HTMLType value) {
		appendDomElement(null, "HTML", value);
	}

	public void insertHTMLAt(HTMLType value, int index) {
		insertDomElementAt(null, "HTML", index, value);
	}

	public void replaceHTMLAt(HTMLType value, int index) {
		replaceDomElementAt(null, "HTML", index, value);
	}
}
