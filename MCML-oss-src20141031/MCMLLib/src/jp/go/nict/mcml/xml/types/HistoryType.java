/**
 * HistoryType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class HistoryType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public HistoryType() {
		super();
	}

	public HistoryType(HistoryType node) {
		super(node);
	}

	public HistoryType(org.w3c.dom.Node node) {
		super(node);
	}

	public HistoryType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "Service");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Service", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "ProcessOrder");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ProcessOrder", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "Request");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Request", i);
			internalAdjustPrefix(tmpNode, true);
			new RequestType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Response");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Response", i);
			internalAdjustPrefix(tmpNode, true);
			new ResponseType(tmpNode).adjustPrefix();
		}
	}

	public int getServiceMinCount() {
		return 1;
	}

	public int getServiceMaxCount() {
		return 1;
	}

	public int getServiceCount() {
		return getDomChildCount(Attribute, null, "Service");
	}

	public boolean hasService() {
		return hasDomChild(Attribute, null, "Service");
	}

	public SchemaString getServiceAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Service", index)));
	}

	public SchemaString getService() throws Exception {
		return getServiceAt(0);
	}

	public void removeServiceAt(int index) {
		removeDomChildAt(Attribute, null, "Service", index);
	}

	public void removeService() {
		while (hasService())
			removeServiceAt(0);
	}

	public void addService(SchemaString value) {
		appendDomChild(Attribute, null, "Service", value.toString());
	}

	public void addService(String value) throws Exception {
		addService(new SchemaString(value));
	}

	public void insertServiceAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Service", index, value.toString());
	}

	public void insertServiceAt(String value, int index) throws Exception {
		insertServiceAt(new SchemaString(value), index);
	}

	public void replaceServiceAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Service", index, value.toString());
	}

	public void replaceServiceAt(String value, int index) throws Exception {
		replaceServiceAt(new SchemaString(value), index);
	}

	public int getProcessOrderMinCount() {
		return 1;
	}

	public int getProcessOrderMaxCount() {
		return 1;
	}

	public int getProcessOrderCount() {
		return getDomChildCount(Attribute, null, "ProcessOrder");
	}

	public boolean hasProcessOrder() {
		return hasDomChild(Attribute, null, "ProcessOrder");
	}

	public SchemaInt getProcessOrderAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "ProcessOrder", index)));
	}

	public SchemaInt getProcessOrder() throws Exception {
		return getProcessOrderAt(0);
	}

	public void removeProcessOrderAt(int index) {
		removeDomChildAt(Attribute, null, "ProcessOrder", index);
	}

	public void removeProcessOrder() {
		while (hasProcessOrder())
			removeProcessOrderAt(0);
	}

	public void addProcessOrder(SchemaInt value) {
		appendDomChild(Attribute, null, "ProcessOrder", value.toString());
	}

	public void addProcessOrder(String value) throws Exception {
		addProcessOrder(new SchemaInt(value));
	}

	public void insertProcessOrderAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "ProcessOrder", index, value.toString());
	}

	public void insertProcessOrderAt(String value, int index) throws Exception {
		insertProcessOrderAt(new SchemaInt(value), index);
	}

	public void replaceProcessOrderAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "ProcessOrder", index, value.toString());
	}

	public void replaceProcessOrderAt(String value, int index) throws Exception {
		replaceProcessOrderAt(new SchemaInt(value), index);
	}

	public int getRequestMinCount() {
		return 1;
	}

	public int getRequestMaxCount() {
		return 1;
	}

	public int getRequestCount() {
		return getDomChildCount(Element, null, "Request");
	}

	public boolean hasRequest() {
		return hasDomChild(Element, null, "Request");
	}

	public RequestType getRequestAt(int index) throws Exception {
		return new RequestType(getDomChildAt(Element, null, "Request", index));
	}

	public RequestType getRequest() throws Exception {
		return getRequestAt(0);
	}

	public void removeRequestAt(int index) {
		removeDomChildAt(Element, null, "Request", index);
	}

	public void removeRequest() {
		while (hasRequest())
			removeRequestAt(0);
	}

	public void addRequest(RequestType value) {
		appendDomElement(null, "Request", value);
	}

	public void insertRequestAt(RequestType value, int index) {
		insertDomElementAt(null, "Request", index, value);
	}

	public void replaceRequestAt(RequestType value, int index) {
		replaceDomElementAt(null, "Request", index, value);
	}

	public int getResponseMinCount() {
		return 1;
	}

	public int getResponseMaxCount() {
		return 1;
	}

	public int getResponseCount() {
		return getDomChildCount(Element, null, "Response");
	}

	public boolean hasResponse() {
		return hasDomChild(Element, null, "Response");
	}

	public ResponseType getResponseAt(int index) throws Exception {
		return new ResponseType(getDomChildAt(Element, null, "Response", index));
	}

	public ResponseType getResponse() throws Exception {
		return getResponseAt(0);
	}

	public void removeResponseAt(int index) {
		removeDomChildAt(Element, null, "Response", index);
	}

	public void removeResponse() {
		while (hasResponse())
			removeResponseAt(0);
	}

	public void addResponse(ResponseType value) {
		appendDomElement(null, "Response", value);
	}

	public void insertResponseAt(ResponseType value, int index) {
		insertDomElementAt(null, "Response", index, value);
	}

	public void replaceResponseAt(ResponseType value, int index) {
		replaceDomElementAt(null, "Response", index, value);
	}
}
