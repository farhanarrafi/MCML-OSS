/**
 * MCMLType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class MCMLType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public MCMLType() {
		super();
	}

	public MCMLType(MCMLType node) {
		super(node);
	}

	public MCMLType(org.w3c.dom.Node node) {
		super(node);
	}

	public MCMLType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "Version");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Version", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "User");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "User", i);
			internalAdjustPrefix(tmpNode, true);
			new UserType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Server");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Server", i);
			internalAdjustPrefix(tmpNode, true);
			new ServerType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "History");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "History", i);
			internalAdjustPrefix(tmpNode, true);
			new HistoryType(tmpNode).adjustPrefix();
		}
	}

	public int getVersionMinCount() {
		return 1;
	}

	public int getVersionMaxCount() {
		return 1;
	}

	public int getVersionCount() {
		return getDomChildCount(Attribute, null, "Version");
	}

	public boolean hasVersion() {
		return hasDomChild(Attribute, null, "Version");
	}

	public SchemaString getVersionAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Version", index)));
	}

	public SchemaString getVersion() throws Exception {
		return getVersionAt(0);
	}

	public void removeVersionAt(int index) {
		removeDomChildAt(Attribute, null, "Version", index);
	}

	public void removeVersion() {
		while (hasVersion())
			removeVersionAt(0);
	}

	public void addVersion(SchemaString value) {
		appendDomChild(Attribute, null, "Version", value.toString());
	}

	public void addVersion(String value) throws Exception {
		addVersion(new SchemaString(value));
	}

	public void insertVersionAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Version", index, value.toString());
	}

	public void insertVersionAt(String value, int index) throws Exception {
		insertVersionAt(new SchemaString(value), index);
	}

	public void replaceVersionAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Version", index, value.toString());
	}

	public void replaceVersionAt(String value, int index) throws Exception {
		replaceVersionAt(new SchemaString(value), index);
	}

	public int getUserMinCount() {
		return 1;
	}

	public int getUserMaxCount() {
		return 1;
	}

	public int getUserCount() {
		return getDomChildCount(Element, null, "User");
	}

	public boolean hasUser() {
		return hasDomChild(Element, null, "User");
	}

	public UserType getUserAt(int index) throws Exception {
		return new UserType(getDomChildAt(Element, null, "User", index));
	}

	public UserType getUser() throws Exception {
		return getUserAt(0);
	}

	public void removeUserAt(int index) {
		removeDomChildAt(Element, null, "User", index);
	}

	public void removeUser() {
		while (hasUser())
			removeUserAt(0);
	}

	public void addUser(UserType value) {
		appendDomElement(null, "User", value);
	}

	public void insertUserAt(UserType value, int index) {
		insertDomElementAt(null, "User", index, value);
	}

	public void replaceUserAt(UserType value, int index) {
		replaceDomElementAt(null, "User", index, value);
	}

	public int getServerMinCount() {
		return 1;
	}

	public int getServerMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getServerCount() {
		return getDomChildCount(Element, null, "Server");
	}

	public boolean hasServer() {
		return hasDomChild(Element, null, "Server");
	}

	public ServerType getServerAt(int index) throws Exception {
		return new ServerType(getDomChildAt(Element, null, "Server", index));
	}

	public ServerType getServer() throws Exception {
		return getServerAt(0);
	}

	public void removeServerAt(int index) {
		removeDomChildAt(Element, null, "Server", index);
	}

	public void removeServer() {
		while (hasServer())
			removeServerAt(0);
	}

	public void addServer(ServerType value) {
		appendDomElement(null, "Server", value);
	}

	public void insertServerAt(ServerType value, int index) {
		insertDomElementAt(null, "Server", index, value);
	}

	public void replaceServerAt(ServerType value, int index) {
		replaceDomElementAt(null, "Server", index, value);
	}

	public int getHistoryMinCount() {
		return 0;
	}

	public int getHistoryMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getHistoryCount() {
		return getDomChildCount(Element, null, "History");
	}

	public boolean hasHistory() {
		return hasDomChild(Element, null, "History");
	}

	public HistoryType getHistoryAt(int index) throws Exception {
		return new HistoryType(getDomChildAt(Element, null, "History", index));
	}

	public HistoryType getHistory() throws Exception {
		return getHistoryAt(0);
	}

	public void removeHistoryAt(int index) {
		removeDomChildAt(Element, null, "History", index);
	}

	public void removeHistory() {
		while (hasHistory())
			removeHistoryAt(0);
	}

	public void addHistory(HistoryType value) {
		appendDomElement(null, "History", value);
	}

	public void insertHistoryAt(HistoryType value, int index) {
		insertDomElementAt(null, "History", index, value);
	}

	public void replaceHistoryAt(HistoryType value, int index) {
		replaceDomElementAt(null, "History", index, value);
	}
}
