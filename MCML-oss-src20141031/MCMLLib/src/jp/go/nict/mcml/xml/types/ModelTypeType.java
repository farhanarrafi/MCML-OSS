/**
 * ModelTypeType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class ModelTypeType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public ModelTypeType() {
		super();
	}

	public ModelTypeType(ModelTypeType node) {
		super(node);
	}

	public ModelTypeType(org.w3c.dom.Node node) {
		super(node);
	}

	public ModelTypeType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "Domain");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Domain", i);
			internalAdjustPrefix(tmpNode, true);
		}
		count = getDomChildCount(Element, null, "Task");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Task", i);
			internalAdjustPrefix(tmpNode, true);
		}
		count = getDomChildCount(Element, null, "Personality");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Personality", i);
			internalAdjustPrefix(tmpNode, true);
			new PersonalityType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Language");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Language", i);
			internalAdjustPrefix(tmpNode, true);
			new LanguageType(tmpNode).adjustPrefix();
		}
	}

	public int getDomainMinCount() {
		return 0;
	}

	public int getDomainMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getDomainCount() {
		return getDomChildCount(Element, null, "Domain");
	}

	public boolean hasDomain() {
		return hasDomChild(Element, null, "Domain");
	}

	public SchemaString getDomainAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Element, null, "Domain", index)));
	}

	public SchemaString getDomain() throws Exception {
		return getDomainAt(0);
	}

	public void removeDomainAt(int index) {
		removeDomChildAt(Element, null, "Domain", index);
	}

	public void removeDomain() {
		while (hasDomain())
			removeDomainAt(0);
	}

	public void addDomain(SchemaString value) {
		appendDomChild(Element, null, "Domain", value.toString());
	}

	public void addDomain(String value) throws Exception {
		addDomain(new SchemaString(value));
	}

	public void insertDomainAt(SchemaString value, int index) {
		insertDomChildAt(Element, null, "Domain", index, value.toString());
	}

	public void insertDomainAt(String value, int index) throws Exception {
		insertDomainAt(new SchemaString(value), index);
	}

	public void replaceDomainAt(SchemaString value, int index) {
		replaceDomChildAt(Element, null, "Domain", index, value.toString());
	}

	public void replaceDomainAt(String value, int index) throws Exception {
		replaceDomainAt(new SchemaString(value), index);
	}

	public int getTaskMinCount() {
		return 0;
	}

	public int getTaskMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getTaskCount() {
		return getDomChildCount(Element, null, "Task");
	}

	public boolean hasTask() {
		return hasDomChild(Element, null, "Task");
	}

	public SchemaString getTaskAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Element, null, "Task", index)));
	}

	public SchemaString getTask() throws Exception {
		return getTaskAt(0);
	}

	public void removeTaskAt(int index) {
		removeDomChildAt(Element, null, "Task", index);
	}

	public void removeTask() {
		while (hasTask())
			removeTaskAt(0);
	}

	public void addTask(SchemaString value) {
		appendDomChild(Element, null, "Task", value.toString());
	}

	public void addTask(String value) throws Exception {
		addTask(new SchemaString(value));
	}

	public void insertTaskAt(SchemaString value, int index) {
		insertDomChildAt(Element, null, "Task", index, value.toString());
	}

	public void insertTaskAt(String value, int index) throws Exception {
		insertTaskAt(new SchemaString(value), index);
	}

	public void replaceTaskAt(SchemaString value, int index) {
		replaceDomChildAt(Element, null, "Task", index, value.toString());
	}

	public void replaceTaskAt(String value, int index) throws Exception {
		replaceTaskAt(new SchemaString(value), index);
	}

	public int getPersonalityMinCount() {
		return 0;
	}

	public int getPersonalityMaxCount() {
		return 1;
	}

	public int getPersonalityCount() {
		return getDomChildCount(Element, null, "Personality");
	}

	public boolean hasPersonality() {
		return hasDomChild(Element, null, "Personality");
	}

	public PersonalityType getPersonalityAt(int index) throws Exception {
		return new PersonalityType(getDomChildAt(Element, null, "Personality", index));
	}

	public PersonalityType getPersonality() throws Exception {
		return getPersonalityAt(0);
	}

	public void removePersonalityAt(int index) {
		removeDomChildAt(Element, null, "Personality", index);
	}

	public void removePersonality() {
		while (hasPersonality())
			removePersonalityAt(0);
	}

	public void addPersonality(PersonalityType value) {
		appendDomElement(null, "Personality", value);
	}

	public void insertPersonalityAt(PersonalityType value, int index) {
		insertDomElementAt(null, "Personality", index, value);
	}

	public void replacePersonalityAt(PersonalityType value, int index) {
		replaceDomElementAt(null, "Personality", index, value);
	}

	public int getLanguageMinCount() {
		return 1;
	}

	public int getLanguageMaxCount() {
		return 1;
	}

	public int getLanguageCount() {
		return getDomChildCount(Element, null, "Language");
	}

	public boolean hasLanguage() {
		return hasDomChild(Element, null, "Language");
	}

	public LanguageType getLanguageAt(int index) throws Exception {
		return new LanguageType(getDomChildAt(Element, null, "Language", index));
	}

	public LanguageType getLanguage() throws Exception {
		return getLanguageAt(0);
	}

	public void removeLanguageAt(int index) {
		removeDomChildAt(Element, null, "Language", index);
	}

	public void removeLanguage() {
		while (hasLanguage())
			removeLanguageAt(0);
	}

	public void addLanguage(LanguageType value) {
		appendDomElement(null, "Language", value);
	}

	public void insertLanguageAt(LanguageType value, int index) {
		insertDomElementAt(null, "Language", index, value);
	}

	public void replaceLanguageAt(LanguageType value, int index) {
		replaceDomElementAt(null, "Language", index, value);
	}
}
