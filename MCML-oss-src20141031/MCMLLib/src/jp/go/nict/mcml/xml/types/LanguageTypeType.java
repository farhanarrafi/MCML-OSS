/**
 * LanguageTypeType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class LanguageTypeType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public LanguageTypeType() {
		super();
	}

	public LanguageTypeType(LanguageTypeType node) {
		super(node);
	}

	public LanguageTypeType(org.w3c.dom.Node node) {
		super(node);
	}

	public LanguageTypeType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "ID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Dialect");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Dialect", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getIDMinCount() {
		return 1;
	}

	public int getIDMaxCount() {
		return 1;
	}

	public int getIDCount() {
		return getDomChildCount(Attribute, null, "ID");
	}

	public boolean hasID() {
		return hasDomChild(Attribute, null, "ID");
	}

	public SchemaString getIDAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "ID", index)));
	}

	public SchemaString getID() throws Exception {
		return getIDAt(0);
	}

	public void removeIDAt(int index) {
		removeDomChildAt(Attribute, null, "ID", index);
	}

	public void removeID() {
		while (hasID())
			removeIDAt(0);
	}

	public void addID(SchemaString value) {
		appendDomChild(Attribute, null, "ID", value.toString());
	}

	public void addID(String value) throws Exception {
		addID(new SchemaString(value));
	}

	public void insertIDAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "ID", index, value.toString());
	}

	public void insertIDAt(String value, int index) throws Exception {
		insertIDAt(new SchemaString(value), index);
	}

	public void replaceIDAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "ID", index, value.toString());
	}

	public void replaceIDAt(String value, int index) throws Exception {
		replaceIDAt(new SchemaString(value), index);
	}

	public int getDialectMinCount() {
		return 0;
	}

	public int getDialectMaxCount() {
		return 1;
	}

	public int getDialectCount() {
		return getDomChildCount(Attribute, null, "Dialect");
	}

	public boolean hasDialect() {
		return hasDomChild(Attribute, null, "Dialect");
	}

	public SchemaString getDialectAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Dialect", index)));
	}

	public SchemaString getDialect() throws Exception {
		return getDialectAt(0);
	}

	public void removeDialectAt(int index) {
		removeDomChildAt(Attribute, null, "Dialect", index);
	}

	public void removeDialect() {
		while (hasDialect())
			removeDialectAt(0);
	}

	public void addDialect(SchemaString value) {
		appendDomChild(Attribute, null, "Dialect", value.toString());
	}

	public void addDialect(String value) throws Exception {
		addDialect(new SchemaString(value));
	}

	public void insertDialectAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Dialect", index, value.toString());
	}

	public void insertDialectAt(String value, int index) throws Exception {
		insertDialectAt(new SchemaString(value), index);
	}

	public void replaceDialectAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Dialect", index, value.toString());
	}

	public void replaceDialectAt(String value, int index) throws Exception {
		replaceDialectAt(new SchemaString(value), index);
	}
}
