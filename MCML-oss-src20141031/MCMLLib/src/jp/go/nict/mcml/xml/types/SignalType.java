/**
 * SignalType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class SignalType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public SignalType() {
		super();
	}

	public SignalType(SignalType node) {
		super(node);
	}

	public SignalType(org.w3c.dom.Node node) {
		super(node);
	}

	public SignalType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "AudioFormat");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "AudioFormat", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "SamplingRate");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "SamplingRate", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "BitRate");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "BitRate", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Endian");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Endian", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "ChannelQty");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ChannelQty", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "ValueType");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ValueType", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getAudioFormatMinCount() {
		return 1;
	}

	public int getAudioFormatMaxCount() {
		return 1;
	}

	public int getAudioFormatCount() {
		return getDomChildCount(Attribute, null, "AudioFormat");
	}

	public boolean hasAudioFormat() {
		return hasDomChild(Attribute, null, "AudioFormat");
	}

	public SchemaString getAudioFormatAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "AudioFormat", index)));
	}

	public SchemaString getAudioFormat() throws Exception {
		return getAudioFormatAt(0);
	}

	public void removeAudioFormatAt(int index) {
		removeDomChildAt(Attribute, null, "AudioFormat", index);
	}

	public void removeAudioFormat() {
		while (hasAudioFormat())
			removeAudioFormatAt(0);
	}

	public void addAudioFormat(SchemaString value) {
		appendDomChild(Attribute, null, "AudioFormat", value.toString());
	}

	public void addAudioFormat(String value) throws Exception {
		addAudioFormat(new SchemaString(value));
	}

	public void insertAudioFormatAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "AudioFormat", index, value.toString());
	}

	public void insertAudioFormatAt(String value, int index) throws Exception {
		insertAudioFormatAt(new SchemaString(value), index);
	}

	public void replaceAudioFormatAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "AudioFormat", index, value.toString());
	}

	public void replaceAudioFormatAt(String value, int index) throws Exception {
		replaceAudioFormatAt(new SchemaString(value), index);
	}

	public int getSamplingRateMinCount() {
		return 1;
	}

	public int getSamplingRateMaxCount() {
		return 1;
	}

	public int getSamplingRateCount() {
		return getDomChildCount(Attribute, null, "SamplingRate");
	}

	public boolean hasSamplingRate() {
		return hasDomChild(Attribute, null, "SamplingRate");
	}

	public SchemaInt getSamplingRateAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "SamplingRate", index)));
	}

	public SchemaInt getSamplingRate() throws Exception {
		return getSamplingRateAt(0);
	}

	public void removeSamplingRateAt(int index) {
		removeDomChildAt(Attribute, null, "SamplingRate", index);
	}

	public void removeSamplingRate() {
		while (hasSamplingRate())
			removeSamplingRateAt(0);
	}

	public void addSamplingRate(SchemaInt value) {
		appendDomChild(Attribute, null, "SamplingRate", value.toString());
	}

	public void addSamplingRate(String value) throws Exception {
		addSamplingRate(new SchemaInt(value));
	}

	public void insertSamplingRateAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "SamplingRate", index, value.toString());
	}

	public void insertSamplingRateAt(String value, int index) throws Exception {
		insertSamplingRateAt(new SchemaInt(value), index);
	}

	public void replaceSamplingRateAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "SamplingRate", index, value.toString());
	}

	public void replaceSamplingRateAt(String value, int index) throws Exception {
		replaceSamplingRateAt(new SchemaInt(value), index);
	}

	public int getBitRateMinCount() {
		return 1;
	}

	public int getBitRateMaxCount() {
		return 1;
	}

	public int getBitRateCount() {
		return getDomChildCount(Attribute, null, "BitRate");
	}

	public boolean hasBitRate() {
		return hasDomChild(Attribute, null, "BitRate");
	}

	public SchemaInt getBitRateAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "BitRate", index)));
	}

	public SchemaInt getBitRate() throws Exception {
		return getBitRateAt(0);
	}

	public void removeBitRateAt(int index) {
		removeDomChildAt(Attribute, null, "BitRate", index);
	}

	public void removeBitRate() {
		while (hasBitRate())
			removeBitRateAt(0);
	}

	public void addBitRate(SchemaInt value) {
		appendDomChild(Attribute, null, "BitRate", value.toString());
	}

	public void addBitRate(String value) throws Exception {
		addBitRate(new SchemaInt(value));
	}

	public void insertBitRateAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "BitRate", index, value.toString());
	}

	public void insertBitRateAt(String value, int index) throws Exception {
		insertBitRateAt(new SchemaInt(value), index);
	}

	public void replaceBitRateAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "BitRate", index, value.toString());
	}

	public void replaceBitRateAt(String value, int index) throws Exception {
		replaceBitRateAt(new SchemaInt(value), index);
	}

	public int getEndianMinCount() {
		return 1;
	}

	public int getEndianMaxCount() {
		return 1;
	}

	public int getEndianCount() {
		return getDomChildCount(Attribute, null, "Endian");
	}

	public boolean hasEndian() {
		return hasDomChild(Attribute, null, "Endian");
	}

	public SchemaString getEndianAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Endian", index)));
	}

	public SchemaString getEndian() throws Exception {
		return getEndianAt(0);
	}

	public void removeEndianAt(int index) {
		removeDomChildAt(Attribute, null, "Endian", index);
	}

	public void removeEndian() {
		while (hasEndian())
			removeEndianAt(0);
	}

	public void addEndian(SchemaString value) {
		appendDomChild(Attribute, null, "Endian", value.toString());
	}

	public void addEndian(String value) throws Exception {
		addEndian(new SchemaString(value));
	}

	public void insertEndianAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Endian", index, value.toString());
	}

	public void insertEndianAt(String value, int index) throws Exception {
		insertEndianAt(new SchemaString(value), index);
	}

	public void replaceEndianAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Endian", index, value.toString());
	}

	public void replaceEndianAt(String value, int index) throws Exception {
		replaceEndianAt(new SchemaString(value), index);
	}

	public int getChannelQtyMinCount() {
		return 1;
	}

	public int getChannelQtyMaxCount() {
		return 1;
	}

	public int getChannelQtyCount() {
		return getDomChildCount(Attribute, null, "ChannelQty");
	}

	public boolean hasChannelQty() {
		return hasDomChild(Attribute, null, "ChannelQty");
	}

	public SchemaInt getChannelQtyAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "ChannelQty", index)));
	}

	public SchemaInt getChannelQty() throws Exception {
		return getChannelQtyAt(0);
	}

	public void removeChannelQtyAt(int index) {
		removeDomChildAt(Attribute, null, "ChannelQty", index);
	}

	public void removeChannelQty() {
		while (hasChannelQty())
			removeChannelQtyAt(0);
	}

	public void addChannelQty(SchemaInt value) {
		appendDomChild(Attribute, null, "ChannelQty", value.toString());
	}

	public void addChannelQty(String value) throws Exception {
		addChannelQty(new SchemaInt(value));
	}

	public void insertChannelQtyAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "ChannelQty", index, value.toString());
	}

	public void insertChannelQtyAt(String value, int index) throws Exception {
		insertChannelQtyAt(new SchemaInt(value), index);
	}

	public void replaceChannelQtyAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "ChannelQty", index, value.toString());
	}

	public void replaceChannelQtyAt(String value, int index) throws Exception {
		replaceChannelQtyAt(new SchemaInt(value), index);
	}

	public int getValueTypeMinCount() {
		return 1;
	}

	public int getValueTypeMaxCount() {
		return 1;
	}

	public int getValueTypeCount() {
		return getDomChildCount(Attribute, null, "ValueType");
	}

	public boolean hasValueType() {
		return hasDomChild(Attribute, null, "ValueType");
	}

	public SchemaString getValueTypeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "ValueType", index)));
	}

	public SchemaString getValueType() throws Exception {
		return getValueTypeAt(0);
	}

	public void removeValueTypeAt(int index) {
		removeDomChildAt(Attribute, null, "ValueType", index);
	}

	public void removeValueType() {
		while (hasValueType())
			removeValueTypeAt(0);
	}

	public void addValueType(SchemaString value) {
		appendDomChild(Attribute, null, "ValueType", value.toString());
	}

	public void addValueType(String value) throws Exception {
		addValueType(new SchemaString(value));
	}

	public void insertValueTypeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "ValueType", index, value.toString());
	}

	public void insertValueTypeAt(String value, int index) throws Exception {
		insertValueTypeAt(new SchemaString(value), index);
	}

	public void replaceValueTypeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "ValueType", index, value.toString());
	}

	public void replaceValueTypeAt(String value, int index) throws Exception {
		replaceValueTypeAt(new SchemaString(value), index);
	}
}
