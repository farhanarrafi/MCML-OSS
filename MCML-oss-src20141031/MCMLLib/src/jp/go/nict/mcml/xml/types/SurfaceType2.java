/**
 * SurfaceType2.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class SurfaceType2 extends jp.go.nict.mcml.xml.altova.xml.Node {
	public SurfaceType2() {
		super();
	}

	public SurfaceType2(SurfaceType2 node) {
		super(node);
	}

	public SurfaceType2(org.w3c.dom.Node node) {
		super(node);
	}

	public SurfaceType2(org.w3c.dom.Document doc) {
		super(doc);
	}

	public SchemaString getValue() {
		return new SchemaString(getDomNodeValue(domNode));
	}

	public void setValue(SchemaType value) {
		setDomNodeValue(domNode, value.toString());
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "Delimiter");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Delimiter", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getDelimiterMinCount() {
		return 0;
	}

	public int getDelimiterMaxCount() {
		return 1;
	}

	public int getDelimiterCount() {
		return getDomChildCount(Attribute, null, "Delimiter");
	}

	public boolean hasDelimiter() {
		return hasDomChild(Attribute, null, "Delimiter");
	}

	public SchemaString getDelimiterAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Delimiter", index)));
	}

	public SchemaString getDelimiter() throws Exception {
		return getDelimiterAt(0);
	}

	public void removeDelimiterAt(int index) {
		removeDomChildAt(Attribute, null, "Delimiter", index);
	}

	public void removeDelimiter() {
		while (hasDelimiter())
			removeDelimiterAt(0);
	}

	public void addDelimiter(SchemaString value) {
		appendDomChild(Attribute, null, "Delimiter", value.toString());
	}

	public void addDelimiter(String value) throws Exception {
		addDelimiter(new SchemaString(value));
	}

	public void insertDelimiterAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Delimiter", index, value.toString());
	}

	public void insertDelimiterAt(String value, int index) throws Exception {
		insertDelimiterAt(new SchemaString(value), index);
	}

	public void replaceDelimiterAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Delimiter", index, value.toString());
	}

	public void replaceDelimiterAt(String value, int index) throws Exception {
		replaceDelimiterAt(new SchemaString(value), index);
	}
}
