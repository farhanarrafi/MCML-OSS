/**
 * ChunkType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class ChunkType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public ChunkType() {
		super();
	}

	public ChunkType(ChunkType node) {
		super(node);
	}

	public ChunkType(org.w3c.dom.Node node) {
		super(node);
	}

	public ChunkType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "Order");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Order", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Score");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Score", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "TimeStamp");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "TimeStamp", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "BeginTime");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "BeginTime", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "EndTime");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "EndTime", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Element, null, "Surface");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Surface", i);
			internalAdjustPrefix(tmpNode, true);
			new SurfaceType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "POS");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "POS", i);
			internalAdjustPrefix(tmpNode, true);
			new POSType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Pronunciation");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Pronunciation", i);
			internalAdjustPrefix(tmpNode, true);
			new PronunciationType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "IPA");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "IPA", i);
			internalAdjustPrefix(tmpNode, true);
			new IPAType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Accent");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Accent", i);
			internalAdjustPrefix(tmpNode, true);
			new AccentType(tmpNode).adjustPrefix();
		}
	}

	public int getOrderMinCount() {
		return 1;
	}

	public int getOrderMaxCount() {
		return 1;
	}

	public int getOrderCount() {
		return getDomChildCount(Attribute, null, "Order");
	}

	public boolean hasOrder() {
		return hasDomChild(Attribute, null, "Order");
	}

	public SchemaInt getOrderAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "Order", index)));
	}

	public SchemaInt getOrder() throws Exception {
		return getOrderAt(0);
	}

	public void removeOrderAt(int index) {
		removeDomChildAt(Attribute, null, "Order", index);
	}

	public void removeOrder() {
		while (hasOrder())
			removeOrderAt(0);
	}

	public void addOrder(SchemaInt value) {
		appendDomChild(Attribute, null, "Order", value.toString());
	}

	public void addOrder(String value) throws Exception {
		addOrder(new SchemaInt(value));
	}

	public void insertOrderAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "Order", index, value.toString());
	}

	public void insertOrderAt(String value, int index) throws Exception {
		insertOrderAt(new SchemaInt(value), index);
	}

	public void replaceOrderAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "Order", index, value.toString());
	}

	public void replaceOrderAt(String value, int index) throws Exception {
		replaceOrderAt(new SchemaInt(value), index);
	}

	public int getScoreMinCount() {
		return 0;
	}

	public int getScoreMaxCount() {
		return 1;
	}

	public int getScoreCount() {
		return getDomChildCount(Attribute, null, "Score");
	}

	public boolean hasScore() {
		return hasDomChild(Attribute, null, "Score");
	}

	public SchemaFloat getScoreAt(int index) throws Exception {
		return new SchemaFloat(getDomNodeValue(getDomChildAt(Attribute, null, "Score", index)));
	}

	public SchemaFloat getScore() throws Exception {
		return getScoreAt(0);
	}

	public void removeScoreAt(int index) {
		removeDomChildAt(Attribute, null, "Score", index);
	}

	public void removeScore() {
		while (hasScore())
			removeScoreAt(0);
	}

	public void addScore(SchemaFloat value) {
		appendDomChild(Attribute, null, "Score", value.toString());
	}

	public void addScore(String value) throws Exception {
		addScore(new SchemaFloat(value));
	}

	public void insertScoreAt(SchemaFloat value, int index) {
		insertDomChildAt(Attribute, null, "Score", index, value.toString());
	}

	public void insertScoreAt(String value, int index) throws Exception {
		insertScoreAt(new SchemaFloat(value), index);
	}

	public void replaceScoreAt(SchemaFloat value, int index) {
		replaceDomChildAt(Attribute, null, "Score", index, value.toString());
	}

	public void replaceScoreAt(String value, int index) throws Exception {
		replaceScoreAt(new SchemaFloat(value), index);
	}

	public int getTimeStampMinCount() {
		return 0;
	}

	public int getTimeStampMaxCount() {
		return 1;
	}

	public int getTimeStampCount() {
		return getDomChildCount(Attribute, null, "TimeStamp");
	}

	public boolean hasTimeStamp() {
		return hasDomChild(Attribute, null, "TimeStamp");
	}

	public SchemaDateTime getTimeStampAt(int index) throws Exception {
		return new SchemaDateTime(getDomNodeValue(getDomChildAt(Attribute, null, "TimeStamp", index)));
	}

	public SchemaDateTime getTimeStamp() throws Exception {
		return getTimeStampAt(0);
	}

	public void removeTimeStampAt(int index) {
		removeDomChildAt(Attribute, null, "TimeStamp", index);
	}

	public void removeTimeStamp() {
		while (hasTimeStamp())
			removeTimeStampAt(0);
	}

	public void addTimeStamp(SchemaDateTime value) {
		appendDomChild(Attribute, null, "TimeStamp", value.toString());
	}

	public void addTimeStamp(String value) throws Exception {
		addTimeStamp(new SchemaDateTime(value));
	}

	public void insertTimeStampAt(SchemaDateTime value, int index) {
		insertDomChildAt(Attribute, null, "TimeStamp", index, value.toString());
	}

	public void insertTimeStampAt(String value, int index) throws Exception {
		insertTimeStampAt(new SchemaDateTime(value), index);
	}

	public void replaceTimeStampAt(SchemaDateTime value, int index) {
		replaceDomChildAt(Attribute, null, "TimeStamp", index, value.toString());
	}

	public void replaceTimeStampAt(String value, int index) throws Exception {
		replaceTimeStampAt(new SchemaDateTime(value), index);
	}

	public int getBeginTimeMinCount() {
		return 0;
	}

	public int getBeginTimeMaxCount() {
		return 1;
	}

	public int getBeginTimeCount() {
		return getDomChildCount(Attribute, null, "BeginTime");
	}

	public boolean hasBeginTime() {
		return hasDomChild(Attribute, null, "BeginTime");
	}

	public SchemaInteger getBeginTimeAt(int index) throws Exception {
		return new SchemaInteger(getDomNodeValue(getDomChildAt(Attribute, null, "BeginTime", index)));
	}

	public SchemaInteger getBeginTime() throws Exception {
		return getBeginTimeAt(0);
	}

	public void removeBeginTimeAt(int index) {
		removeDomChildAt(Attribute, null, "BeginTime", index);
	}

	public void removeBeginTime() {
		while (hasBeginTime())
			removeBeginTimeAt(0);
	}

	public void addBeginTime(SchemaInteger value) {
		appendDomChild(Attribute, null, "BeginTime", value.toString());
	}

	public void addBeginTime(String value) throws Exception {
		addBeginTime(new SchemaInteger(value));
	}

	public void insertBeginTimeAt(SchemaInteger value, int index) {
		insertDomChildAt(Attribute, null, "BeginTime", index, value.toString());
	}

	public void insertBeginTimeAt(String value, int index) throws Exception {
		insertBeginTimeAt(new SchemaInteger(value), index);
	}

	public void replaceBeginTimeAt(SchemaInteger value, int index) {
		replaceDomChildAt(Attribute, null, "BeginTime", index, value.toString());
	}

	public void replaceBeginTimeAt(String value, int index) throws Exception {
		replaceBeginTimeAt(new SchemaInteger(value), index);
	}

	public int getEndTimeMinCount() {
		return 0;
	}

	public int getEndTimeMaxCount() {
		return 1;
	}

	public int getEndTimeCount() {
		return getDomChildCount(Attribute, null, "EndTime");
	}

	public boolean hasEndTime() {
		return hasDomChild(Attribute, null, "EndTime");
	}

	public SchemaInteger getEndTimeAt(int index) throws Exception {
		return new SchemaInteger(getDomNodeValue(getDomChildAt(Attribute, null, "EndTime", index)));
	}

	public SchemaInteger getEndTime() throws Exception {
		return getEndTimeAt(0);
	}

	public void removeEndTimeAt(int index) {
		removeDomChildAt(Attribute, null, "EndTime", index);
	}

	public void removeEndTime() {
		while (hasEndTime())
			removeEndTimeAt(0);
	}

	public void addEndTime(SchemaInteger value) {
		appendDomChild(Attribute, null, "EndTime", value.toString());
	}

	public void addEndTime(String value) throws Exception {
		addEndTime(new SchemaInteger(value));
	}

	public void insertEndTimeAt(SchemaInteger value, int index) {
		insertDomChildAt(Attribute, null, "EndTime", index, value.toString());
	}

	public void insertEndTimeAt(String value, int index) throws Exception {
		insertEndTimeAt(new SchemaInteger(value), index);
	}

	public void replaceEndTimeAt(SchemaInteger value, int index) {
		replaceDomChildAt(Attribute, null, "EndTime", index, value.toString());
	}

	public void replaceEndTimeAt(String value, int index) throws Exception {
		replaceEndTimeAt(new SchemaInteger(value), index);
	}

	public int getSurfaceMinCount() {
		return 1;
	}

	public int getSurfaceMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getSurfaceCount() {
		return getDomChildCount(Element, null, "Surface");
	}

	public boolean hasSurface() {
		return hasDomChild(Element, null, "Surface");
	}

	public SurfaceType getSurfaceAt(int index) throws Exception {
		return new SurfaceType(getDomChildAt(Element, null, "Surface", index));
	}

	public SurfaceType getSurface() throws Exception {
		return getSurfaceAt(0);
	}

	public void removeSurfaceAt(int index) {
		removeDomChildAt(Element, null, "Surface", index);
	}

	public void removeSurface() {
		while (hasSurface())
			removeSurfaceAt(0);
	}

	public void addSurface(SurfaceType value) {
		appendDomElement(null, "Surface", value);
	}

	public void insertSurfaceAt(SurfaceType value, int index) {
		insertDomElementAt(null, "Surface", index, value);
	}

	public void replaceSurfaceAt(SurfaceType value, int index) {
		replaceDomElementAt(null, "Surface", index, value);
	}

	public int getPOSMinCount() {
		return 0;
	}

	public int getPOSMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getPOSCount() {
		return getDomChildCount(Element, null, "POS");
	}

	public boolean hasPOS() {
		return hasDomChild(Element, null, "POS");
	}

	public POSType getPOSAt(int index) throws Exception {
		return new POSType(getDomChildAt(Element, null, "POS", index));
	}

	public POSType getPOS() throws Exception {
		return getPOSAt(0);
	}

	public void removePOSAt(int index) {
		removeDomChildAt(Element, null, "POS", index);
	}

	public void removePOS() {
		while (hasPOS())
			removePOSAt(0);
	}

	public void addPOS(POSType value) {
		appendDomElement(null, "POS", value);
	}

	public void insertPOSAt(POSType value, int index) {
		insertDomElementAt(null, "POS", index, value);
	}

	public void replacePOSAt(POSType value, int index) {
		replaceDomElementAt(null, "POS", index, value);
	}

	public int getPronunciationMinCount() {
		return 0;
	}

	public int getPronunciationMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getPronunciationCount() {
		return getDomChildCount(Element, null, "Pronunciation");
	}

	public boolean hasPronunciation() {
		return hasDomChild(Element, null, "Pronunciation");
	}

	public PronunciationType getPronunciationAt(int index) throws Exception {
		return new PronunciationType(getDomChildAt(Element, null, "Pronunciation", index));
	}

	public PronunciationType getPronunciation() throws Exception {
		return getPronunciationAt(0);
	}

	public void removePronunciationAt(int index) {
		removeDomChildAt(Element, null, "Pronunciation", index);
	}

	public void removePronunciation() {
		while (hasPronunciation())
			removePronunciationAt(0);
	}

	public void addPronunciation(PronunciationType value) {
		appendDomElement(null, "Pronunciation", value);
	}

	public void insertPronunciationAt(PronunciationType value, int index) {
		insertDomElementAt(null, "Pronunciation", index, value);
	}

	public void replacePronunciationAt(PronunciationType value, int index) {
		replaceDomElementAt(null, "Pronunciation", index, value);
	}

	public int getIPAMinCount() {
		return 0;
	}

	public int getIPAMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getIPACount() {
		return getDomChildCount(Element, null, "IPA");
	}

	public boolean hasIPA() {
		return hasDomChild(Element, null, "IPA");
	}

	public IPAType getIPAAt(int index) throws Exception {
		return new IPAType(getDomChildAt(Element, null, "IPA", index));
	}

	public IPAType getIPA() throws Exception {
		return getIPAAt(0);
	}

	public void removeIPAAt(int index) {
		removeDomChildAt(Element, null, "IPA", index);
	}

	public void removeIPA() {
		while (hasIPA())
			removeIPAAt(0);
	}

	public void addIPA(IPAType value) {
		appendDomElement(null, "IPA", value);
	}

	public void insertIPAAt(IPAType value, int index) {
		insertDomElementAt(null, "IPA", index, value);
	}

	public void replaceIPAAt(IPAType value, int index) {
		replaceDomElementAt(null, "IPA", index, value);
	}

	public int getAccentMinCount() {
		return 0;
	}

	public int getAccentMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getAccentCount() {
		return getDomChildCount(Element, null, "Accent");
	}

	public boolean hasAccent() {
		return hasDomChild(Element, null, "Accent");
	}

	public AccentType getAccentAt(int index) throws Exception {
		return new AccentType(getDomChildAt(Element, null, "Accent", index));
	}

	public AccentType getAccent() throws Exception {
		return getAccentAt(0);
	}

	public void removeAccentAt(int index) {
		removeDomChildAt(Element, null, "Accent", index);
	}

	public void removeAccent() {
		while (hasAccent())
			removeAccentAt(0);
	}

	public void addAccent(AccentType value) {
		appendDomElement(null, "Accent", value);
	}

	public void insertAccentAt(AccentType value, int index) {
		insertDomElementAt(null, "Accent", index, value);
	}

	public void replaceAccentAt(AccentType value, int index) {
		replaceDomElementAt(null, "Accent", index, value);
	}
}
