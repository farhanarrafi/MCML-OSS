/**
 * ErrorType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class ErrorType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public ErrorType() {
		super();
	}

	public ErrorType(ErrorType node) {
		super(node);
	}

	public ErrorType(org.w3c.dom.Node node) {
		super(node);
	}

	public ErrorType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "Code");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Code", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Service");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Service", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "Message");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "Message", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getCodeMinCount() {
		return 1;
	}

	public int getCodeMaxCount() {
		return 1;
	}

	public int getCodeCount() {
		return getDomChildCount(Attribute, null, "Code");
	}

	public boolean hasCode() {
		return hasDomChild(Attribute, null, "Code");
	}

	public SchemaString getCodeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Code", index)));
	}

	public SchemaString getCode() throws Exception {
		return getCodeAt(0);
	}

	public void removeCodeAt(int index) {
		removeDomChildAt(Attribute, null, "Code", index);
	}

	public void removeCode() {
		while (hasCode())
			removeCodeAt(0);
	}

	public void addCode(SchemaString value) {
		appendDomChild(Attribute, null, "Code", value.toString());
	}

	public void addCode(String value) throws Exception {
		addCode(new SchemaString(value));
	}

	public void insertCodeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Code", index, value.toString());
	}

	public void insertCodeAt(String value, int index) throws Exception {
		insertCodeAt(new SchemaString(value), index);
	}

	public void replaceCodeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Code", index, value.toString());
	}

	public void replaceCodeAt(String value, int index) throws Exception {
		replaceCodeAt(new SchemaString(value), index);
	}

	public int getServiceMinCount() {
		return 1;
	}

	public int getServiceMaxCount() {
		return 1;
	}

	public int getServiceCount() {
		return getDomChildCount(Attribute, null, "Service");
	}

	public boolean hasService() {
		return hasDomChild(Attribute, null, "Service");
	}

	public SchemaString getServiceAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Service", index)));
	}

	public SchemaString getService() throws Exception {
		return getServiceAt(0);
	}

	public void removeServiceAt(int index) {
		removeDomChildAt(Attribute, null, "Service", index);
	}

	public void removeService() {
		while (hasService())
			removeServiceAt(0);
	}

	public void addService(SchemaString value) {
		appendDomChild(Attribute, null, "Service", value.toString());
	}

	public void addService(String value) throws Exception {
		addService(new SchemaString(value));
	}

	public void insertServiceAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Service", index, value.toString());
	}

	public void insertServiceAt(String value, int index) throws Exception {
		insertServiceAt(new SchemaString(value), index);
	}

	public void replaceServiceAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Service", index, value.toString());
	}

	public void replaceServiceAt(String value, int index) throws Exception {
		replaceServiceAt(new SchemaString(value), index);
	}

	public int getMessageMinCount() {
		return 1;
	}

	public int getMessageMaxCount() {
		return 1;
	}

	public int getMessageCount() {
		return getDomChildCount(Attribute, null, "Message");
	}

	public boolean hasMessage() {
		return hasDomChild(Attribute, null, "Message");
	}

	public SchemaString getMessageAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "Message", index)));
	}

	public SchemaString getMessage() throws Exception {
		return getMessageAt(0);
	}

	public void removeMessageAt(int index) {
		removeDomChildAt(Attribute, null, "Message", index);
	}

	public void removeMessage() {
		while (hasMessage())
			removeMessageAt(0);
	}

	public void addMessage(SchemaString value) {
		appendDomChild(Attribute, null, "Message", value.toString());
	}

	public void addMessage(String value) throws Exception {
		addMessage(new SchemaString(value));
	}

	public void insertMessageAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "Message", index, value.toString());
	}

	public void insertMessageAt(String value, int index) throws Exception {
		insertMessageAt(new SchemaString(value), index);
	}

	public void replaceMessageAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "Message", index, value.toString());
	}

	public void replaceMessageAt(String value, int index) throws Exception {
		replaceMessageAt(new SchemaString(value), index);
	}
}
