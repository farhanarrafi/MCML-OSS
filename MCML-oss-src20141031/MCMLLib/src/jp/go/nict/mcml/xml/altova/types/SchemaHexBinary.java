/**
 * SchemaHexBinary.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.altova.types;


public class SchemaHexBinary extends SchemaBinaryBase {
  protected final char[] FINAL_ENCODE = 
  {
  	'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'
  };
  protected final byte[] FINAL_DECODE = 
  {
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	0,	 1,	 2,	 3,	 4,	 5,	 6,	 7,	 8,	 9,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	10,	11,	12,	13,	14,	15,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	10,	11,	12,	13,	14,	15,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,
  	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1,	-1
  };

  // construction
  public SchemaHexBinary() {
	super();
  }

  public SchemaHexBinary(SchemaHexBinary newvalue) {
	value = newvalue.value;
	isempty = newvalue.isempty;
  }

  public SchemaHexBinary(byte[] newvalue) {
	value = newvalue;
	isempty = (newvalue != null);
  }

  public SchemaHexBinary(String newvalue) {
	parse( newvalue );
  }

  public SchemaHexBinary(SchemaType newvalue) {
	assign( newvalue );
  }

  public SchemaHexBinary(SchemaTypeBinary newvalue) {
	assign( (SchemaType)newvalue );
  }

  // getValue, setValue
  public void parse(String newvalue) {
	if( newvalue == null || newvalue == "" ) {
	  isempty = true;
	  value = null;
	}
	else {
		char[] cSrc = newvalue.toCharArray();
		value = new byte[ cSrc.length >> 1 ];
		int nSrcIndex = 0;
		int nTarIndex = 0;
		while( nSrcIndex < cSrc.length )
		{
			byte c = FINAL_DECODE[ cSrc[ nSrcIndex++ ] ];
			if( c != -1 )
			{
				value[ nTarIndex >> 1 ] |= (byte)( (nTarIndex & 1) == 1 ? c : (c << 4) );
				nTarIndex++;
			}
		}
		isempty = false;
	}
  }

  // further
  public int hashCode() {
	return value.hashCode();
  }

  public boolean equals(Object obj) {
	if (! (obj instanceof SchemaHexBinary))
	  return false;
	return value == ( (SchemaHexBinary) obj).value;
  }

  public Object clone() {
	return new SchemaHexBinary( value );
  }

  public String toString() {
    if( isempty || value == null )
	  return "";
    char[] cResult = new char[ value.length << 1 ];
    for (int i = 0; i < value.length; i++) {
      cResult[ i << 1 ] = FINAL_ENCODE[ (value[i] >> 4) & 15];
      cResult[ (i << 1) + 1 ] = FINAL_ENCODE[value[i] & 15];
    }
    return new String( cResult );
  }

  // ---------- interface SchemaTypeBinary ----------
  public int binaryType() {
	  return BINARY_VALUE_HEX;
  }
}
