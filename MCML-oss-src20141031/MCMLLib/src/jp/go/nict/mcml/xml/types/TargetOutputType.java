/**
 * TargetOutputType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class TargetOutputType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public TargetOutputType() {
		super();
	}

	public TargetOutputType(TargetOutputType node) {
		super(node);
	}

	public TargetOutputType(org.w3c.dom.Node node) {
		super(node);
	}

	public TargetOutputType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "HypothesisFormat");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "HypothesisFormat", i);
			internalAdjustPrefix(tmpNode, true);
			new HypothesisFormatType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "LanguageType");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "LanguageType", i);
			internalAdjustPrefix(tmpNode, true);
			new LanguageTypeType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Option");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Option", i);
			internalAdjustPrefix(tmpNode, true);
			new OptionType(tmpNode).adjustPrefix();
		}
	}

	public int getHypothesisFormatMinCount() {
		return 0;
	}

	public int getHypothesisFormatMaxCount() {
		return 1;
	}

	public int getHypothesisFormatCount() {
		return getDomChildCount(Element, null, "HypothesisFormat");
	}

	public boolean hasHypothesisFormat() {
		return hasDomChild(Element, null, "HypothesisFormat");
	}

	public HypothesisFormatType getHypothesisFormatAt(int index) throws Exception {
		return new HypothesisFormatType(getDomChildAt(Element, null, "HypothesisFormat", index));
	}

	public HypothesisFormatType getHypothesisFormat() throws Exception {
		return getHypothesisFormatAt(0);
	}

	public void removeHypothesisFormatAt(int index) {
		removeDomChildAt(Element, null, "HypothesisFormat", index);
	}

	public void removeHypothesisFormat() {
		while (hasHypothesisFormat())
			removeHypothesisFormatAt(0);
	}

	public void addHypothesisFormat(HypothesisFormatType value) {
		appendDomElement(null, "HypothesisFormat", value);
	}

	public void insertHypothesisFormatAt(HypothesisFormatType value, int index) {
		insertDomElementAt(null, "HypothesisFormat", index, value);
	}

	public void replaceHypothesisFormatAt(HypothesisFormatType value, int index) {
		replaceDomElementAt(null, "HypothesisFormat", index, value);
	}

	public int getLanguageTypeMinCount() {
		return 0;
	}

	public int getLanguageTypeMaxCount() {
		return 1;
	}

	public int getLanguageTypeCount() {
		return getDomChildCount(Element, null, "LanguageType");
	}

	public boolean hasLanguageType() {
		return hasDomChild(Element, null, "LanguageType");
	}

	public LanguageTypeType getLanguageTypeAt(int index) throws Exception {
		return new LanguageTypeType(getDomChildAt(Element, null, "LanguageType", index));
	}

	public LanguageTypeType getLanguageType() throws Exception {
		return getLanguageTypeAt(0);
	}

	public void removeLanguageTypeAt(int index) {
		removeDomChildAt(Element, null, "LanguageType", index);
	}

	public void removeLanguageType() {
		while (hasLanguageType())
			removeLanguageTypeAt(0);
	}

	public void addLanguageType(LanguageTypeType value) {
		appendDomElement(null, "LanguageType", value);
	}

	public void insertLanguageTypeAt(LanguageTypeType value, int index) {
		insertDomElementAt(null, "LanguageType", index, value);
	}

	public void replaceLanguageTypeAt(LanguageTypeType value, int index) {
		replaceDomElementAt(null, "LanguageType", index, value);
	}

	public int getOptionMinCount() {
		return 0;
	}

	public int getOptionMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getOptionCount() {
		return getDomChildCount(Element, null, "Option");
	}

	public boolean hasOption() {
		return hasDomChild(Element, null, "Option");
	}

	public OptionType getOptionAt(int index) throws Exception {
		return new OptionType(getDomChildAt(Element, null, "Option", index));
	}

	public OptionType getOption() throws Exception {
		return getOptionAt(0);
	}

	public void removeOptionAt(int index) {
		removeDomChildAt(Element, null, "Option", index);
	}

	public void removeOption() {
		while (hasOption())
			removeOptionAt(0);
	}

	public void addOption(OptionType value) {
		appendDomElement(null, "Option", value);
	}

	public void insertOptionAt(OptionType value, int index) {
		insertDomElementAt(null, "Option", index, value);
	}

	public void replaceOptionAt(OptionType value, int index) {
		replaceDomElementAt(null, "Option", index, value);
	}
}
