/**
 * RoutingType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class RoutingType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public RoutingType() {
		super();
	}

	public RoutingType(RoutingType node) {
		super(node);
	}

	public RoutingType(org.w3c.dom.Node node) {
		super(node);
	}

	public RoutingType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "From");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "From", i);
			internalAdjustPrefix(tmpNode, true);
			new FromType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "To");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "To", i);
			internalAdjustPrefix(tmpNode, true);
			new ToType(tmpNode).adjustPrefix();
		}
	}

	public int getFromMinCount() {
		return 1;
	}

	public int getFromMaxCount() {
		return 1;
	}

	public int getFromCount() {
		return getDomChildCount(Element, null, "From");
	}

	public boolean hasFrom() {
		return hasDomChild(Element, null, "From");
	}

	public FromType getFromAt(int index) throws Exception {
		return new FromType(getDomChildAt(Element, null, "From", index));
	}

	public FromType getFrom() throws Exception {
		return getFromAt(0);
	}

	public void removeFromAt(int index) {
		removeDomChildAt(Element, null, "From", index);
	}

	public void removeFrom() {
		while (hasFrom())
			removeFromAt(0);
	}

	public void addFrom(FromType value) {
		appendDomElement(null, "From", value);
	}

	public void insertFromAt(FromType value, int index) {
		insertDomElementAt(null, "From", index, value);
	}

	public void replaceFromAt(FromType value, int index) {
		replaceDomElementAt(null, "From", index, value);
	}

	public int getToMinCount() {
		return 1;
	}

	public int getToMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getToCount() {
		return getDomChildCount(Element, null, "To");
	}

	public boolean hasTo() {
		return hasDomChild(Element, null, "To");
	}

	public ToType getToAt(int index) throws Exception {
		return new ToType(getDomChildAt(Element, null, "To", index));
	}

	public ToType getTo() throws Exception {
		return getToAt(0);
	}

	public void removeToAt(int index) {
		removeDomChildAt(Element, null, "To", index);
	}

	public void removeTo() {
		while (hasTo())
			removeToAt(0);
	}

	public void addTo(ToType value) {
		appendDomElement(null, "To", value);
	}

	public void insertToAt(ToType value, int index) {
		insertDomElementAt(null, "To", index, value);
	}

	public void replaceToAt(ToType value, int index) {
		replaceDomElementAt(null, "To", index, value);
	}
}
