/**
 * ServerType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class ServerType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public ServerType() {
		super();
	}

	public ServerType(ServerType node) {
		super(node);
	}

	public ServerType(org.w3c.dom.Node node) {
		super(node);
	}

	public ServerType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Element, null, "Request");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Request", i);
			internalAdjustPrefix(tmpNode, true);
			new RequestType(tmpNode).adjustPrefix();
		}
		count = getDomChildCount(Element, null, "Response");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Element, null, "Response", i);
			internalAdjustPrefix(tmpNode, true);
			new ResponseType(tmpNode).adjustPrefix();
		}
	}

	public int getRequestMinCount() {
		return 1;
	}

	public int getRequestMaxCount() {
		return Integer.MAX_VALUE;
	}

	public int getRequestCount() {
		return getDomChildCount(Element, null, "Request");
	}

	public boolean hasRequest() {
		return hasDomChild(Element, null, "Request");
	}

	public RequestType getRequestAt(int index) throws Exception {
		return new RequestType(getDomChildAt(Element, null, "Request", index));
	}

	public RequestType getRequest() throws Exception {
		return getRequestAt(0);
	}

	public void removeRequestAt(int index) {
		removeDomChildAt(Element, null, "Request", index);
	}

	public void removeRequest() {
		while (hasRequest())
			removeRequestAt(0);
	}

	public void addRequest(RequestType value) {
		appendDomElement(null, "Request", value);
	}

	public void insertRequestAt(RequestType value, int index) {
		insertDomElementAt(null, "Request", index, value);
	}

	public void replaceRequestAt(RequestType value, int index) {
		replaceDomElementAt(null, "Request", index, value);
	}

	public int getResponseMinCount() {
		return 1;
	}

	public int getResponseMaxCount() {
		return 1;
	}

	public int getResponseCount() {
		return getDomChildCount(Element, null, "Response");
	}

	public boolean hasResponse() {
		return hasDomChild(Element, null, "Response");
	}

	public ResponseType getResponseAt(int index) throws Exception {
		return new ResponseType(getDomChildAt(Element, null, "Response", index));
	}

	public ResponseType getResponse() throws Exception {
		return getResponseAt(0);
	}

	public void removeResponseAt(int index) {
		removeDomChildAt(Element, null, "Response", index);
	}

	public void removeResponse() {
		while (hasResponse())
			removeResponseAt(0);
	}

	public void addResponse(ResponseType value) {
		appendDomElement(null, "Response", value);
	}

	public void insertResponseAt(ResponseType value, int index) {
		insertDomElementAt(null, "Response", index, value);
	}

	public void replaceResponseAt(ResponseType value, int index) {
		replaceDomElementAt(null, "Response", index, value);
	}
}
