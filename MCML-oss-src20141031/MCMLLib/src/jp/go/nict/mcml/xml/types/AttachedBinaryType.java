/**
 * AttachedBinaryType.java
 *
 * This file was generated by XMLSPY 2004 Enterprise Edition.
 *
 * YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
 * OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
 *
 * Refer to the XMLSPY Documentation for further details.
 * http://www.altova.com/xmlspy
 */


package jp.go.nict.mcml.xml.types;

import jp.go.nict.mcml.xml.altova.types.*;

public class AttachedBinaryType extends jp.go.nict.mcml.xml.altova.xml.Node {
	public AttachedBinaryType() {
		super();
	}

	public AttachedBinaryType(AttachedBinaryType node) {
		super(node);
	}

	public AttachedBinaryType(org.w3c.dom.Node node) {
		super(node);
	}

	public AttachedBinaryType(org.w3c.dom.Document doc) {
		super(doc);
	}
	public void adjustPrefix() {
		int count;
		count = getDomChildCount(Attribute, null, "DataID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "DataID", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "DataType");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "DataType", i);
			internalAdjustPrefix(tmpNode, false);
		}
		count = getDomChildCount(Attribute, null, "ChannelID");
		for (int i = 0; i < count; i++) {
			org.w3c.dom.Node tmpNode = getDomChildAt(Attribute, null, "ChannelID", i);
			internalAdjustPrefix(tmpNode, false);
		}
	}

	public int getDataIDMinCount() {
		return 1;
	}

	public int getDataIDMaxCount() {
		return 1;
	}

	public int getDataIDCount() {
		return getDomChildCount(Attribute, null, "DataID");
	}

	public boolean hasDataID() {
		return hasDomChild(Attribute, null, "DataID");
	}

	public SchemaString getDataIDAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "DataID", index)));
	}

	public SchemaString getDataID() throws Exception {
		return getDataIDAt(0);
	}

	public void removeDataIDAt(int index) {
		removeDomChildAt(Attribute, null, "DataID", index);
	}

	public void removeDataID() {
		while (hasDataID())
			removeDataIDAt(0);
	}

	public void addDataID(SchemaString value) {
		appendDomChild(Attribute, null, "DataID", value.toString());
	}

	public void addDataID(String value) throws Exception {
		addDataID(new SchemaString(value));
	}

	public void insertDataIDAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "DataID", index, value.toString());
	}

	public void insertDataIDAt(String value, int index) throws Exception {
		insertDataIDAt(new SchemaString(value), index);
	}

	public void replaceDataIDAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "DataID", index, value.toString());
	}

	public void replaceDataIDAt(String value, int index) throws Exception {
		replaceDataIDAt(new SchemaString(value), index);
	}

	public int getDataTypeMinCount() {
		return 0;
	}

	public int getDataTypeMaxCount() {
		return 1;
	}

	public int getDataTypeCount() {
		return getDomChildCount(Attribute, null, "DataType");
	}

	public boolean hasDataType() {
		return hasDomChild(Attribute, null, "DataType");
	}

	public SchemaString getDataTypeAt(int index) throws Exception {
		return new SchemaString(getDomNodeValue(getDomChildAt(Attribute, null, "DataType", index)));
	}

	public SchemaString getDataType() throws Exception {
		return getDataTypeAt(0);
	}

	public void removeDataTypeAt(int index) {
		removeDomChildAt(Attribute, null, "DataType", index);
	}

	public void removeDataType() {
		while (hasDataType())
			removeDataTypeAt(0);
	}

	public void addDataType(SchemaString value) {
		appendDomChild(Attribute, null, "DataType", value.toString());
	}

	public void addDataType(String value) throws Exception {
		addDataType(new SchemaString(value));
	}

	public void insertDataTypeAt(SchemaString value, int index) {
		insertDomChildAt(Attribute, null, "DataType", index, value.toString());
	}

	public void insertDataTypeAt(String value, int index) throws Exception {
		insertDataTypeAt(new SchemaString(value), index);
	}

	public void replaceDataTypeAt(SchemaString value, int index) {
		replaceDomChildAt(Attribute, null, "DataType", index, value.toString());
	}

	public void replaceDataTypeAt(String value, int index) throws Exception {
		replaceDataTypeAt(new SchemaString(value), index);
	}

	public int getChannelIDMinCount() {
		return 1;
	}

	public int getChannelIDMaxCount() {
		return 1;
	}

	public int getChannelIDCount() {
		return getDomChildCount(Attribute, null, "ChannelID");
	}

	public boolean hasChannelID() {
		return hasDomChild(Attribute, null, "ChannelID");
	}

	public SchemaInt getChannelIDAt(int index) throws Exception {
		return new SchemaInt(getDomNodeValue(getDomChildAt(Attribute, null, "ChannelID", index)));
	}

	public SchemaInt getChannelID() throws Exception {
		return getChannelIDAt(0);
	}

	public void removeChannelIDAt(int index) {
		removeDomChildAt(Attribute, null, "ChannelID", index);
	}

	public void removeChannelID() {
		while (hasChannelID())
			removeChannelIDAt(0);
	}

	public void addChannelID(SchemaInt value) {
		appendDomChild(Attribute, null, "ChannelID", value.toString());
	}

	public void addChannelID(String value) throws Exception {
		addChannelID(new SchemaInt(value));
	}

	public void insertChannelIDAt(SchemaInt value, int index) {
		insertDomChildAt(Attribute, null, "ChannelID", index, value.toString());
	}

	public void insertChannelIDAt(String value, int index) throws Exception {
		insertChannelIDAt(new SchemaInt(value), index);
	}

	public void replaceChannelIDAt(SchemaInt value, int index) {
		replaceDomChildAt(Attribute, null, "ChannelID", index, value.toString());
	}

	public void replaceChannelIDAt(String value, int index) throws Exception {
		replaceChannelIDAt(new SchemaInt(value), index);
	}
}
