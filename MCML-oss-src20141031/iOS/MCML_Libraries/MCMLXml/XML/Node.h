////////////////////////////////////////////////////////////////////////
//
// Node.h
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

#ifndef MCML_NODE_H_INCLUDED
#define MCML_NODE_H_INCLUDED

#include <libxml/parser.h>

namespace mcml {


class CNode : public CBaseObject
{
public:
	typedef enum
	{
		Element,
		Attribute
	} ENodeType;

	typedef enum
	{
		eSequence,
		eAll,
		eChoice
	} EGroupType;

protected:
	CNode();
	CNode(xmlNodePtr pThisNode);
	CNode(xmlDocPtr pDOMDocument);
	virtual ~CNode();

public:
	CNode& 					Assign(const CNode& other);
	tstring					GetNodeName();
	tstring					GetNodeValue();
	xmlNodePtr				GetDOMNode();

	tstring					GetValue() { return InternalGetElementValue(); }
	void					SetValue(const tstring& sValue) { InternalSetElementValue(sValue); }

protected:
	friend class CDoc;

	static tstring			InternalGetNodeValue(ENodeType eNodeType, xmlNodePtr pNode);
	tstring					InternalGetElementValue();
	void					InternalSetElementValue(const tstring& sValue);
	static bool				InternalNamesMatch(xmlNodePtr pNode, const tstring& sNamespaceURI, const tstring& sName);

	int						ChildCountInternal(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName);
	bool					InternalHasChild(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName);
	xmlNodePtr				InternalCreate(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, const tstring& sValue);
	xmlNodePtr				InternalAppend(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, const tstring& sValue);
	xmlNodePtr				InternalAppendNode(const tstring& sNamespaceURI, const tstring& sName, CNode& rNode);
	xmlNodePtr				InternalGetAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex);
	xmlNodePtr				InternalGet(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName);
	xmlNodePtr				InternalInsertAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex, const tstring& sValue);
	xmlNodePtr				InternalInsertNodeAt(const tstring& sNamespaceURI, const tstring& sName, int nIndex, CNode& rNode);
	xmlNodePtr				InternalReplaceAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex, const tstring& sValue);
	xmlNodePtr				InternalReplaceNodeAt(const tstring& sNamespaceURI, const tstring& sName, int nIndex, CNode& rNode);
	void					InternalRemoveAt(ENodeType eNodeType, const tstring& sNamespaceURI, const tstring& sName, int nIndex);

	xmlNodePtr				m_pDOMNode;
};
} // namespace mcml


#endif // MCML_NODE_H_INCLUDED
