////////////////////////////////////////////////////////////////////////
//
// MCML.h
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#ifndef MCML_H_INCLUDED
#define MCML_H_INCLUDED

#ifndef _USRDLL
	#define MCML_DECLSPECIFIER
#else
	#ifdef MCML_EXPORTS
		#define MCML_DECLSPECIFIER __declspec(dllexport)
	#else
		#define MCML_DECLSPECIFIER __declspec(dllimport)
	#endif
#endif


#include "SchemaTypes.h"
#include "Doc.h"
#include "Node.h"

namespace mcml{

class CMCMLDoc;
/*
class CAttachedBinaryType;
class CFeatureType;
class CAudioType;
class CSurfaceType;
class CPOSType;
class CPronunciationType;
class CIPAType;
class CAccentType;
class CChunkType;
class CURLType;
class CHTMLType;
class CDataType;
class CGlobalPositionType;
class CLocationType;
class CDeviceType;
class CErrorType;
class CHistoryType;
class CImageType;
class CInputType;
class CSpeakingType;
class CWritingType;
class CSigningType;
class CInputModalityType;
class CInputUserProfileType;
class CLanguageType;
class CLanguageTypeType;
class CMCMLType;
class CPersonalityType;
class CModelTypeType;
class COutputType;
class CReceiverType;
class CRequestType;
class CResponseType;
class CFromType;
class CToType;
class CRoutingType;
class CSurfaceType2;
class CSentenceType;
class CSentenceSequenceType;
class CServerType;
class CSignalType;
class CSurfaceType3;
class CHypothesisFormatType;
class COptionType;
class CTargetOutputType;
class CTextType;
class CTransmitterType;
class CUserType;
class CUserProfileType;
class CVideoType;

*/
class CAttachedBinaryType;
class CFeatureType;
class CAudioType;
class CSurfaceType;
class CPOSType;
class CPronunciationType;
class CIPAType;
class CAccentType;
class CChunkType;
class CURLType;
class CHTMLType;
class CDataType;
class CGlobalPositionType;
class CLocationType;
class CDeviceType;
class CErrorType;
class CHistoryType;
class CImageType;
class CInputType;
class CSpeakingType;
class CWritingType;
class CSigningType;
class CInputModalityType;
class CInputUserProfileType;
class CLanguageType;
class CLanguageTypeType;
class CMCMLType;
class CPersonalityType;
class CModelTypeType;
class COutputType;
class CReceiverType;
class CRequestType;
class CResponseType;
class CFromType;
class CToType;
class CRoutingType;
class CSurfaceType2;
class CSentenceType;
class CSentenceSequenceType;
class CServerType;
class CSignalType;
class CSurfaceType3;
class CHypothesisFormatType;
class COptionType;
class CTargetOutputType;
class CTextType;
class CTransmitterType;
class CUserType;
class CUserProfileType;
class CVideoType;

class MCML_DECLSPECIFIER CMCMLDoc : public CDoc
{
public:
	CMCMLDoc()
	{
        CDoc::SetRootElementName(_T(""), _T("MCML"));
        CDoc::SetSchemaLocation(_T("MCML.xsd"));
	}
};

class MCML_DECLSPECIFIER CAttachedBinaryType : public CNode
{
public:
	CAttachedBinaryType() : CNode() {}
	CAttachedBinaryType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CAttachedBinaryType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CAttachedBinaryType() {}
	static EGroupType GetGroupType();

	//
	// string DataID (1...1)
	//
	static int GetDataIDMinCount();
	static int GetDataIDMaxCount();
	int GetDataIDCount();
	bool HasDataID();
	void AddDataID(CSchemaString DataID);
	void InsertDataIDAt(CSchemaString DataID, int nIndex);
	void ReplaceDataIDAt(CSchemaString DataID, int nIndex);
	CSchemaString GetDataIDAt(int nIndex);
	CSchemaString GetDataID();
	void RemoveDataIDAt(int nIndex);
	void RemoveDataID();

	//
	// string DataType (0...1)
	//
	static int GetDataTypeMinCount();
	static int GetDataTypeMaxCount();
	int GetDataTypeCount();
	bool HasDataType();
	void AddDataType(CSchemaString DataType);
	void InsertDataTypeAt(CSchemaString DataType, int nIndex);
	void ReplaceDataTypeAt(CSchemaString DataType, int nIndex);
	CSchemaString GetDataTypeAt(int nIndex);
	CSchemaString GetDataType();
	void RemoveDataTypeAt(int nIndex);
	void RemoveDataType();

	//
	// int ChannelID (1...1)
	//
	static int GetChannelIDMinCount();
	static int GetChannelIDMaxCount();
	int GetChannelIDCount();
	bool HasChannelID();
	void AddChannelID(CSchemaInt ChannelID);
	void InsertChannelIDAt(CSchemaInt ChannelID, int nIndex);
	void ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex);
	CSchemaInt GetChannelIDAt(int nIndex);
	CSchemaInt GetChannelID();
	void RemoveChannelIDAt(int nIndex);
	void RemoveChannelID();
};


class MCML_DECLSPECIFIER CFeatureType : public CNode
{
public:
	CFeatureType() : CNode() {}
	CFeatureType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CFeatureType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CFeatureType() {}
	static EGroupType GetGroupType();
};


class MCML_DECLSPECIFIER CAudioType : public CNode
{
public:
	CAudioType() : CNode() {}
	CAudioType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CAudioType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CAudioType() {}
	static EGroupType GetGroupType();

	//
	// int ChannelID (1...1)
	//
	static int GetChannelIDMinCount();
	static int GetChannelIDMaxCount();
	int GetChannelIDCount();
	bool HasChannelID();
	void AddChannelID(CSchemaInt ChannelID);
	void InsertChannelIDAt(CSchemaInt ChannelID, int nIndex);
	void ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex);
	CSchemaInt GetChannelIDAt(int nIndex);
	CSchemaInt GetChannelID();
	void RemoveChannelIDAt(int nIndex);
	void RemoveChannelID();

	//
	// dateTime BeginTimestamp (1...1)
	//
	static int GetBeginTimestampMinCount();
	static int GetBeginTimestampMaxCount();
	int GetBeginTimestampCount();
	bool HasBeginTimestamp();
	void AddBeginTimestamp(CSchemaDateTime BeginTimestamp);
	void InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	void ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	CSchemaDateTime GetBeginTimestampAt(int nIndex);
	CSchemaDateTime GetBeginTimestamp();
	void RemoveBeginTimestampAt(int nIndex);
	void RemoveBeginTimestamp();

	//
	// dateTime EndTimestamp (1...1)
	//
	static int GetEndTimestampMinCount();
	static int GetEndTimestampMaxCount();
	int GetEndTimestampCount();
	bool HasEndTimestamp();
	void AddEndTimestamp(CSchemaDateTime EndTimestamp);
	void InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	void ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	CSchemaDateTime GetEndTimestampAt(int nIndex);
	CSchemaDateTime GetEndTimestamp();
	void RemoveEndTimestampAt(int nIndex);
	void RemoveEndTimestamp();

	//
	// dateTime EndPoint (0...1)
	//
	static int GetEndPointMinCount();
	static int GetEndPointMaxCount();
	int GetEndPointCount();
	bool HasEndPoint();
	void AddEndPoint(CSchemaDateTime EndPoint);
	void InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	void ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	CSchemaDateTime GetEndPointAt(int nIndex);
	CSchemaDateTime GetEndPoint();
	void RemoveEndPointAt(int nIndex);
	void RemoveEndPoint();

	//
	// ModelType ModelType (0...1)
	//
	static int GetModelTypeMinCount();
	static int GetModelTypeMaxCount();
	int GetModelTypeCount();
	bool HasModelType();
	void AddModelType(CModelTypeType& ModelType);
	void InsertModelTypeAt(CModelTypeType& ModelType, int nIndex);
	void ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex);
	CModelTypeType GetModelTypeAt(int nIndex);
	CModelTypeType GetModelType();
	void RemoveModelTypeAt(int nIndex);
	void RemoveModelType();

	//
	// Signal Signal (1...unbounded)
	//
	static int GetSignalMinCount();
	static int GetSignalMaxCount();
	int GetSignalCount();
	bool HasSignal();
	void AddSignal(CSignalType& Signal);
	void InsertSignalAt(CSignalType& Signal, int nIndex);
	void ReplaceSignalAt(CSignalType& Signal, int nIndex);
	CSignalType GetSignalAt(int nIndex);
	CSignalType GetSignal();
	void RemoveSignalAt(int nIndex);
	void RemoveSignal();

	//
	// Feature Feature (0...unbounded)
	//
	static int GetFeatureMinCount();
	static int GetFeatureMaxCount();
	int GetFeatureCount();
	bool HasFeature();
	void AddFeature(CFeatureType& Feature);
	void InsertFeatureAt(CFeatureType& Feature, int nIndex);
	void ReplaceFeatureAt(CFeatureType& Feature, int nIndex);
	CFeatureType GetFeatureAt(int nIndex);
	CFeatureType GetFeature();
	void RemoveFeatureAt(int nIndex);
	void RemoveFeature();
};


class MCML_DECLSPECIFIER CSurfaceType : public CNode
{
public:
	CSurfaceType() : CNode() {}
	CSurfaceType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSurfaceType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSurfaceType() {}
	static EGroupType GetGroupType();

	//
	// string DictionaryID (0...1)
	//
	static int GetDictionaryIDMinCount();
	static int GetDictionaryIDMaxCount();
	int GetDictionaryIDCount();
	bool HasDictionaryID();
	void AddDictionaryID(CSchemaString DictionaryID);
	void InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	void ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	CSchemaString GetDictionaryIDAt(int nIndex);
	CSchemaString GetDictionaryID();
	void RemoveDictionaryIDAt(int nIndex);
	void RemoveDictionaryID();

	//
	// string EntryID (0...1)
	//
	static int GetEntryIDMinCount();
	static int GetEntryIDMaxCount();
	int GetEntryIDCount();
	bool HasEntryID();
	void AddEntryID(CSchemaString EntryID);
	void InsertEntryIDAt(CSchemaString EntryID, int nIndex);
	void ReplaceEntryIDAt(CSchemaString EntryID, int nIndex);
	CSchemaString GetEntryIDAt(int nIndex);
	CSchemaString GetEntryID();
	void RemoveEntryIDAt(int nIndex);
	void RemoveEntryID();
};


class MCML_DECLSPECIFIER CPOSType : public CNode
{
public:
	CPOSType() : CNode() {}
	CPOSType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CPOSType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CPOSType() {}
	static EGroupType GetGroupType();

	//
	// string DictionaryID (0...1)
	//
	static int GetDictionaryIDMinCount();
	static int GetDictionaryIDMaxCount();
	int GetDictionaryIDCount();
	bool HasDictionaryID();
	void AddDictionaryID(CSchemaString DictionaryID);
	void InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	void ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	CSchemaString GetDictionaryIDAt(int nIndex);
	CSchemaString GetDictionaryID();
	void RemoveDictionaryIDAt(int nIndex);
	void RemoveDictionaryID();

	//
	// string EntryID (0...1)
	//
	static int GetEntryIDMinCount();
	static int GetEntryIDMaxCount();
	int GetEntryIDCount();
	bool HasEntryID();
	void AddEntryID(CSchemaString EntryID);
	void InsertEntryIDAt(CSchemaString EntryID, int nIndex);
	void ReplaceEntryIDAt(CSchemaString EntryID, int nIndex);
	CSchemaString GetEntryIDAt(int nIndex);
	CSchemaString GetEntryID();
	void RemoveEntryIDAt(int nIndex);
	void RemoveEntryID();
};


class MCML_DECLSPECIFIER CPronunciationType : public CNode
{
public:
	CPronunciationType() : CNode() {}
	CPronunciationType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CPronunciationType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CPronunciationType() {}
	static EGroupType GetGroupType();

	//
	// string DictionaryID (0...1)
	//
	static int GetDictionaryIDMinCount();
	static int GetDictionaryIDMaxCount();
	int GetDictionaryIDCount();
	bool HasDictionaryID();
	void AddDictionaryID(CSchemaString DictionaryID);
	void InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	void ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	CSchemaString GetDictionaryIDAt(int nIndex);
	CSchemaString GetDictionaryID();
	void RemoveDictionaryIDAt(int nIndex);
	void RemoveDictionaryID();

	//
	// string EntryID (0...1)
	//
	static int GetEntryIDMinCount();
	static int GetEntryIDMaxCount();
	int GetEntryIDCount();
	bool HasEntryID();
	void AddEntryID(CSchemaString EntryID);
	void InsertEntryIDAt(CSchemaString EntryID, int nIndex);
	void ReplaceEntryIDAt(CSchemaString EntryID, int nIndex);
	CSchemaString GetEntryIDAt(int nIndex);
	CSchemaString GetEntryID();
	void RemoveEntryIDAt(int nIndex);
	void RemoveEntryID();
};


class MCML_DECLSPECIFIER CIPAType : public CNode
{
public:
	CIPAType() : CNode() {}
	CIPAType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CIPAType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CIPAType() {}
	static EGroupType GetGroupType();

	//
	// string DictionaryID (0...1)
	//
	static int GetDictionaryIDMinCount();
	static int GetDictionaryIDMaxCount();
	int GetDictionaryIDCount();
	bool HasDictionaryID();
	void AddDictionaryID(CSchemaString DictionaryID);
	void InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	void ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	CSchemaString GetDictionaryIDAt(int nIndex);
	CSchemaString GetDictionaryID();
	void RemoveDictionaryIDAt(int nIndex);
	void RemoveDictionaryID();

	//
	// string EntryID (0...1)
	//
	static int GetEntryIDMinCount();
	static int GetEntryIDMaxCount();
	int GetEntryIDCount();
	bool HasEntryID();
	void AddEntryID(CSchemaString EntryID);
	void InsertEntryIDAt(CSchemaString EntryID, int nIndex);
	void ReplaceEntryIDAt(CSchemaString EntryID, int nIndex);
	CSchemaString GetEntryIDAt(int nIndex);
	CSchemaString GetEntryID();
	void RemoveEntryIDAt(int nIndex);
	void RemoveEntryID();
};


class MCML_DECLSPECIFIER CAccentType : public CNode
{
public:
	CAccentType() : CNode() {}
	CAccentType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CAccentType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CAccentType() {}
	static EGroupType GetGroupType();

	//
	// string DictionaryID (0...1)
	//
	static int GetDictionaryIDMinCount();
	static int GetDictionaryIDMaxCount();
	int GetDictionaryIDCount();
	bool HasDictionaryID();
	void AddDictionaryID(CSchemaString DictionaryID);
	void InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	void ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex);
	CSchemaString GetDictionaryIDAt(int nIndex);
	CSchemaString GetDictionaryID();
	void RemoveDictionaryIDAt(int nIndex);
	void RemoveDictionaryID();

	//
	// string EntryID (0...1)
	//
	static int GetEntryIDMinCount();
	static int GetEntryIDMaxCount();
	int GetEntryIDCount();
	bool HasEntryID();
	void AddEntryID(CSchemaString EntryID);
	void InsertEntryIDAt(CSchemaString EntryID, int nIndex);
	void ReplaceEntryIDAt(CSchemaString EntryID, int nIndex);
	CSchemaString GetEntryIDAt(int nIndex);
	CSchemaString GetEntryID();
	void RemoveEntryIDAt(int nIndex);
	void RemoveEntryID();
};


class MCML_DECLSPECIFIER CChunkType : public CNode
{
public:
	CChunkType() : CNode() {}
	CChunkType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CChunkType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CChunkType() {}
	static EGroupType GetGroupType();

	//
	// int Order (1...1)
	//
	static int GetOrderMinCount();
	static int GetOrderMaxCount();
	int GetOrderCount();
	bool HasOrder();
	void AddOrder(CSchemaInt Order);
	void InsertOrderAt(CSchemaInt Order, int nIndex);
	void ReplaceOrderAt(CSchemaInt Order, int nIndex);
	CSchemaInt GetOrderAt(int nIndex);
	CSchemaInt GetOrder();
	void RemoveOrderAt(int nIndex);
	void RemoveOrder();

	//
	// float Score (0...1)
	//
	static int GetScoreMinCount();
	static int GetScoreMaxCount();
	int GetScoreCount();
	bool HasScore();
	void AddScore(CSchemaFloat Score);
	void InsertScoreAt(CSchemaFloat Score, int nIndex);
	void ReplaceScoreAt(CSchemaFloat Score, int nIndex);
	CSchemaFloat GetScoreAt(int nIndex);
	CSchemaFloat GetScore();
	void RemoveScoreAt(int nIndex);
	void RemoveScore();

	//
	// dateTime TimeStamp (0...1)
	//
	static int GetTimeStampMinCount();
	static int GetTimeStampMaxCount();
	int GetTimeStampCount();
	bool HasTimeStamp();
	void AddTimeStamp(CSchemaDateTime TimeStamp);
	void InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	void ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	CSchemaDateTime GetTimeStampAt(int nIndex);
	CSchemaDateTime GetTimeStamp();
	void RemoveTimeStampAt(int nIndex);
	void RemoveTimeStamp();

	//
	// integer BeginTime (0...1)
	//
	static int GetBeginTimeMinCount();
	static int GetBeginTimeMaxCount();
	int GetBeginTimeCount();
	bool HasBeginTime();
	void AddBeginTime(CSchemaInteger BeginTime);
	void InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	void ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	CSchemaInteger GetBeginTimeAt(int nIndex);
	CSchemaInteger GetBeginTime();
	void RemoveBeginTimeAt(int nIndex);
	void RemoveBeginTime();

	//
	// integer EndTime (0...1)
	//
	static int GetEndTimeMinCount();
	static int GetEndTimeMaxCount();
	int GetEndTimeCount();
	bool HasEndTime();
	void AddEndTime(CSchemaInteger EndTime);
	void InsertEndTimeAt(CSchemaInteger EndTime, int nIndex);
	void ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex);
	CSchemaInteger GetEndTimeAt(int nIndex);
	CSchemaInteger GetEndTime();
	void RemoveEndTimeAt(int nIndex);
	void RemoveEndTime();

	//
	// Surface Surface (1...unbounded)
	//
	static int GetSurfaceMinCount();
	static int GetSurfaceMaxCount();
	int GetSurfaceCount();
	bool HasSurface();
	void AddSurface(CSurfaceType& Surface);
	void InsertSurfaceAt(CSurfaceType& Surface, int nIndex);
	void ReplaceSurfaceAt(CSurfaceType& Surface, int nIndex);
	CSurfaceType GetSurfaceAt(int nIndex);
	CSurfaceType GetSurface();
	void RemoveSurfaceAt(int nIndex);
	void RemoveSurface();

	//
	// POS POS (0...unbounded)
	//
	static int GetPOSMinCount();
	static int GetPOSMaxCount();
	int GetPOSCount();
	bool HasPOS();
	void AddPOS(CPOSType& POS);
	void InsertPOSAt(CPOSType& POS, int nIndex);
	void ReplacePOSAt(CPOSType& POS, int nIndex);
	CPOSType GetPOSAt(int nIndex);
	CPOSType GetPOS();
	void RemovePOSAt(int nIndex);
	void RemovePOS();

	//
	// Pronunciation Pronunciation (0...unbounded)
	//
	static int GetPronunciationMinCount();
	static int GetPronunciationMaxCount();
	int GetPronunciationCount();
	bool HasPronunciation();
	void AddPronunciation(CPronunciationType& Pronunciation);
	void InsertPronunciationAt(CPronunciationType& Pronunciation, int nIndex);
	void ReplacePronunciationAt(CPronunciationType& Pronunciation, int nIndex);
	CPronunciationType GetPronunciationAt(int nIndex);
	CPronunciationType GetPronunciation();
	void RemovePronunciationAt(int nIndex);
	void RemovePronunciation();

	//
	// IPA IPA (0...unbounded)
	//
	static int GetIPAMinCount();
	static int GetIPAMaxCount();
	int GetIPACount();
	bool HasIPA();
	void AddIPA(CIPAType& IPA);
	void InsertIPAAt(CIPAType& IPA, int nIndex);
	void ReplaceIPAAt(CIPAType& IPA, int nIndex);
	CIPAType GetIPAAt(int nIndex);
	CIPAType GetIPA();
	void RemoveIPAAt(int nIndex);
	void RemoveIPA();

	//
	// Accent Accent (0...unbounded)
	//
	static int GetAccentMinCount();
	static int GetAccentMaxCount();
	int GetAccentCount();
	bool HasAccent();
	void AddAccent(CAccentType& Accent);
	void InsertAccentAt(CAccentType& Accent, int nIndex);
	void ReplaceAccentAt(CAccentType& Accent, int nIndex);
	CAccentType GetAccentAt(int nIndex);
	CAccentType GetAccent();
	void RemoveAccentAt(int nIndex);
	void RemoveAccent();
};


class MCML_DECLSPECIFIER CURLType : public CNode
{
public:
	CURLType() : CNode() {}
	CURLType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CURLType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CURLType() {}
	static EGroupType GetGroupType();
};


class MCML_DECLSPECIFIER CHTMLType : public CNode
{
public:
	CHTMLType() : CNode() {}
	CHTMLType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CHTMLType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CHTMLType() {}
	static EGroupType GetGroupType();
};


class MCML_DECLSPECIFIER CDataType : public CNode
{
public:
	CDataType() : CNode() {}
	CDataType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CDataType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CDataType() {}
	static EGroupType GetGroupType();

	//
	// Text Text (0...unbounded)
	//
	static int GetTextMinCount();
	static int GetTextMaxCount();
	int GetTextCount();
	bool HasText();
	void AddText(CTextType& Text);
	void InsertTextAt(CTextType& Text, int nIndex);
	void ReplaceTextAt(CTextType& Text, int nIndex);
	CTextType GetTextAt(int nIndex);
	CTextType GetText();
	void RemoveTextAt(int nIndex);
	void RemoveText();

	//
	// Audio Audio (0...unbounded)
	//
	static int GetAudioMinCount();
	static int GetAudioMaxCount();
	int GetAudioCount();
	bool HasAudio();
	void AddAudio(CAudioType& Audio);
	void InsertAudioAt(CAudioType& Audio, int nIndex);
	void ReplaceAudioAt(CAudioType& Audio, int nIndex);
	CAudioType GetAudioAt(int nIndex);
	CAudioType GetAudio();
	void RemoveAudioAt(int nIndex);
	void RemoveAudio();

	//
	// Image Image (0...unbounded)
	//
	static int GetImageMinCount();
	static int GetImageMaxCount();
	int GetImageCount();
	bool HasImage();
	void AddImage(CImageType& Image);
	void InsertImageAt(CImageType& Image, int nIndex);
	void ReplaceImageAt(CImageType& Image, int nIndex);
	CImageType GetImageAt(int nIndex);
	CImageType GetImage();
	void RemoveImageAt(int nIndex);
	void RemoveImage();

	//
	// Video Video (0...unbounded)
	//
	static int GetVideoMinCount();
	static int GetVideoMaxCount();
	int GetVideoCount();
	bool HasVideo();
	void AddVideo(CVideoType& Video);
	void InsertVideoAt(CVideoType& Video, int nIndex);
	void ReplaceVideoAt(CVideoType& Video, int nIndex);
	CVideoType GetVideoAt(int nIndex);
	CVideoType GetVideo();
	void RemoveVideoAt(int nIndex);
	void RemoveVideo();

	//
	// URL URL (0...unbounded)
	//
	static int GetURLMinCount();
	static int GetURLMaxCount();
	int GetURLCount();
	bool HasURL();
	void AddURL(CURLType& URL);
	void InsertURLAt(CURLType& URL, int nIndex);
	void ReplaceURLAt(CURLType& URL, int nIndex);
	CURLType GetURLAt(int nIndex);
	CURLType GetURL();
	void RemoveURLAt(int nIndex);
	void RemoveURL();

	//
	// HTML HTML (0...unbounded)
	//
	static int GetHTMLMinCount();
	static int GetHTMLMaxCount();
	int GetHTMLCount();
	bool HasHTML();
	void AddHTML(CHTMLType& HTML);
	void InsertHTMLAt(CHTMLType& HTML, int nIndex);
	void ReplaceHTMLAt(CHTMLType& HTML, int nIndex);
	CHTMLType GetHTMLAt(int nIndex);
	CHTMLType GetHTML();
	void RemoveHTMLAt(int nIndex);
	void RemoveHTML();
};


class MCML_DECLSPECIFIER CGlobalPositionType : public CNode
{
public:
	CGlobalPositionType() : CNode() {}
	CGlobalPositionType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CGlobalPositionType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CGlobalPositionType() {}
	static EGroupType GetGroupType();

	//
	// float Longitude (1...1)
	//
	static int GetLongitudeMinCount();
	static int GetLongitudeMaxCount();
	int GetLongitudeCount();
	bool HasLongitude();
	void AddLongitude(CSchemaFloat Longitude);
	void InsertLongitudeAt(CSchemaFloat Longitude, int nIndex);
	void ReplaceLongitudeAt(CSchemaFloat Longitude, int nIndex);
	CSchemaFloat GetLongitudeAt(int nIndex);
	CSchemaFloat GetLongitude();
	void RemoveLongitudeAt(int nIndex);
	void RemoveLongitude();

	//
	// float Latitude (1...1)
	//
	static int GetLatitudeMinCount();
	static int GetLatitudeMaxCount();
	int GetLatitudeCount();
	bool HasLatitude();
	void AddLatitude(CSchemaFloat Latitude);
	void InsertLatitudeAt(CSchemaFloat Latitude, int nIndex);
	void ReplaceLatitudeAt(CSchemaFloat Latitude, int nIndex);
	CSchemaFloat GetLatitudeAt(int nIndex);
	CSchemaFloat GetLatitude();
	void RemoveLatitudeAt(int nIndex);
	void RemoveLatitude();
};


class MCML_DECLSPECIFIER CLocationType : public CNode
{
public:
	CLocationType() : CNode() {}
	CLocationType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CLocationType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CLocationType() {}
	static EGroupType GetGroupType();

	//
	// string URI (1...1)
	//
	static int GetURIMinCount();
	static int GetURIMaxCount();
	int GetURICount();
	bool HasURI();
	void AddURI(CSchemaString URI);
	void InsertURIAt(CSchemaString URI, int nIndex);
	void ReplaceURIAt(CSchemaString URI, int nIndex);
	CSchemaString GetURIAt(int nIndex);
	CSchemaString GetURI();
	void RemoveURIAt(int nIndex);
	void RemoveURI();

	//
	// GlobalPosition GlobalPosition (0...1)
	//
	static int GetGlobalPositionMinCount();
	static int GetGlobalPositionMaxCount();
	int GetGlobalPositionCount();
	bool HasGlobalPosition();
	void AddGlobalPosition(CGlobalPositionType& GlobalPosition);
	void InsertGlobalPositionAt(CGlobalPositionType& GlobalPosition, int nIndex);
	void ReplaceGlobalPositionAt(CGlobalPositionType& GlobalPosition, int nIndex);
	CGlobalPositionType GetGlobalPositionAt(int nIndex);
	CGlobalPositionType GetGlobalPosition();
	void RemoveGlobalPositionAt(int nIndex);
	void RemoveGlobalPosition();
};


class MCML_DECLSPECIFIER CDeviceType : public CNode
{
public:
	CDeviceType() : CNode() {}
	CDeviceType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CDeviceType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CDeviceType() {}
	static EGroupType GetGroupType();

	//
	// Location Location (1...1)
	//
	static int GetLocationMinCount();
	static int GetLocationMaxCount();
	int GetLocationCount();
	bool HasLocation();
	void AddLocation(CLocationType& Location);
	void InsertLocationAt(CLocationType& Location, int nIndex);
	void ReplaceLocationAt(CLocationType& Location, int nIndex);
	CLocationType GetLocationAt(int nIndex);
	CLocationType GetLocation();
	void RemoveLocationAt(int nIndex);
	void RemoveLocation();
};


class MCML_DECLSPECIFIER CErrorType : public CNode
{
public:
	CErrorType() : CNode() {}
	CErrorType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CErrorType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CErrorType() {}
	static EGroupType GetGroupType();

	//
	// string Code (1...1)
	//
	static int GetCodeMinCount();
	static int GetCodeMaxCount();
	int GetCodeCount();
	bool HasCode();
	void AddCode(CSchemaString Code);
	void InsertCodeAt(CSchemaString Code, int nIndex);
	void ReplaceCodeAt(CSchemaString Code, int nIndex);
	CSchemaString GetCodeAt(int nIndex);
	CSchemaString GetCode();
	void RemoveCodeAt(int nIndex);
	void RemoveCode();

	//
	// string Service (1...1)
	//
	static int GetServiceMinCount();
	static int GetServiceMaxCount();
	int GetServiceCount();
	bool HasService();
	void AddService(CSchemaString Service);
	void InsertServiceAt(CSchemaString Service, int nIndex);
	void ReplaceServiceAt(CSchemaString Service, int nIndex);
	CSchemaString GetServiceAt(int nIndex);
	CSchemaString GetService();
	void RemoveServiceAt(int nIndex);
	void RemoveService();

	//
	// string Message (1...1)
	//
	static int GetMessageMinCount();
	static int GetMessageMaxCount();
	int GetMessageCount();
	bool HasMessage();
	void AddMessage(CSchemaString Message);
	void InsertMessageAt(CSchemaString Message, int nIndex);
	void ReplaceMessageAt(CSchemaString Message, int nIndex);
	CSchemaString GetMessageAt(int nIndex);
	CSchemaString GetMessage();
	void RemoveMessageAt(int nIndex);
	void RemoveMessage();
};


class MCML_DECLSPECIFIER CHistoryType : public CNode
{
public:
	CHistoryType() : CNode() {}
	CHistoryType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CHistoryType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CHistoryType() {}
	static EGroupType GetGroupType();

	//
	// string Service (1...1)
	//
	static int GetServiceMinCount();
	static int GetServiceMaxCount();
	int GetServiceCount();
	bool HasService();
	void AddService(CSchemaString Service);
	void InsertServiceAt(CSchemaString Service, int nIndex);
	void ReplaceServiceAt(CSchemaString Service, int nIndex);
	CSchemaString GetServiceAt(int nIndex);
	CSchemaString GetService();
	void RemoveServiceAt(int nIndex);
	void RemoveService();

	//
	// int ProcessOrder (1...1)
	//
	static int GetProcessOrderMinCount();
	static int GetProcessOrderMaxCount();
	int GetProcessOrderCount();
	bool HasProcessOrder();
	void AddProcessOrder(CSchemaInt ProcessOrder);
	void InsertProcessOrderAt(CSchemaInt ProcessOrder, int nIndex);
	void ReplaceProcessOrderAt(CSchemaInt ProcessOrder, int nIndex);
	CSchemaInt GetProcessOrderAt(int nIndex);
	CSchemaInt GetProcessOrder();
	void RemoveProcessOrderAt(int nIndex);
	void RemoveProcessOrder();

	//
	// Request Request (1...1)
	//
	static int GetRequestMinCount();
	static int GetRequestMaxCount();
	int GetRequestCount();
	bool HasRequest();
	void AddRequest(CRequestType& Request);
	void InsertRequestAt(CRequestType& Request, int nIndex);
	void ReplaceRequestAt(CRequestType& Request, int nIndex);
	CRequestType GetRequestAt(int nIndex);
	CRequestType GetRequest();
	void RemoveRequestAt(int nIndex);
	void RemoveRequest();

	//
	// Response Response (1...1)
	//
	static int GetResponseMinCount();
	static int GetResponseMaxCount();
	int GetResponseCount();
	bool HasResponse();
	void AddResponse(CResponseType& Response);
	void InsertResponseAt(CResponseType& Response, int nIndex);
	void ReplaceResponseAt(CResponseType& Response, int nIndex);
	CResponseType GetResponseAt(int nIndex);
	CResponseType GetResponse();
	void RemoveResponseAt(int nIndex);
	void RemoveResponse();
};


class MCML_DECLSPECIFIER CImageType : public CNode
{
public:
	CImageType() : CNode() {}
	CImageType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CImageType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CImageType() {}
	static EGroupType GetGroupType();

	//
	// int ChannelID (1...1)
	//
	static int GetChannelIDMinCount();
	static int GetChannelIDMaxCount();
	int GetChannelIDCount();
	bool HasChannelID();
	void AddChannelID(CSchemaInt ChannelID);
	void InsertChannelIDAt(CSchemaInt ChannelID, int nIndex);
	void ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex);
	CSchemaInt GetChannelIDAt(int nIndex);
	CSchemaInt GetChannelID();
	void RemoveChannelIDAt(int nIndex);
	void RemoveChannelID();

	//
	// dateTime BeginTimestamp (1...1)
	//
	static int GetBeginTimestampMinCount();
	static int GetBeginTimestampMaxCount();
	int GetBeginTimestampCount();
	bool HasBeginTimestamp();
	void AddBeginTimestamp(CSchemaDateTime BeginTimestamp);
	void InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	void ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	CSchemaDateTime GetBeginTimestampAt(int nIndex);
	CSchemaDateTime GetBeginTimestamp();
	void RemoveBeginTimestampAt(int nIndex);
	void RemoveBeginTimestamp();

	//
	// dateTime EndTimestamp (1...1)
	//
	static int GetEndTimestampMinCount();
	static int GetEndTimestampMaxCount();
	int GetEndTimestampCount();
	bool HasEndTimestamp();
	void AddEndTimestamp(CSchemaDateTime EndTimestamp);
	void InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	void ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	CSchemaDateTime GetEndTimestampAt(int nIndex);
	CSchemaDateTime GetEndTimestamp();
	void RemoveEndTimestampAt(int nIndex);
	void RemoveEndTimestamp();

	//
	// dateTime EndPoint (0...1)
	//
	static int GetEndPointMinCount();
	static int GetEndPointMaxCount();
	int GetEndPointCount();
	bool HasEndPoint();
	void AddEndPoint(CSchemaDateTime EndPoint);
	void InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	void ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	CSchemaDateTime GetEndPointAt(int nIndex);
	CSchemaDateTime GetEndPoint();
	void RemoveEndPointAt(int nIndex);
	void RemoveEndPoint();

	//
	// ModelType ModelType (0...1)
	//
	static int GetModelTypeMinCount();
	static int GetModelTypeMaxCount();
	int GetModelTypeCount();
	bool HasModelType();
	void AddModelType(CModelTypeType& ModelType);
	void InsertModelTypeAt(CModelTypeType& ModelType, int nIndex);
	void ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex);
	CModelTypeType GetModelTypeAt(int nIndex);
	CModelTypeType GetModelType();
	void RemoveModelTypeAt(int nIndex);
	void RemoveModelType();
};


class MCML_DECLSPECIFIER CInputType : public CNode
{
public:
	CInputType() : CNode() {}
	CInputType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CInputType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CInputType() {}
	static EGroupType GetGroupType();

	//
	// Data Data (1...1)
	//
	static int GetDataMinCount();
	static int GetDataMaxCount();
	int GetDataCount();
	bool HasData();
	void AddData(CDataType& Data);
	void InsertDataAt(CDataType& Data, int nIndex);
	void ReplaceDataAt(CDataType& Data, int nIndex);
	CDataType GetDataAt(int nIndex);
	CDataType GetData();
	void RemoveDataAt(int nIndex);
	void RemoveData();

	//
	// AttachedBinary AttachedBinary (0...unbounded)
	//
	static int GetAttachedBinaryMinCount();
	static int GetAttachedBinaryMaxCount();
	int GetAttachedBinaryCount();
	bool HasAttachedBinary();
	void AddAttachedBinary(CAttachedBinaryType& AttachedBinary);
	void InsertAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex);
	void ReplaceAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex);
	CAttachedBinaryType GetAttachedBinaryAt(int nIndex);
	CAttachedBinaryType GetAttachedBinary();
	void RemoveAttachedBinaryAt(int nIndex);
	void RemoveAttachedBinary();
};


class MCML_DECLSPECIFIER CSpeakingType : public CNode
{
public:
	CSpeakingType() : CNode() {}
	CSpeakingType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSpeakingType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSpeakingType() {}
	static EGroupType GetGroupType();

	//
	// Language Language (1...1)
	//
	static int GetLanguageMinCount();
	static int GetLanguageMaxCount();
	int GetLanguageCount();
	bool HasLanguage();
	void AddLanguage(CLanguageType& Language);
	void InsertLanguageAt(CLanguageType& Language, int nIndex);
	void ReplaceLanguageAt(CLanguageType& Language, int nIndex);
	CLanguageType GetLanguageAt(int nIndex);
	CLanguageType GetLanguage();
	void RemoveLanguageAt(int nIndex);
	void RemoveLanguage();
};


class MCML_DECLSPECIFIER CWritingType : public CNode
{
public:
	CWritingType() : CNode() {}
	CWritingType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CWritingType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CWritingType() {}
	static EGroupType GetGroupType();

	//
	// Language Language (1...1)
	//
	static int GetLanguageMinCount();
	static int GetLanguageMaxCount();
	int GetLanguageCount();
	bool HasLanguage();
	void AddLanguage(CLanguageType& Language);
	void InsertLanguageAt(CLanguageType& Language, int nIndex);
	void ReplaceLanguageAt(CLanguageType& Language, int nIndex);
	CLanguageType GetLanguageAt(int nIndex);
	CLanguageType GetLanguage();
	void RemoveLanguageAt(int nIndex);
	void RemoveLanguage();
};


class MCML_DECLSPECIFIER CSigningType : public CNode
{
public:
	CSigningType() : CNode() {}
	CSigningType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSigningType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSigningType() {}
	static EGroupType GetGroupType();
};


class MCML_DECLSPECIFIER CInputModalityType : public CNode
{
public:
	CInputModalityType() : CNode() {}
	CInputModalityType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CInputModalityType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CInputModalityType() {}
	static EGroupType GetGroupType();

	//
	// Speaking Speaking (0...1)
	//
	static int GetSpeakingMinCount();
	static int GetSpeakingMaxCount();
	int GetSpeakingCount();
	bool HasSpeaking();
	void AddSpeaking(CSpeakingType& Speaking);
	void InsertSpeakingAt(CSpeakingType& Speaking, int nIndex);
	void ReplaceSpeakingAt(CSpeakingType& Speaking, int nIndex);
	CSpeakingType GetSpeakingAt(int nIndex);
	CSpeakingType GetSpeaking();
	void RemoveSpeakingAt(int nIndex);
	void RemoveSpeaking();

	//
	// Writing Writing (0...1)
	//
	static int GetWritingMinCount();
	static int GetWritingMaxCount();
	int GetWritingCount();
	bool HasWriting();
	void AddWriting(CWritingType& Writing);
	void InsertWritingAt(CWritingType& Writing, int nIndex);
	void ReplaceWritingAt(CWritingType& Writing, int nIndex);
	CWritingType GetWritingAt(int nIndex);
	CWritingType GetWriting();
	void RemoveWritingAt(int nIndex);
	void RemoveWriting();

	//
	// Signing Signing (0...1)
	//
	static int GetSigningMinCount();
	static int GetSigningMaxCount();
	int GetSigningCount();
	bool HasSigning();
	void AddSigning(CSigningType& Signing);
	void InsertSigningAt(CSigningType& Signing, int nIndex);
	void ReplaceSigningAt(CSigningType& Signing, int nIndex);
	CSigningType GetSigningAt(int nIndex);
	CSigningType GetSigning();
	void RemoveSigningAt(int nIndex);
	void RemoveSigning();
};


class MCML_DECLSPECIFIER CInputUserProfileType : public CNode
{
public:
	CInputUserProfileType() : CNode() {}
	CInputUserProfileType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CInputUserProfileType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CInputUserProfileType() {}
	static EGroupType GetGroupType();

	//
	// string ID (1...1)
	//
	static int GetIDMinCount();
	static int GetIDMaxCount();
	int GetIDCount();
	bool HasID();
	void AddID(CSchemaString ID);
	void InsertIDAt(CSchemaString ID, int nIndex);
	void ReplaceIDAt(CSchemaString ID, int nIndex);
	CSchemaString GetIDAt(int nIndex);
	CSchemaString GetID();
	void RemoveIDAt(int nIndex);
	void RemoveID();

	//
	// int Age (0...1)
	//
	static int GetAgeMinCount();
	static int GetAgeMaxCount();
	int GetAgeCount();
	bool HasAge();
	void AddAge(CSchemaInt Age);
	void InsertAgeAt(CSchemaInt Age, int nIndex);
	void ReplaceAgeAt(CSchemaInt Age, int nIndex);
	CSchemaInt GetAgeAt(int nIndex);
	CSchemaInt GetAge();
	void RemoveAgeAt(int nIndex);
	void RemoveAge();

	//
	// string Gender (0...1)
	//
	static int GetGenderMinCount();
	static int GetGenderMaxCount();
	int GetGenderCount();
	bool HasGender();
	void AddGender(CSchemaString Gender);
	void InsertGenderAt(CSchemaString Gender, int nIndex);
	void ReplaceGenderAt(CSchemaString Gender, int nIndex);
	CSchemaString GetGenderAt(int nIndex);
	CSchemaString GetGender();
	void RemoveGenderAt(int nIndex);
	void RemoveGender();

	//
	// string Email (0...1)
	//
	static int GetEmailMinCount();
	static int GetEmailMaxCount();
	int GetEmailCount();
	bool HasEmail();
	void AddEmail(CSchemaString Email);
	void InsertEmailAt(CSchemaString Email, int nIndex);
	void ReplaceEmailAt(CSchemaString Email, int nIndex);
	CSchemaString GetEmailAt(int nIndex);
	CSchemaString GetEmail();
	void RemoveEmailAt(int nIndex);
	void RemoveEmail();

	//
	// string Password (0...1)
	//
	static int GetPasswordMinCount();
	static int GetPasswordMaxCount();
	int GetPasswordCount();
	bool HasPassword();
	void AddPassword(CSchemaString Password);
	void InsertPasswordAt(CSchemaString Password, int nIndex);
	void ReplacePasswordAt(CSchemaString Password, int nIndex);
	CSchemaString GetPasswordAt(int nIndex);
	CSchemaString GetPassword();
	void RemovePasswordAt(int nIndex);
	void RemovePassword();

	//
	// string AccessCode (0...1)
	//
	static int GetAccessCodeMinCount();
	static int GetAccessCodeMaxCount();
	int GetAccessCodeCount();
	bool HasAccessCode();
	void AddAccessCode(CSchemaString AccessCode);
	void InsertAccessCodeAt(CSchemaString AccessCode, int nIndex);
	void ReplaceAccessCodeAt(CSchemaString AccessCode, int nIndex);
	CSchemaString GetAccessCodeAt(int nIndex);
	CSchemaString GetAccessCode();
	void RemoveAccessCodeAt(int nIndex);
	void RemoveAccessCode();

	//
	// InputModality InputModality (0...1)
	//
	static int GetInputModalityMinCount();
	static int GetInputModalityMaxCount();
	int GetInputModalityCount();
	bool HasInputModality();
	void AddInputModality(CInputModalityType& InputModality);
	void InsertInputModalityAt(CInputModalityType& InputModality, int nIndex);
	void ReplaceInputModalityAt(CInputModalityType& InputModality, int nIndex);
	CInputModalityType GetInputModalityAt(int nIndex);
	CInputModalityType GetInputModality();
	void RemoveInputModalityAt(int nIndex);
	void RemoveInputModality();
};


class MCML_DECLSPECIFIER CLanguageType : public CNode
{
public:
	CLanguageType() : CNode() {}
	CLanguageType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CLanguageType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CLanguageType() {}
	static EGroupType GetGroupType();

	//
	// string ID (1...1)
	//
	static int GetIDMinCount();
	static int GetIDMaxCount();
	int GetIDCount();
	bool HasID();
	void AddID(CSchemaString ID);
	void InsertIDAt(CSchemaString ID, int nIndex);
	void ReplaceIDAt(CSchemaString ID, int nIndex);
	CSchemaString GetIDAt(int nIndex);
	CSchemaString GetID();
	void RemoveIDAt(int nIndex);
	void RemoveID();

	//
	// string Dialect (0...1)
	//
	static int GetDialectMinCount();
	static int GetDialectMaxCount();
	int GetDialectCount();
	bool HasDialect();
	void AddDialect(CSchemaString Dialect);
	void InsertDialectAt(CSchemaString Dialect, int nIndex);
	void ReplaceDialectAt(CSchemaString Dialect, int nIndex);
	CSchemaString GetDialectAt(int nIndex);
	CSchemaString GetDialect();
	void RemoveDialectAt(int nIndex);
	void RemoveDialect();

	//
	// int Fluency (1...1)
	//
	static int GetFluencyMinCount();
	static int GetFluencyMaxCount();
	int GetFluencyCount();
	bool HasFluency();
	void AddFluency(CSchemaInt Fluency);
	void InsertFluencyAt(CSchemaInt Fluency, int nIndex);
	void ReplaceFluencyAt(CSchemaInt Fluency, int nIndex);
	CSchemaInt GetFluencyAt(int nIndex);
	CSchemaInt GetFluency();
	void RemoveFluencyAt(int nIndex);
	void RemoveFluency();
};


class MCML_DECLSPECIFIER CLanguageTypeType : public CNode
{
public:
	CLanguageTypeType() : CNode() {}
	CLanguageTypeType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CLanguageTypeType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CLanguageTypeType() {}
	static EGroupType GetGroupType();

	//
	// string ID (1...1)
	//
	static int GetIDMinCount();
	static int GetIDMaxCount();
	int GetIDCount();
	bool HasID();
	void AddID(CSchemaString ID);
	void InsertIDAt(CSchemaString ID, int nIndex);
	void ReplaceIDAt(CSchemaString ID, int nIndex);
	CSchemaString GetIDAt(int nIndex);
	CSchemaString GetID();
	void RemoveIDAt(int nIndex);
	void RemoveID();

	//
	// string Dialect (0...1)
	//
	static int GetDialectMinCount();
	static int GetDialectMaxCount();
	int GetDialectCount();
	bool HasDialect();
	void AddDialect(CSchemaString Dialect);
	void InsertDialectAt(CSchemaString Dialect, int nIndex);
	void ReplaceDialectAt(CSchemaString Dialect, int nIndex);
	CSchemaString GetDialectAt(int nIndex);
	CSchemaString GetDialect();
	void RemoveDialectAt(int nIndex);
	void RemoveDialect();
};


class MCML_DECLSPECIFIER CMCMLType : public CNode
{
public:
	CMCMLType() : CNode() {}
	CMCMLType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CMCMLType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CMCMLType() {}
	static EGroupType GetGroupType();

	//
	// string Version (1...1)
	//
	static int GetVersionMinCount();
	static int GetVersionMaxCount();
	int GetVersionCount();
	bool HasVersion();
	void AddVersion(CSchemaString Version);
	void InsertVersionAt(CSchemaString Version, int nIndex);
	void ReplaceVersionAt(CSchemaString Version, int nIndex);
	CSchemaString GetVersionAt(int nIndex);
	CSchemaString GetVersion();
	void RemoveVersionAt(int nIndex);
	void RemoveVersion();

	//
	// User User (1...1)
	//
	static int GetUserMinCount();
	static int GetUserMaxCount();
	int GetUserCount();
	bool HasUser();
	void AddUser(CUserType& User);
	void InsertUserAt(CUserType& User, int nIndex);
	void ReplaceUserAt(CUserType& User, int nIndex);
	CUserType GetUserAt(int nIndex);
	CUserType GetUser();
	void RemoveUserAt(int nIndex);
	void RemoveUser();

	//
	// Server Server (1...unbounded)
	//
	static int GetServerMinCount();
	static int GetServerMaxCount();
	int GetServerCount();
	bool HasServer();
	void AddServer(CServerType& Server);
	void InsertServerAt(CServerType& Server, int nIndex);
	void ReplaceServerAt(CServerType& Server, int nIndex);
	CServerType GetServerAt(int nIndex);
	CServerType GetServer();
	void RemoveServerAt(int nIndex);
	void RemoveServer();

	//
	// History History (0...unbounded)
	//
	static int GetHistoryMinCount();
	static int GetHistoryMaxCount();
	int GetHistoryCount();
	bool HasHistory();
	void AddHistory(CHistoryType& History);
	void InsertHistoryAt(CHistoryType& History, int nIndex);
	void ReplaceHistoryAt(CHistoryType& History, int nIndex);
	CHistoryType GetHistoryAt(int nIndex);
	CHistoryType GetHistory();
	void RemoveHistoryAt(int nIndex);
	void RemoveHistory();
};


class MCML_DECLSPECIFIER CPersonalityType : public CNode
{
public:
	CPersonalityType() : CNode() {}
	CPersonalityType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CPersonalityType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CPersonalityType() {}
	static EGroupType GetGroupType();

	//
	// string ID (1...1)
	//
	static int GetIDMinCount();
	static int GetIDMaxCount();
	int GetIDCount();
	bool HasID();
	void AddID(CSchemaString ID);
	void InsertIDAt(CSchemaString ID, int nIndex);
	void ReplaceIDAt(CSchemaString ID, int nIndex);
	CSchemaString GetIDAt(int nIndex);
	CSchemaString GetID();
	void RemoveIDAt(int nIndex);
	void RemoveID();

	//
	// int Age (1...1)
	//
	static int GetAgeMinCount();
	static int GetAgeMaxCount();
	int GetAgeCount();
	bool HasAge();
	void AddAge(CSchemaInt Age);
	void InsertAgeAt(CSchemaInt Age, int nIndex);
	void ReplaceAgeAt(CSchemaInt Age, int nIndex);
	CSchemaInt GetAgeAt(int nIndex);
	CSchemaInt GetAge();
	void RemoveAgeAt(int nIndex);
	void RemoveAge();

	//
	// string Gender (1...1)
	//
	static int GetGenderMinCount();
	static int GetGenderMaxCount();
	int GetGenderCount();
	bool HasGender();
	void AddGender(CSchemaString Gender);
	void InsertGenderAt(CSchemaString Gender, int nIndex);
	void ReplaceGenderAt(CSchemaString Gender, int nIndex);
	CSchemaString GetGenderAt(int nIndex);
	CSchemaString GetGender();
	void RemoveGenderAt(int nIndex);
	void RemoveGender();
};


class MCML_DECLSPECIFIER CModelTypeType : public CNode
{
public:
	CModelTypeType() : CNode() {}
	CModelTypeType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CModelTypeType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CModelTypeType() {}
	static EGroupType GetGroupType();

	//
	// string Domain (0...unbounded)
	//
	static int GetDomainMinCount();
	static int GetDomainMaxCount();
	int GetDomainCount();
	bool HasDomain();
	void AddDomain(CSchemaString Domain);
	void InsertDomainAt(CSchemaString Domain, int nIndex);
	void ReplaceDomainAt(CSchemaString Domain, int nIndex);
	CSchemaString GetDomainAt(int nIndex);
	CSchemaString GetDomain();
	void RemoveDomainAt(int nIndex);
	void RemoveDomain();

	//
	// string Task (0...unbounded)
	//
	static int GetTaskMinCount();
	static int GetTaskMaxCount();
	int GetTaskCount();
	bool HasTask();
	void AddTask(CSchemaString Task);
	void InsertTaskAt(CSchemaString Task, int nIndex);
	void ReplaceTaskAt(CSchemaString Task, int nIndex);
	CSchemaString GetTaskAt(int nIndex);
	CSchemaString GetTask();
	void RemoveTaskAt(int nIndex);
	void RemoveTask();

	//
	// Personality Personality (0...1)
	//
	static int GetPersonalityMinCount();
	static int GetPersonalityMaxCount();
	int GetPersonalityCount();
	bool HasPersonality();
	void AddPersonality(CPersonalityType& Personality);
	void InsertPersonalityAt(CPersonalityType& Personality, int nIndex);
	void ReplacePersonalityAt(CPersonalityType& Personality, int nIndex);
	CPersonalityType GetPersonalityAt(int nIndex);
	CPersonalityType GetPersonality();
	void RemovePersonalityAt(int nIndex);
	void RemovePersonality();

	//
	// Language Language (1...1)
	//
	static int GetLanguageMinCount();
	static int GetLanguageMaxCount();
	int GetLanguageCount();
	bool HasLanguage();
	void AddLanguage(CLanguageType& Language);
	void InsertLanguageAt(CLanguageType& Language, int nIndex);
	void ReplaceLanguageAt(CLanguageType& Language, int nIndex);
	CLanguageType GetLanguageAt(int nIndex);
	CLanguageType GetLanguage();
	void RemoveLanguageAt(int nIndex);
	void RemoveLanguage();
};


class MCML_DECLSPECIFIER COutputType : public CNode
{
public:
	COutputType() : CNode() {}
	COutputType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	COutputType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~COutputType() {}
	static EGroupType GetGroupType();

	//
	// Data Data (1...1)
	//
	static int GetDataMinCount();
	static int GetDataMaxCount();
	int GetDataCount();
	bool HasData();
	void AddData(CDataType& Data);
	void InsertDataAt(CDataType& Data, int nIndex);
	void ReplaceDataAt(CDataType& Data, int nIndex);
	CDataType GetDataAt(int nIndex);
	CDataType GetData();
	void RemoveDataAt(int nIndex);
	void RemoveData();

	//
	// AttachedBinary AttachedBinary (0...unbounded)
	//
	static int GetAttachedBinaryMinCount();
	static int GetAttachedBinaryMaxCount();
	int GetAttachedBinaryCount();
	bool HasAttachedBinary();
	void AddAttachedBinary(CAttachedBinaryType& AttachedBinary);
	void InsertAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex);
	void ReplaceAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex);
	CAttachedBinaryType GetAttachedBinaryAt(int nIndex);
	CAttachedBinaryType GetAttachedBinary();
	void RemoveAttachedBinaryAt(int nIndex);
	void RemoveAttachedBinary();
};


class MCML_DECLSPECIFIER CReceiverType : public CNode
{
public:
	CReceiverType() : CNode() {}
	CReceiverType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CReceiverType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CReceiverType() {}
	static EGroupType GetGroupType();

	//
	// Device Device (1...1)
	//
	static int GetDeviceMinCount();
	static int GetDeviceMaxCount();
	int GetDeviceCount();
	bool HasDevice();
	void AddDevice(CDeviceType& Device);
	void InsertDeviceAt(CDeviceType& Device, int nIndex);
	void ReplaceDeviceAt(CDeviceType& Device, int nIndex);
	CDeviceType GetDeviceAt(int nIndex);
	CDeviceType GetDevice();
	void RemoveDeviceAt(int nIndex);
	void RemoveDevice();

	//
	// UserProfile UserProfile (1...unbounded)
	//
	static int GetUserProfileMinCount();
	static int GetUserProfileMaxCount();
	int GetUserProfileCount();
	bool HasUserProfile();
	void AddUserProfile(CUserProfileType& UserProfile);
	void InsertUserProfileAt(CUserProfileType& UserProfile, int nIndex);
	void ReplaceUserProfileAt(CUserProfileType& UserProfile, int nIndex);
	CUserProfileType GetUserProfileAt(int nIndex);
	CUserProfileType GetUserProfile();
	void RemoveUserProfileAt(int nIndex);
	void RemoveUserProfile();
};


class MCML_DECLSPECIFIER CRequestType : public CNode
{
public:
	CRequestType() : CNode() {}
	CRequestType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CRequestType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CRequestType() {}
	static EGroupType GetGroupType();

	//
	// string Service (1...1)
	//
	static int GetServiceMinCount();
	static int GetServiceMaxCount();
	int GetServiceCount();
	bool HasService();
	void AddService(CSchemaString Service);
	void InsertServiceAt(CSchemaString Service, int nIndex);
	void ReplaceServiceAt(CSchemaString Service, int nIndex);
	CSchemaString GetServiceAt(int nIndex);
	CSchemaString GetService();
	void RemoveServiceAt(int nIndex);
	void RemoveService();

	//
	// int ProcessOrder (1...1)
	//
	static int GetProcessOrderMinCount();
	static int GetProcessOrderMaxCount();
	int GetProcessOrderCount();
	bool HasProcessOrder();
	void AddProcessOrder(CSchemaInt ProcessOrder);
	void InsertProcessOrderAt(CSchemaInt ProcessOrder, int nIndex);
	void ReplaceProcessOrderAt(CSchemaInt ProcessOrder, int nIndex);
	CSchemaInt GetProcessOrderAt(int nIndex);
	CSchemaInt GetProcessOrder();
	void RemoveProcessOrderAt(int nIndex);
	void RemoveProcessOrder();

	//
	// Routing Routing (1...1)
	//
	static int GetRoutingMinCount();
	static int GetRoutingMaxCount();
	int GetRoutingCount();
	bool HasRouting();
	void AddRouting(CRoutingType& Routing);
	void InsertRoutingAt(CRoutingType& Routing, int nIndex);
	void ReplaceRoutingAt(CRoutingType& Routing, int nIndex);
	CRoutingType GetRoutingAt(int nIndex);
	CRoutingType GetRouting();
	void RemoveRoutingAt(int nIndex);
	void RemoveRouting();

	//
	// InputUserProfile InputUserProfile (0...unbounded)
	//
	static int GetInputUserProfileMinCount();
	static int GetInputUserProfileMaxCount();
	int GetInputUserProfileCount();
	bool HasInputUserProfile();
	void AddInputUserProfile(CInputUserProfileType& InputUserProfile);
	void InsertInputUserProfileAt(CInputUserProfileType& InputUserProfile, int nIndex);
	void ReplaceInputUserProfileAt(CInputUserProfileType& InputUserProfile, int nIndex);
	CInputUserProfileType GetInputUserProfileAt(int nIndex);
	CInputUserProfileType GetInputUserProfile();
	void RemoveInputUserProfileAt(int nIndex);
	void RemoveInputUserProfile();

	//
	// TargetOutput TargetOutput (0...1)
	//
	static int GetTargetOutputMinCount();
	static int GetTargetOutputMaxCount();
	int GetTargetOutputCount();
	bool HasTargetOutput();
	void AddTargetOutput(CTargetOutputType& TargetOutput);
	void InsertTargetOutputAt(CTargetOutputType& TargetOutput, int nIndex);
	void ReplaceTargetOutputAt(CTargetOutputType& TargetOutput, int nIndex);
	CTargetOutputType GetTargetOutputAt(int nIndex);
	CTargetOutputType GetTargetOutput();
	void RemoveTargetOutputAt(int nIndex);
	void RemoveTargetOutput();

	//
	// Input Input (0...1)
	//
	static int GetInputMinCount();
	static int GetInputMaxCount();
	int GetInputCount();
	bool HasInput();
	void AddInput(CInputType& Input);
	void InsertInputAt(CInputType& Input, int nIndex);
	void ReplaceInputAt(CInputType& Input, int nIndex);
	CInputType GetInputAt(int nIndex);
	CInputType GetInput();
	void RemoveInputAt(int nIndex);
	void RemoveInput();
};


class MCML_DECLSPECIFIER CResponseType : public CNode
{
public:
	CResponseType() : CNode() {}
	CResponseType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CResponseType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CResponseType() {}
	static EGroupType GetGroupType();

	//
	// string Service (1...1)
	//
	static int GetServiceMinCount();
	static int GetServiceMaxCount();
	int GetServiceCount();
	bool HasService();
	void AddService(CSchemaString Service);
	void InsertServiceAt(CSchemaString Service, int nIndex);
	void ReplaceServiceAt(CSchemaString Service, int nIndex);
	CSchemaString GetServiceAt(int nIndex);
	CSchemaString GetService();
	void RemoveServiceAt(int nIndex);
	void RemoveService();

	//
	// int ProcessOrder (1...1)
	//
	static int GetProcessOrderMinCount();
	static int GetProcessOrderMaxCount();
	int GetProcessOrderCount();
	bool HasProcessOrder();
	void AddProcessOrder(CSchemaInt ProcessOrder);
	void InsertProcessOrderAt(CSchemaInt ProcessOrder, int nIndex);
	void ReplaceProcessOrderAt(CSchemaInt ProcessOrder, int nIndex);
	CSchemaInt GetProcessOrderAt(int nIndex);
	CSchemaInt GetProcessOrder();
	void RemoveProcessOrderAt(int nIndex);
	void RemoveProcessOrder();

	//
	// Routing Routing (1...1)
	//
	static int GetRoutingMinCount();
	static int GetRoutingMaxCount();
	int GetRoutingCount();
	bool HasRouting();
	void AddRouting(CRoutingType& Routing);
	void InsertRoutingAt(CRoutingType& Routing, int nIndex);
	void ReplaceRoutingAt(CRoutingType& Routing, int nIndex);
	CRoutingType GetRoutingAt(int nIndex);
	CRoutingType GetRouting();
	void RemoveRoutingAt(int nIndex);
	void RemoveRouting();

	//
	// Output Output (1...unbounded)
	//
	static int GetOutputMinCount();
	static int GetOutputMaxCount();
	int GetOutputCount();
	bool HasOutput();
	void AddOutput(COutputType& Output);
	void InsertOutputAt(COutputType& Output, int nIndex);
	void ReplaceOutputAt(COutputType& Output, int nIndex);
	COutputType GetOutputAt(int nIndex);
	COutputType GetOutput();
	void RemoveOutputAt(int nIndex);
	void RemoveOutput();

	//
	// Error Error (1...1)
	//
	static int GetErrorMinCount();
	static int GetErrorMaxCount();
	int GetErrorCount();
	bool HasError();
	void AddError(CErrorType& Error);
	void InsertErrorAt(CErrorType& Error, int nIndex);
	void ReplaceErrorAt(CErrorType& Error, int nIndex);
	CErrorType GetErrorAt(int nIndex);
	CErrorType GetError();
	void RemoveErrorAt(int nIndex);
	void RemoveError();
};


class MCML_DECLSPECIFIER CFromType : public CNode
{
public:
	CFromType() : CNode() {}
	CFromType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CFromType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CFromType() {}
	static EGroupType GetGroupType();

	//
	// string URI (1...1)
	//
	static int GetURIMinCount();
	static int GetURIMaxCount();
	int GetURICount();
	bool HasURI();
	void AddURI(CSchemaString URI);
	void InsertURIAt(CSchemaString URI, int nIndex);
	void ReplaceURIAt(CSchemaString URI, int nIndex);
	CSchemaString GetURIAt(int nIndex);
	CSchemaString GetURI();
	void RemoveURIAt(int nIndex);
	void RemoveURI();
};


class MCML_DECLSPECIFIER CToType : public CNode
{
public:
	CToType() : CNode() {}
	CToType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CToType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CToType() {}
	static EGroupType GetGroupType();

	//
	// string URI (1...1)
	//
	static int GetURIMinCount();
	static int GetURIMaxCount();
	int GetURICount();
	bool HasURI();
	void AddURI(CSchemaString URI);
	void InsertURIAt(CSchemaString URI, int nIndex);
	void ReplaceURIAt(CSchemaString URI, int nIndex);
	CSchemaString GetURIAt(int nIndex);
	CSchemaString GetURI();
	void RemoveURIAt(int nIndex);
	void RemoveURI();
};


class MCML_DECLSPECIFIER CRoutingType : public CNode
{
public:
	CRoutingType() : CNode() {}
	CRoutingType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CRoutingType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CRoutingType() {}
	static EGroupType GetGroupType();

	//
	// From From (1...1)
	//
	static int GetFromMinCount();
	static int GetFromMaxCount();
	int GetFromCount();
	bool HasFrom();
	void AddFrom(CFromType& From);
	void InsertFromAt(CFromType& From, int nIndex);
	void ReplaceFromAt(CFromType& From, int nIndex);
	CFromType GetFromAt(int nIndex);
	CFromType GetFrom();
	void RemoveFromAt(int nIndex);
	void RemoveFrom();

	//
	// To To (1...unbounded)
	//
	static int GetToMinCount();
	static int GetToMaxCount();
	int GetToCount();
	bool HasTo();
	void AddTo(CToType& To);
	void InsertToAt(CToType& To, int nIndex);
	void ReplaceToAt(CToType& To, int nIndex);
	CToType GetToAt(int nIndex);
	CToType GetTo();
	void RemoveToAt(int nIndex);
	void RemoveTo();
};


class MCML_DECLSPECIFIER CSurfaceType2 : public CNode
{
public:
	CSurfaceType2() : CNode() {}
	CSurfaceType2(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSurfaceType2(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSurfaceType2() {}
	static EGroupType GetGroupType();

	//
	// string Delimiter (0...1)
	//
	static int GetDelimiterMinCount();
	static int GetDelimiterMaxCount();
	int GetDelimiterCount();
	bool HasDelimiter();
	void AddDelimiter(CSchemaString Delimiter);
	void InsertDelimiterAt(CSchemaString Delimiter, int nIndex);
	void ReplaceDelimiterAt(CSchemaString Delimiter, int nIndex);
	CSchemaString GetDelimiterAt(int nIndex);
	CSchemaString GetDelimiter();
	void RemoveDelimiterAt(int nIndex);
	void RemoveDelimiter();
};


class MCML_DECLSPECIFIER CSentenceType : public CNode
{
public:
	CSentenceType() : CNode() {}
	CSentenceType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSentenceType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSentenceType() {}
	static EGroupType GetGroupType();

	//
	// int Order (1...1)
	//
	static int GetOrderMinCount();
	static int GetOrderMaxCount();
	int GetOrderCount();
	bool HasOrder();
	void AddOrder(CSchemaInt Order);
	void InsertOrderAt(CSchemaInt Order, int nIndex);
	void ReplaceOrderAt(CSchemaInt Order, int nIndex);
	CSchemaInt GetOrderAt(int nIndex);
	CSchemaInt GetOrder();
	void RemoveOrderAt(int nIndex);
	void RemoveOrder();

	//
	// float Score (0...1)
	//
	static int GetScoreMinCount();
	static int GetScoreMaxCount();
	int GetScoreCount();
	bool HasScore();
	void AddScore(CSchemaFloat Score);
	void InsertScoreAt(CSchemaFloat Score, int nIndex);
	void ReplaceScoreAt(CSchemaFloat Score, int nIndex);
	CSchemaFloat GetScoreAt(int nIndex);
	CSchemaFloat GetScore();
	void RemoveScoreAt(int nIndex);
	void RemoveScore();

	//
	// dateTime TimeStamp (0...1)
	//
	static int GetTimeStampMinCount();
	static int GetTimeStampMaxCount();
	int GetTimeStampCount();
	bool HasTimeStamp();
	void AddTimeStamp(CSchemaDateTime TimeStamp);
	void InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	void ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	CSchemaDateTime GetTimeStampAt(int nIndex);
	CSchemaDateTime GetTimeStamp();
	void RemoveTimeStampAt(int nIndex);
	void RemoveTimeStamp();

	//
	// integer BeginTime (0...1)
	//
	static int GetBeginTimeMinCount();
	static int GetBeginTimeMaxCount();
	int GetBeginTimeCount();
	bool HasBeginTime();
	void AddBeginTime(CSchemaInteger BeginTime);
	void InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	void ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	CSchemaInteger GetBeginTimeAt(int nIndex);
	CSchemaInteger GetBeginTime();
	void RemoveBeginTimeAt(int nIndex);
	void RemoveBeginTime();

	//
	// integer EndTime (0...1)
	//
	static int GetEndTimeMinCount();
	static int GetEndTimeMaxCount();
	int GetEndTimeCount();
	bool HasEndTime();
	void AddEndTime(CSchemaInteger EndTime);
	void InsertEndTimeAt(CSchemaInteger EndTime, int nIndex);
	void ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex);
	CSchemaInteger GetEndTimeAt(int nIndex);
	CSchemaInteger GetEndTime();
	void RemoveEndTimeAt(int nIndex);
	void RemoveEndTime();

	//
	// string Function (0...unbounded)
	//
	static int GetFunctionMinCount();
	static int GetFunctionMaxCount();
	int GetFunctionCount();
	bool HasFunction();
	void AddFunction(CSchemaString Function);
	void InsertFunctionAt(CSchemaString Function, int nIndex);
	void ReplaceFunctionAt(CSchemaString Function, int nIndex);
	CSchemaString GetFunctionAt(int nIndex);
	CSchemaString GetFunction();
	void RemoveFunctionAt(int nIndex);
	void RemoveFunction();

	//
	// Surface Surface (1...unbounded)
	//
	static int GetSurfaceMinCount();
	static int GetSurfaceMaxCount();
	int GetSurfaceCount();
	bool HasSurface();
	void AddSurface(CSurfaceType2& Surface);
	void InsertSurfaceAt(CSurfaceType2& Surface, int nIndex);
	void ReplaceSurfaceAt(CSurfaceType2& Surface, int nIndex);
	CSurfaceType2 GetSurfaceAt(int nIndex);
	CSurfaceType2 GetSurface();
	void RemoveSurfaceAt(int nIndex);
	void RemoveSurface();

	//
	// Chunk Chunk (0...unbounded)
	//
	static int GetChunkMinCount();
	static int GetChunkMaxCount();
	int GetChunkCount();
	bool HasChunk();
	void AddChunk(CChunkType& Chunk);
	void InsertChunkAt(CChunkType& Chunk, int nIndex);
	void ReplaceChunkAt(CChunkType& Chunk, int nIndex);
	CChunkType GetChunkAt(int nIndex);
	CChunkType GetChunk();
	void RemoveChunkAt(int nIndex);
	void RemoveChunk();
};


class MCML_DECLSPECIFIER CSentenceSequenceType : public CNode
{
public:
	CSentenceSequenceType() : CNode() {}
	CSentenceSequenceType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSentenceSequenceType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSentenceSequenceType() {}
	static EGroupType GetGroupType();

	//
	// int Order (1...1)
	//
	static int GetOrderMinCount();
	static int GetOrderMaxCount();
	int GetOrderCount();
	bool HasOrder();
	void AddOrder(CSchemaInt Order);
	void InsertOrderAt(CSchemaInt Order, int nIndex);
	void ReplaceOrderAt(CSchemaInt Order, int nIndex);
	CSchemaInt GetOrderAt(int nIndex);
	CSchemaInt GetOrder();
	void RemoveOrderAt(int nIndex);
	void RemoveOrder();

	//
	// float Score (0...1)
	//
	static int GetScoreMinCount();
	static int GetScoreMaxCount();
	int GetScoreCount();
	bool HasScore();
	void AddScore(CSchemaFloat Score);
	void InsertScoreAt(CSchemaFloat Score, int nIndex);
	void ReplaceScoreAt(CSchemaFloat Score, int nIndex);
	CSchemaFloat GetScoreAt(int nIndex);
	CSchemaFloat GetScore();
	void RemoveScoreAt(int nIndex);
	void RemoveScore();

	//
	// dateTime TimeStamp (0...1)
	//
	static int GetTimeStampMinCount();
	static int GetTimeStampMaxCount();
	int GetTimeStampCount();
	bool HasTimeStamp();
	void AddTimeStamp(CSchemaDateTime TimeStamp);
	void InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	void ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	CSchemaDateTime GetTimeStampAt(int nIndex);
	CSchemaDateTime GetTimeStamp();
	void RemoveTimeStampAt(int nIndex);
	void RemoveTimeStamp();

	//
	// integer BeginTime (0...1)
	//
	static int GetBeginTimeMinCount();
	static int GetBeginTimeMaxCount();
	int GetBeginTimeCount();
	bool HasBeginTime();
	void AddBeginTime(CSchemaInteger BeginTime);
	void InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	void ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	CSchemaInteger GetBeginTimeAt(int nIndex);
	CSchemaInteger GetBeginTime();
	void RemoveBeginTimeAt(int nIndex);
	void RemoveBeginTime();

	//
	// integer EndTime (0...1)
	//
	static int GetEndTimeMinCount();
	static int GetEndTimeMaxCount();
	int GetEndTimeCount();
	bool HasEndTime();
	void AddEndTime(CSchemaInteger EndTime);
	void InsertEndTimeAt(CSchemaInteger EndTime, int nIndex);
	void ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex);
	CSchemaInteger GetEndTimeAt(int nIndex);
	CSchemaInteger GetEndTime();
	void RemoveEndTimeAt(int nIndex);
	void RemoveEndTime();

	//
	// int N-bestRank (0...1)
	//
	static int GetN_bestRankMinCount();
	static int GetN_bestRankMaxCount();
	int GetN_bestRankCount();
	bool HasN_bestRank();
	void AddN_bestRank(CSchemaInt N_bestRank);
	void InsertN_bestRankAt(CSchemaInt N_bestRank, int nIndex);
	void ReplaceN_bestRankAt(CSchemaInt N_bestRank, int nIndex);
	CSchemaInt GetN_bestRankAt(int nIndex);
	CSchemaInt GetN_bestRank();
	void RemoveN_bestRankAt(int nIndex);
	void RemoveN_bestRank();

	//
	// Sentence Sentence (1...unbounded)
	//
	static int GetSentenceMinCount();
	static int GetSentenceMaxCount();
	int GetSentenceCount();
	bool HasSentence();
	void AddSentence(CSentenceType& Sentence);
	void InsertSentenceAt(CSentenceType& Sentence, int nIndex);
	void ReplaceSentenceAt(CSentenceType& Sentence, int nIndex);
	CSentenceType GetSentenceAt(int nIndex);
	CSentenceType GetSentence();
	void RemoveSentenceAt(int nIndex);
	void RemoveSentence();
};


class MCML_DECLSPECIFIER CServerType : public CNode
{
public:
	CServerType() : CNode() {}
	CServerType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CServerType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CServerType() {}
	static EGroupType GetGroupType();

	//
	// Request Request (1...unbounded)
	//
	static int GetRequestMinCount();
	static int GetRequestMaxCount();
	int GetRequestCount();
	bool HasRequest();
	void AddRequest(CRequestType& Request);
	void InsertRequestAt(CRequestType& Request, int nIndex);
	void ReplaceRequestAt(CRequestType& Request, int nIndex);
	CRequestType GetRequestAt(int nIndex);
	CRequestType GetRequest();
	void RemoveRequestAt(int nIndex);
	void RemoveRequest();

	//
	// Response Response (1...1)
	//
	static int GetResponseMinCount();
	static int GetResponseMaxCount();
	int GetResponseCount();
	bool HasResponse();
	void AddResponse(CResponseType& Response);
	void InsertResponseAt(CResponseType& Response, int nIndex);
	void ReplaceResponseAt(CResponseType& Response, int nIndex);
	CResponseType GetResponseAt(int nIndex);
	CResponseType GetResponse();
	void RemoveResponseAt(int nIndex);
	void RemoveResponse();
};


class MCML_DECLSPECIFIER CSignalType : public CNode
{
public:
	CSignalType() : CNode() {}
	CSignalType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSignalType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSignalType() {}
	static EGroupType GetGroupType();

	//
	// string AudioFormat (1...1)
	//
	static int GetAudioFormatMinCount();
	static int GetAudioFormatMaxCount();
	int GetAudioFormatCount();
	bool HasAudioFormat();
	void AddAudioFormat(CSchemaString AudioFormat);
	void InsertAudioFormatAt(CSchemaString AudioFormat, int nIndex);
	void ReplaceAudioFormatAt(CSchemaString AudioFormat, int nIndex);
	CSchemaString GetAudioFormatAt(int nIndex);
	CSchemaString GetAudioFormat();
	void RemoveAudioFormatAt(int nIndex);
	void RemoveAudioFormat();

	//
	// int SamplingRate (1...1)
	//
	static int GetSamplingRateMinCount();
	static int GetSamplingRateMaxCount();
	int GetSamplingRateCount();
	bool HasSamplingRate();
	void AddSamplingRate(CSchemaInt SamplingRate);
	void InsertSamplingRateAt(CSchemaInt SamplingRate, int nIndex);
	void ReplaceSamplingRateAt(CSchemaInt SamplingRate, int nIndex);
	CSchemaInt GetSamplingRateAt(int nIndex);
	CSchemaInt GetSamplingRate();
	void RemoveSamplingRateAt(int nIndex);
	void RemoveSamplingRate();

	//
	// int BitRate (1...1)
	//
	static int GetBitRateMinCount();
	static int GetBitRateMaxCount();
	int GetBitRateCount();
	bool HasBitRate();
	void AddBitRate(CSchemaInt BitRate);
	void InsertBitRateAt(CSchemaInt BitRate, int nIndex);
	void ReplaceBitRateAt(CSchemaInt BitRate, int nIndex);
	CSchemaInt GetBitRateAt(int nIndex);
	CSchemaInt GetBitRate();
	void RemoveBitRateAt(int nIndex);
	void RemoveBitRate();

	//
	// string Endian (1...1)
	//
	static int GetEndianMinCount();
	static int GetEndianMaxCount();
	int GetEndianCount();
	bool HasEndian();
	void AddEndian(CSchemaString Endian);
	void InsertEndianAt(CSchemaString Endian, int nIndex);
	void ReplaceEndianAt(CSchemaString Endian, int nIndex);
	CSchemaString GetEndianAt(int nIndex);
	CSchemaString GetEndian();
	void RemoveEndianAt(int nIndex);
	void RemoveEndian();

	//
	// int ChannelQty (1...1)
	//
	static int GetChannelQtyMinCount();
	static int GetChannelQtyMaxCount();
	int GetChannelQtyCount();
	bool HasChannelQty();
	void AddChannelQty(CSchemaInt ChannelQty);
	void InsertChannelQtyAt(CSchemaInt ChannelQty, int nIndex);
	void ReplaceChannelQtyAt(CSchemaInt ChannelQty, int nIndex);
	CSchemaInt GetChannelQtyAt(int nIndex);
	CSchemaInt GetChannelQty();
	void RemoveChannelQtyAt(int nIndex);
	void RemoveChannelQty();

	//
	// string ValueType (1...1)
	//
	static int GetValueTypeMinCount();
	static int GetValueTypeMaxCount();
	int GetValueTypeCount();
	bool HasValueType();
	void AddValueType(CSchemaString ValueType);
	void InsertValueTypeAt(CSchemaString ValueType, int nIndex);
	void ReplaceValueTypeAt(CSchemaString ValueType, int nIndex);
	CSchemaString GetValueTypeAt(int nIndex);
	CSchemaString GetValueType();
	void RemoveValueTypeAt(int nIndex);
	void RemoveValueType();
};


class MCML_DECLSPECIFIER CSurfaceType3 : public CNode
{
public:
	CSurfaceType3() : CNode() {}
	CSurfaceType3(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CSurfaceType3(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CSurfaceType3() {}
	static EGroupType GetGroupType();

	//
	// int Order (1...1)
	//
	static int GetOrderMinCount();
	static int GetOrderMaxCount();
	int GetOrderCount();
	bool HasOrder();
	void AddOrder(CSchemaInt Order);
	void InsertOrderAt(CSchemaInt Order, int nIndex);
	void ReplaceOrderAt(CSchemaInt Order, int nIndex);
	CSchemaInt GetOrderAt(int nIndex);
	CSchemaInt GetOrder();
	void RemoveOrderAt(int nIndex);
	void RemoveOrder();

	//
	// float Score (0...1)
	//
	static int GetScoreMinCount();
	static int GetScoreMaxCount();
	int GetScoreCount();
	bool HasScore();
	void AddScore(CSchemaFloat Score);
	void InsertScoreAt(CSchemaFloat Score, int nIndex);
	void ReplaceScoreAt(CSchemaFloat Score, int nIndex);
	CSchemaFloat GetScoreAt(int nIndex);
	CSchemaFloat GetScore();
	void RemoveScoreAt(int nIndex);
	void RemoveScore();

	//
	// dateTime TimeStamp (0...1)
	//
	static int GetTimeStampMinCount();
	static int GetTimeStampMaxCount();
	int GetTimeStampCount();
	bool HasTimeStamp();
	void AddTimeStamp(CSchemaDateTime TimeStamp);
	void InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	void ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex);
	CSchemaDateTime GetTimeStampAt(int nIndex);
	CSchemaDateTime GetTimeStamp();
	void RemoveTimeStampAt(int nIndex);
	void RemoveTimeStamp();

	//
	// integer BeginTime (0...1)
	//
	static int GetBeginTimeMinCount();
	static int GetBeginTimeMaxCount();
	int GetBeginTimeCount();
	bool HasBeginTime();
	void AddBeginTime(CSchemaInteger BeginTime);
	void InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	void ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex);
	CSchemaInteger GetBeginTimeAt(int nIndex);
	CSchemaInteger GetBeginTime();
	void RemoveBeginTimeAt(int nIndex);
	void RemoveBeginTime();

	//
	// integer EndTime (0...1)
	//
	static int GetEndTimeMinCount();
	static int GetEndTimeMaxCount();
	int GetEndTimeCount();
	bool HasEndTime();
	void AddEndTime(CSchemaInteger EndTime);
	void InsertEndTimeAt(CSchemaInteger EndTime, int nIndex);
	void ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex);
	CSchemaInteger GetEndTimeAt(int nIndex);
	CSchemaInteger GetEndTime();
	void RemoveEndTimeAt(int nIndex);
	void RemoveEndTime();
};


class MCML_DECLSPECIFIER CHypothesisFormatType : public CNode
{
public:
	CHypothesisFormatType() : CNode() {}
	CHypothesisFormatType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CHypothesisFormatType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CHypothesisFormatType() {}
	static EGroupType GetGroupType();

	//
	// string NofN-best (1...1)
	//
	static int GetNofN_bestMinCount();
	static int GetNofN_bestMaxCount();
	int GetNofN_bestCount();
	bool HasNofN_best();
	void AddNofN_best(CSchemaString NofN_best);
	void InsertNofN_bestAt(CSchemaString NofN_best, int nIndex);
	void ReplaceNofN_bestAt(CSchemaString NofN_best, int nIndex);
	CSchemaString GetNofN_bestAt(int nIndex);
	CSchemaString GetNofN_best();
	void RemoveNofN_bestAt(int nIndex);
	void RemoveNofN_best();
};


class MCML_DECLSPECIFIER COptionType : public CNode
{
public:
	COptionType() : CNode() {}
	COptionType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	COptionType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~COptionType() {}
	static EGroupType GetGroupType();

	//
	// string Key (1...1)
	//
	static int GetKeyMinCount();
	static int GetKeyMaxCount();
	int GetKeyCount();
	bool HasKey();
	void AddKey(CSchemaString Key);
	void InsertKeyAt(CSchemaString Key, int nIndex);
	void ReplaceKeyAt(CSchemaString Key, int nIndex);
	CSchemaString GetKeyAt(int nIndex);
	CSchemaString GetKey();
	void RemoveKeyAt(int nIndex);
	void RemoveKey();

	//
	// string Value (1...1)
	//
	static int GetValueMinCount();
	static int GetValueMaxCount();
	int GetValueCount();
	bool HasValue();
	void AddValue(CSchemaString Value);
	void InsertValueAt(CSchemaString Value, int nIndex);
	void ReplaceValueAt(CSchemaString Value, int nIndex);
	CSchemaString GetValueAt(int nIndex);
	CSchemaString GetValue();
	void RemoveValueAt(int nIndex);
	void RemoveValue();
};


class MCML_DECLSPECIFIER CTargetOutputType : public CNode
{
public:
	CTargetOutputType() : CNode() {}
	CTargetOutputType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CTargetOutputType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CTargetOutputType() {}
	static EGroupType GetGroupType();

	//
	// HypothesisFormat HypothesisFormat (0...1)
	//
	static int GetHypothesisFormatMinCount();
	static int GetHypothesisFormatMaxCount();
	int GetHypothesisFormatCount();
	bool HasHypothesisFormat();
	void AddHypothesisFormat(CHypothesisFormatType& HypothesisFormat);
	void InsertHypothesisFormatAt(CHypothesisFormatType& HypothesisFormat, int nIndex);
	void ReplaceHypothesisFormatAt(CHypothesisFormatType& HypothesisFormat, int nIndex);
	CHypothesisFormatType GetHypothesisFormatAt(int nIndex);
	CHypothesisFormatType GetHypothesisFormat();
	void RemoveHypothesisFormatAt(int nIndex);
	void RemoveHypothesisFormat();

	//
	// LanguageType LanguageType (0...1)
	//
	static int GetLanguageTypeMinCount();
	static int GetLanguageTypeMaxCount();
	int GetLanguageTypeCount();
	bool HasLanguageType();
	void AddLanguageType(CLanguageTypeType& LanguageType);
	void InsertLanguageTypeAt(CLanguageTypeType& LanguageType, int nIndex);
	void ReplaceLanguageTypeAt(CLanguageTypeType& LanguageType, int nIndex);
	CLanguageTypeType GetLanguageTypeAt(int nIndex);
	CLanguageTypeType GetLanguageType();
	void RemoveLanguageTypeAt(int nIndex);
	void RemoveLanguageType();

	//
	// Option Option (0...unbounded)
	//
	static int GetOptionMinCount();
	static int GetOptionMaxCount();
	int GetOptionCount();
	bool HasOption();
	void AddOption(COptionType& Option);
	void InsertOptionAt(COptionType& Option, int nIndex);
	void ReplaceOptionAt(COptionType& Option, int nIndex);
	COptionType GetOptionAt(int nIndex);
	COptionType GetOption();
	void RemoveOptionAt(int nIndex);
	void RemoveOption();
};


class MCML_DECLSPECIFIER CTextType : public CNode
{
public:
	CTextType() : CNode() {}
	CTextType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CTextType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CTextType() {}
	static EGroupType GetGroupType();

	//
	// int ChannelID (1...1)
	//
	static int GetChannelIDMinCount();
	static int GetChannelIDMaxCount();
	int GetChannelIDCount();
	bool HasChannelID();
	void AddChannelID(CSchemaInt ChannelID);
	void InsertChannelIDAt(CSchemaInt ChannelID, int nIndex);
	void ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex);
	CSchemaInt GetChannelIDAt(int nIndex);
	CSchemaInt GetChannelID();
	void RemoveChannelIDAt(int nIndex);
	void RemoveChannelID();

	//
	// dateTime BeginTimestamp (1...1)
	//
	static int GetBeginTimestampMinCount();
	static int GetBeginTimestampMaxCount();
	int GetBeginTimestampCount();
	bool HasBeginTimestamp();
	void AddBeginTimestamp(CSchemaDateTime BeginTimestamp);
	void InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	void ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	CSchemaDateTime GetBeginTimestampAt(int nIndex);
	CSchemaDateTime GetBeginTimestamp();
	void RemoveBeginTimestampAt(int nIndex);
	void RemoveBeginTimestamp();

	//
	// dateTime EndTimestamp (1...1)
	//
	static int GetEndTimestampMinCount();
	static int GetEndTimestampMaxCount();
	int GetEndTimestampCount();
	bool HasEndTimestamp();
	void AddEndTimestamp(CSchemaDateTime EndTimestamp);
	void InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	void ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	CSchemaDateTime GetEndTimestampAt(int nIndex);
	CSchemaDateTime GetEndTimestamp();
	void RemoveEndTimestampAt(int nIndex);
	void RemoveEndTimestamp();

	//
	// dateTime EndPoint (0...1)
	//
	static int GetEndPointMinCount();
	static int GetEndPointMaxCount();
	int GetEndPointCount();
	bool HasEndPoint();
	void AddEndPoint(CSchemaDateTime EndPoint);
	void InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	void ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	CSchemaDateTime GetEndPointAt(int nIndex);
	CSchemaDateTime GetEndPoint();
	void RemoveEndPointAt(int nIndex);
	void RemoveEndPoint();

	//
	// ModelType ModelType (0...1)
	//
	static int GetModelTypeMinCount();
	static int GetModelTypeMaxCount();
	int GetModelTypeCount();
	bool HasModelType();
	void AddModelType(CModelTypeType& ModelType);
	void InsertModelTypeAt(CModelTypeType& ModelType, int nIndex);
	void ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex);
	CModelTypeType GetModelTypeAt(int nIndex);
	CModelTypeType GetModelType();
	void RemoveModelTypeAt(int nIndex);
	void RemoveModelType();

	//
	// SentenceSequence SentenceSequence (1...unbounded)
	//
	static int GetSentenceSequenceMinCount();
	static int GetSentenceSequenceMaxCount();
	int GetSentenceSequenceCount();
	bool HasSentenceSequence();
	void AddSentenceSequence(CSentenceSequenceType& SentenceSequence);
	void InsertSentenceSequenceAt(CSentenceSequenceType& SentenceSequence, int nIndex);
	void ReplaceSentenceSequenceAt(CSentenceSequenceType& SentenceSequence, int nIndex);
	CSentenceSequenceType GetSentenceSequenceAt(int nIndex);
	CSentenceSequenceType GetSentenceSequence();
	void RemoveSentenceSequenceAt(int nIndex);
	void RemoveSentenceSequence();
};


class MCML_DECLSPECIFIER CTransmitterType : public CNode
{
public:
	CTransmitterType() : CNode() {}
	CTransmitterType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CTransmitterType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CTransmitterType() {}
	static EGroupType GetGroupType();

	//
	// Device Device (1...1)
	//
	static int GetDeviceMinCount();
	static int GetDeviceMaxCount();
	int GetDeviceCount();
	bool HasDevice();
	void AddDevice(CDeviceType& Device);
	void InsertDeviceAt(CDeviceType& Device, int nIndex);
	void ReplaceDeviceAt(CDeviceType& Device, int nIndex);
	CDeviceType GetDeviceAt(int nIndex);
	CDeviceType GetDevice();
	void RemoveDeviceAt(int nIndex);
	void RemoveDevice();

	//
	// UserProfile UserProfile (1...unbounded)
	//
	static int GetUserProfileMinCount();
	static int GetUserProfileMaxCount();
	int GetUserProfileCount();
	bool HasUserProfile();
	void AddUserProfile(CUserProfileType& UserProfile);
	void InsertUserProfileAt(CUserProfileType& UserProfile, int nIndex);
	void ReplaceUserProfileAt(CUserProfileType& UserProfile, int nIndex);
	CUserProfileType GetUserProfileAt(int nIndex);
	CUserProfileType GetUserProfile();
	void RemoveUserProfileAt(int nIndex);
	void RemoveUserProfile();
};


class MCML_DECLSPECIFIER CUserType : public CNode
{
public:
	CUserType() : CNode() {}
	CUserType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CUserType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CUserType() {}
	static EGroupType GetGroupType();

	//
	// Transmitter Transmitter (1...1)
	//
	static int GetTransmitterMinCount();
	static int GetTransmitterMaxCount();
	int GetTransmitterCount();
	bool HasTransmitter();
	void AddTransmitter(CTransmitterType& Transmitter);
	void InsertTransmitterAt(CTransmitterType& Transmitter, int nIndex);
	void ReplaceTransmitterAt(CTransmitterType& Transmitter, int nIndex);
	CTransmitterType GetTransmitterAt(int nIndex);
	CTransmitterType GetTransmitter();
	void RemoveTransmitterAt(int nIndex);
	void RemoveTransmitter();

	//
	// Receiver Receiver (1...unbounded)
	//
	static int GetReceiverMinCount();
	static int GetReceiverMaxCount();
	int GetReceiverCount();
	bool HasReceiver();
	void AddReceiver(CReceiverType& Receiver);
	void InsertReceiverAt(CReceiverType& Receiver, int nIndex);
	void ReplaceReceiverAt(CReceiverType& Receiver, int nIndex);
	CReceiverType GetReceiverAt(int nIndex);
	CReceiverType GetReceiver();
	void RemoveReceiverAt(int nIndex);
	void RemoveReceiver();
};


class MCML_DECLSPECIFIER CUserProfileType : public CNode
{
public:
	CUserProfileType() : CNode() {}
	CUserProfileType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CUserProfileType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CUserProfileType() {}
	static EGroupType GetGroupType();

	//
	// string ID (1...1)
	//
	static int GetIDMinCount();
	static int GetIDMaxCount();
	int GetIDCount();
	bool HasID();
	void AddID(CSchemaString ID);
	void InsertIDAt(CSchemaString ID, int nIndex);
	void ReplaceIDAt(CSchemaString ID, int nIndex);
	CSchemaString GetIDAt(int nIndex);
	CSchemaString GetID();
	void RemoveIDAt(int nIndex);
	void RemoveID();

	//
	// int Age (0...1)
	//
	static int GetAgeMinCount();
	static int GetAgeMaxCount();
	int GetAgeCount();
	bool HasAge();
	void AddAge(CSchemaInt Age);
	void InsertAgeAt(CSchemaInt Age, int nIndex);
	void ReplaceAgeAt(CSchemaInt Age, int nIndex);
	CSchemaInt GetAgeAt(int nIndex);
	CSchemaInt GetAge();
	void RemoveAgeAt(int nIndex);
	void RemoveAge();

	//
	// string Gender (0...1)
	//
	static int GetGenderMinCount();
	static int GetGenderMaxCount();
	int GetGenderCount();
	bool HasGender();
	void AddGender(CSchemaString Gender);
	void InsertGenderAt(CSchemaString Gender, int nIndex);
	void ReplaceGenderAt(CSchemaString Gender, int nIndex);
	CSchemaString GetGenderAt(int nIndex);
	CSchemaString GetGender();
	void RemoveGenderAt(int nIndex);
	void RemoveGender();

	//
	// string Email (0...1)
	//
	static int GetEmailMinCount();
	static int GetEmailMaxCount();
	int GetEmailCount();
	bool HasEmail();
	void AddEmail(CSchemaString Email);
	void InsertEmailAt(CSchemaString Email, int nIndex);
	void ReplaceEmailAt(CSchemaString Email, int nIndex);
	CSchemaString GetEmailAt(int nIndex);
	CSchemaString GetEmail();
	void RemoveEmailAt(int nIndex);
	void RemoveEmail();

	//
	// string Password (0...1)
	//
	static int GetPasswordMinCount();
	static int GetPasswordMaxCount();
	int GetPasswordCount();
	bool HasPassword();
	void AddPassword(CSchemaString Password);
	void InsertPasswordAt(CSchemaString Password, int nIndex);
	void ReplacePasswordAt(CSchemaString Password, int nIndex);
	CSchemaString GetPasswordAt(int nIndex);
	CSchemaString GetPassword();
	void RemovePasswordAt(int nIndex);
	void RemovePassword();

	//
	// string AccessCode (0...1)
	//
	static int GetAccessCodeMinCount();
	static int GetAccessCodeMaxCount();
	int GetAccessCodeCount();
	bool HasAccessCode();
	void AddAccessCode(CSchemaString AccessCode);
	void InsertAccessCodeAt(CSchemaString AccessCode, int nIndex);
	void ReplaceAccessCodeAt(CSchemaString AccessCode, int nIndex);
	CSchemaString GetAccessCodeAt(int nIndex);
	CSchemaString GetAccessCode();
	void RemoveAccessCodeAt(int nIndex);
	void RemoveAccessCode();
};


class MCML_DECLSPECIFIER CVideoType : public CNode
{
public:
	CVideoType() : CNode() {}
	CVideoType(xmlNodePtr pThisNode) : CNode(pThisNode) {}
	CVideoType(xmlDocPtr pDoc) : CNode(pDoc) {}
	virtual ~CVideoType() {}
	static EGroupType GetGroupType();

	//
	// int ChannelID (1...1)
	//
	static int GetChannelIDMinCount();
	static int GetChannelIDMaxCount();
	int GetChannelIDCount();
	bool HasChannelID();
	void AddChannelID(CSchemaInt ChannelID);
	void InsertChannelIDAt(CSchemaInt ChannelID, int nIndex);
	void ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex);
	CSchemaInt GetChannelIDAt(int nIndex);
	CSchemaInt GetChannelID();
	void RemoveChannelIDAt(int nIndex);
	void RemoveChannelID();

	//
	// dateTime BeginTimestamp (1...1)
	//
	static int GetBeginTimestampMinCount();
	static int GetBeginTimestampMaxCount();
	int GetBeginTimestampCount();
	bool HasBeginTimestamp();
	void AddBeginTimestamp(CSchemaDateTime BeginTimestamp);
	void InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	void ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex);
	CSchemaDateTime GetBeginTimestampAt(int nIndex);
	CSchemaDateTime GetBeginTimestamp();
	void RemoveBeginTimestampAt(int nIndex);
	void RemoveBeginTimestamp();

	//
	// dateTime EndTimestamp (1...1)
	//
	static int GetEndTimestampMinCount();
	static int GetEndTimestampMaxCount();
	int GetEndTimestampCount();
	bool HasEndTimestamp();
	void AddEndTimestamp(CSchemaDateTime EndTimestamp);
	void InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	void ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex);
	CSchemaDateTime GetEndTimestampAt(int nIndex);
	CSchemaDateTime GetEndTimestamp();
	void RemoveEndTimestampAt(int nIndex);
	void RemoveEndTimestamp();

	//
	// dateTime EndPoint (0...1)
	//
	static int GetEndPointMinCount();
	static int GetEndPointMaxCount();
	int GetEndPointCount();
	bool HasEndPoint();
	void AddEndPoint(CSchemaDateTime EndPoint);
	void InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	void ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex);
	CSchemaDateTime GetEndPointAt(int nIndex);
	CSchemaDateTime GetEndPoint();
	void RemoveEndPointAt(int nIndex);
	void RemoveEndPoint();

	//
	// ModelType ModelType (0...1)
	//
	static int GetModelTypeMinCount();
	static int GetModelTypeMaxCount();
	int GetModelTypeCount();
	bool HasModelType();
	void AddModelType(CModelTypeType& ModelType);
	void InsertModelTypeAt(CModelTypeType& ModelType, int nIndex);
	void ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex);
	CModelTypeType GetModelTypeAt(int nIndex);
	CModelTypeType GetModelType();
	void RemoveModelTypeAt(int nIndex);
	void RemoveModelType();
};


} // namespace mcml

#endif // MCML_H_INCLUDED

