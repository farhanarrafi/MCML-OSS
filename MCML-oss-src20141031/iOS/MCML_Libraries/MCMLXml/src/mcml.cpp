////////////////////////////////////////////////////////////////////////
//
// MCML.cpp
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#include "mcml.h"

namespace mcml{

////////////////////////////////////////////////////////////////////////
//
// class CAttachedBinaryType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CAttachedBinaryType::GetGroupType()
{
	return eSequence;
}

int CAttachedBinaryType::GetDataIDMinCount()
{
	return 1;
}


int CAttachedBinaryType::GetDataIDMaxCount()
{
	return 1;
}


int CAttachedBinaryType::GetDataIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("DataID"));
}


bool CAttachedBinaryType::HasDataID()
{
	return InternalHasChild(Attribute, _T(""), _T("DataID"));
}


void CAttachedBinaryType::AddDataID(CSchemaString DataID)
{
	InternalAppend(Attribute, _T(""), _T("DataID"), DataID);
}


void CAttachedBinaryType::InsertDataIDAt(CSchemaString DataID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("DataID"), nIndex, DataID);
}


void CAttachedBinaryType::ReplaceDataIDAt(CSchemaString DataID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("DataID"), nIndex, DataID);
}



CSchemaString CAttachedBinaryType::GetDataIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DataID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DataID"), nIndex));
}



CSchemaString CAttachedBinaryType::GetDataID()
{
	return GetDataIDAt(0);
}


void CAttachedBinaryType::RemoveDataIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("DataID"), nIndex);
}


void CAttachedBinaryType::RemoveDataID()
{
	while (HasDataID())
		RemoveDataIDAt(0);
}

int CAttachedBinaryType::GetDataTypeMinCount()
{
	return 0;
}


int CAttachedBinaryType::GetDataTypeMaxCount()
{
	return 1;
}


int CAttachedBinaryType::GetDataTypeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("DataType"));
}


bool CAttachedBinaryType::HasDataType()
{
	return InternalHasChild(Attribute, _T(""), _T("DataType"));
}


void CAttachedBinaryType::AddDataType(CSchemaString DataType)
{
	InternalAppend(Attribute, _T(""), _T("DataType"), DataType);
}


void CAttachedBinaryType::InsertDataTypeAt(CSchemaString DataType, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("DataType"), nIndex, DataType);
}


void CAttachedBinaryType::ReplaceDataTypeAt(CSchemaString DataType, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("DataType"), nIndex, DataType);
}



CSchemaString CAttachedBinaryType::GetDataTypeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DataType"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DataType"), nIndex));
}



CSchemaString CAttachedBinaryType::GetDataType()
{
	return GetDataTypeAt(0);
}


void CAttachedBinaryType::RemoveDataTypeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("DataType"), nIndex);
}


void CAttachedBinaryType::RemoveDataType()
{
	while (HasDataType())
		RemoveDataTypeAt(0);
}

int CAttachedBinaryType::GetChannelIDMinCount()
{
	return 1;
}


int CAttachedBinaryType::GetChannelIDMaxCount()
{
	return 1;
}


int CAttachedBinaryType::GetChannelIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ChannelID"));
}


bool CAttachedBinaryType::HasChannelID()
{
	return InternalHasChild(Attribute, _T(""), _T("ChannelID"));
}


void CAttachedBinaryType::AddChannelID(CSchemaInt ChannelID)
{
	InternalAppend(Attribute, _T(""), _T("ChannelID"), ChannelID);
}


void CAttachedBinaryType::InsertChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}


void CAttachedBinaryType::ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}



CSchemaInt CAttachedBinaryType::GetChannelIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex));
}



CSchemaInt CAttachedBinaryType::GetChannelID()
{
	return GetChannelIDAt(0);
}


void CAttachedBinaryType::RemoveChannelIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ChannelID"), nIndex);
}


void CAttachedBinaryType::RemoveChannelID()
{
	while (HasChannelID())
		RemoveChannelIDAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CFeatureType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CFeatureType::GetGroupType()
{
	return eSequence;
}

////////////////////////////////////////////////////////////////////////
//
// class CAudioType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CAudioType::GetGroupType()
{
	return eSequence;
}

int CAudioType::GetChannelIDMinCount()
{
	return 1;
}


int CAudioType::GetChannelIDMaxCount()
{
	return 1;
}


int CAudioType::GetChannelIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ChannelID"));
}


bool CAudioType::HasChannelID()
{
	return InternalHasChild(Attribute, _T(""), _T("ChannelID"));
}


void CAudioType::AddChannelID(CSchemaInt ChannelID)
{
	InternalAppend(Attribute, _T(""), _T("ChannelID"), ChannelID);
}


void CAudioType::InsertChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}


void CAudioType::ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}



CSchemaInt CAudioType::GetChannelIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex));
}



CSchemaInt CAudioType::GetChannelID()
{
	return GetChannelIDAt(0);
}


void CAudioType::RemoveChannelIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ChannelID"), nIndex);
}


void CAudioType::RemoveChannelID()
{
	while (HasChannelID())
		RemoveChannelIDAt(0);
}

int CAudioType::GetBeginTimestampMinCount()
{
	return 1;
}


int CAudioType::GetBeginTimestampMaxCount()
{
	return 1;
}


int CAudioType::GetBeginTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTimestamp"));
}


bool CAudioType::HasBeginTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTimestamp"));
}


void CAudioType::AddBeginTimestamp(CSchemaDateTime BeginTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("BeginTimestamp"), BeginTimestamp);
}


void CAudioType::InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}


void CAudioType::ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}



CSchemaDateTime CAudioType::GetBeginTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex));
}



CSchemaDateTime CAudioType::GetBeginTimestamp()
{
	return GetBeginTimestampAt(0);
}


void CAudioType::RemoveBeginTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex);
}


void CAudioType::RemoveBeginTimestamp()
{
	while (HasBeginTimestamp())
		RemoveBeginTimestampAt(0);
}

int CAudioType::GetEndTimestampMinCount()
{
	return 1;
}


int CAudioType::GetEndTimestampMaxCount()
{
	return 1;
}


int CAudioType::GetEndTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTimestamp"));
}


bool CAudioType::HasEndTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTimestamp"));
}


void CAudioType::AddEndTimestamp(CSchemaDateTime EndTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("EndTimestamp"), EndTimestamp);
}


void CAudioType::InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}


void CAudioType::ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}



CSchemaDateTime CAudioType::GetEndTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex));
}



CSchemaDateTime CAudioType::GetEndTimestamp()
{
	return GetEndTimestampAt(0);
}


void CAudioType::RemoveEndTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTimestamp"), nIndex);
}


void CAudioType::RemoveEndTimestamp()
{
	while (HasEndTimestamp())
		RemoveEndTimestampAt(0);
}

int CAudioType::GetEndPointMinCount()
{
	return 0;
}


int CAudioType::GetEndPointMaxCount()
{
	return 1;
}


int CAudioType::GetEndPointCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndPoint"));
}


bool CAudioType::HasEndPoint()
{
	return InternalHasChild(Attribute, _T(""), _T("EndPoint"));
}


void CAudioType::AddEndPoint(CSchemaDateTime EndPoint)
{
	InternalAppend(Attribute, _T(""), _T("EndPoint"), EndPoint);
}


void CAudioType::InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}


void CAudioType::ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}



CSchemaDateTime CAudioType::GetEndPointAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex));
}



CSchemaDateTime CAudioType::GetEndPoint()
{
	return GetEndPointAt(0);
}


void CAudioType::RemoveEndPointAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndPoint"), nIndex);
}


void CAudioType::RemoveEndPoint()
{
	while (HasEndPoint())
		RemoveEndPointAt(0);
}

int CAudioType::GetModelTypeMinCount()
{
	return 0;
}


int CAudioType::GetModelTypeMaxCount()
{
	return 1;
}


int CAudioType::GetModelTypeCount()
{
	return ChildCountInternal(Element, _T(""), _T("ModelType"));
}


bool CAudioType::HasModelType()
{
	return InternalHasChild(Element, _T(""), _T("ModelType"));
}


void CAudioType::AddModelType(CModelTypeType& ModelType)
{
	InternalAppendNode(_T(""), _T("ModelType"), ModelType);
}


void CAudioType::InsertModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}


void CAudioType::ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}



CModelTypeType CAudioType::GetModelTypeAt(int nIndex)
{
	return CModelTypeType(InternalGetAt(Element, _T(""), _T("ModelType"), nIndex));
}



CModelTypeType CAudioType::GetModelType()
{
	return GetModelTypeAt(0);
}


void CAudioType::RemoveModelTypeAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("ModelType"), nIndex);
}


void CAudioType::RemoveModelType()
{
	while (HasModelType())
		RemoveModelTypeAt(0);
}

int CAudioType::GetSignalMinCount()
{
	return 1;
}


int CAudioType::GetSignalMaxCount()
{
	return INT_MAX;
}


int CAudioType::GetSignalCount()
{
	return ChildCountInternal(Element, _T(""), _T("Signal"));
}


bool CAudioType::HasSignal()
{
	return InternalHasChild(Element, _T(""), _T("Signal"));
}


void CAudioType::AddSignal(CSignalType& Signal)
{
	InternalAppendNode(_T(""), _T("Signal"), Signal);
}


void CAudioType::InsertSignalAt(CSignalType& Signal, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Signal"), nIndex, Signal);
}


void CAudioType::ReplaceSignalAt(CSignalType& Signal, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Signal"), nIndex, Signal);
}



CSignalType CAudioType::GetSignalAt(int nIndex)
{
	return CSignalType(InternalGetAt(Element, _T(""), _T("Signal"), nIndex));
}



CSignalType CAudioType::GetSignal()
{
	return GetSignalAt(0);
}


void CAudioType::RemoveSignalAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Signal"), nIndex);
}


void CAudioType::RemoveSignal()
{
	while (HasSignal())
		RemoveSignalAt(0);
}

int CAudioType::GetFeatureMinCount()
{
	return 0;
}


int CAudioType::GetFeatureMaxCount()
{
	return INT_MAX;
}


int CAudioType::GetFeatureCount()
{
	return ChildCountInternal(Element, _T(""), _T("Feature"));
}


bool CAudioType::HasFeature()
{
	return InternalHasChild(Element, _T(""), _T("Feature"));
}


void CAudioType::AddFeature(CFeatureType& Feature)
{
	InternalAppendNode(_T(""), _T("Feature"), Feature);
}


void CAudioType::InsertFeatureAt(CFeatureType& Feature, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Feature"), nIndex, Feature);
}


void CAudioType::ReplaceFeatureAt(CFeatureType& Feature, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Feature"), nIndex, Feature);
}



CFeatureType CAudioType::GetFeatureAt(int nIndex)
{
	return CFeatureType(InternalGetAt(Element, _T(""), _T("Feature"), nIndex));
}



CFeatureType CAudioType::GetFeature()
{
	return GetFeatureAt(0);
}


void CAudioType::RemoveFeatureAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Feature"), nIndex);
}


void CAudioType::RemoveFeature()
{
	while (HasFeature())
		RemoveFeatureAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSurfaceType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSurfaceType::GetGroupType()
{
	return eSequence;
}

int CSurfaceType::GetDictionaryIDMinCount()
{
	return 0;
}


int CSurfaceType::GetDictionaryIDMaxCount()
{
	return 1;
}


int CSurfaceType::GetDictionaryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("DictionaryID"));
}


bool CSurfaceType::HasDictionaryID()
{
	return InternalHasChild(Attribute, _T(""), _T("DictionaryID"));
}


void CSurfaceType::AddDictionaryID(CSchemaString DictionaryID)
{
	InternalAppend(Attribute, _T(""), _T("DictionaryID"), DictionaryID);
}


void CSurfaceType::InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}


void CSurfaceType::ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}



CSchemaString CSurfaceType::GetDictionaryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex));
}



CSchemaString CSurfaceType::GetDictionaryID()
{
	return GetDictionaryIDAt(0);
}


void CSurfaceType::RemoveDictionaryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("DictionaryID"), nIndex);
}


void CSurfaceType::RemoveDictionaryID()
{
	while (HasDictionaryID())
		RemoveDictionaryIDAt(0);
}

int CSurfaceType::GetEntryIDMinCount()
{
	return 0;
}


int CSurfaceType::GetEntryIDMaxCount()
{
	return 1;
}


int CSurfaceType::GetEntryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EntryID"));
}


bool CSurfaceType::HasEntryID()
{
	return InternalHasChild(Attribute, _T(""), _T("EntryID"));
}


void CSurfaceType::AddEntryID(CSchemaString EntryID)
{
	InternalAppend(Attribute, _T(""), _T("EntryID"), EntryID);
}


void CSurfaceType::InsertEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}


void CSurfaceType::ReplaceEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}



CSchemaString CSurfaceType::GetEntryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex));
}



CSchemaString CSurfaceType::GetEntryID()
{
	return GetEntryIDAt(0);
}


void CSurfaceType::RemoveEntryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EntryID"), nIndex);
}


void CSurfaceType::RemoveEntryID()
{
	while (HasEntryID())
		RemoveEntryIDAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CPOSType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CPOSType::GetGroupType()
{
	return eSequence;
}

int CPOSType::GetDictionaryIDMinCount()
{
	return 0;
}


int CPOSType::GetDictionaryIDMaxCount()
{
	return 1;
}


int CPOSType::GetDictionaryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("DictionaryID"));
}


bool CPOSType::HasDictionaryID()
{
	return InternalHasChild(Attribute, _T(""), _T("DictionaryID"));
}


void CPOSType::AddDictionaryID(CSchemaString DictionaryID)
{
	InternalAppend(Attribute, _T(""), _T("DictionaryID"), DictionaryID);
}


void CPOSType::InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}


void CPOSType::ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}



CSchemaString CPOSType::GetDictionaryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex));
}



CSchemaString CPOSType::GetDictionaryID()
{
	return GetDictionaryIDAt(0);
}


void CPOSType::RemoveDictionaryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("DictionaryID"), nIndex);
}


void CPOSType::RemoveDictionaryID()
{
	while (HasDictionaryID())
		RemoveDictionaryIDAt(0);
}

int CPOSType::GetEntryIDMinCount()
{
	return 0;
}


int CPOSType::GetEntryIDMaxCount()
{
	return 1;
}


int CPOSType::GetEntryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EntryID"));
}


bool CPOSType::HasEntryID()
{
	return InternalHasChild(Attribute, _T(""), _T("EntryID"));
}


void CPOSType::AddEntryID(CSchemaString EntryID)
{
	InternalAppend(Attribute, _T(""), _T("EntryID"), EntryID);
}


void CPOSType::InsertEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}


void CPOSType::ReplaceEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}



CSchemaString CPOSType::GetEntryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex));
}



CSchemaString CPOSType::GetEntryID()
{
	return GetEntryIDAt(0);
}


void CPOSType::RemoveEntryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EntryID"), nIndex);
}


void CPOSType::RemoveEntryID()
{
	while (HasEntryID())
		RemoveEntryIDAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CPronunciationType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CPronunciationType::GetGroupType()
{
	return eSequence;
}

int CPronunciationType::GetDictionaryIDMinCount()
{
	return 0;
}


int CPronunciationType::GetDictionaryIDMaxCount()
{
	return 1;
}


int CPronunciationType::GetDictionaryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("DictionaryID"));
}


bool CPronunciationType::HasDictionaryID()
{
	return InternalHasChild(Attribute, _T(""), _T("DictionaryID"));
}


void CPronunciationType::AddDictionaryID(CSchemaString DictionaryID)
{
	InternalAppend(Attribute, _T(""), _T("DictionaryID"), DictionaryID);
}


void CPronunciationType::InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}


void CPronunciationType::ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}



CSchemaString CPronunciationType::GetDictionaryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex));
}



CSchemaString CPronunciationType::GetDictionaryID()
{
	return GetDictionaryIDAt(0);
}


void CPronunciationType::RemoveDictionaryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("DictionaryID"), nIndex);
}


void CPronunciationType::RemoveDictionaryID()
{
	while (HasDictionaryID())
		RemoveDictionaryIDAt(0);
}

int CPronunciationType::GetEntryIDMinCount()
{
	return 0;
}


int CPronunciationType::GetEntryIDMaxCount()
{
	return 1;
}


int CPronunciationType::GetEntryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EntryID"));
}


bool CPronunciationType::HasEntryID()
{
	return InternalHasChild(Attribute, _T(""), _T("EntryID"));
}


void CPronunciationType::AddEntryID(CSchemaString EntryID)
{
	InternalAppend(Attribute, _T(""), _T("EntryID"), EntryID);
}


void CPronunciationType::InsertEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}


void CPronunciationType::ReplaceEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}



CSchemaString CPronunciationType::GetEntryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex));
}



CSchemaString CPronunciationType::GetEntryID()
{
	return GetEntryIDAt(0);
}


void CPronunciationType::RemoveEntryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EntryID"), nIndex);
}


void CPronunciationType::RemoveEntryID()
{
	while (HasEntryID())
		RemoveEntryIDAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CIPAType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CIPAType::GetGroupType()
{
	return eSequence;
}

int CIPAType::GetDictionaryIDMinCount()
{
	return 0;
}


int CIPAType::GetDictionaryIDMaxCount()
{
	return 1;
}


int CIPAType::GetDictionaryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("DictionaryID"));
}


bool CIPAType::HasDictionaryID()
{
	return InternalHasChild(Attribute, _T(""), _T("DictionaryID"));
}


void CIPAType::AddDictionaryID(CSchemaString DictionaryID)
{
	InternalAppend(Attribute, _T(""), _T("DictionaryID"), DictionaryID);
}


void CIPAType::InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}


void CIPAType::ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}



CSchemaString CIPAType::GetDictionaryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex));
}



CSchemaString CIPAType::GetDictionaryID()
{
	return GetDictionaryIDAt(0);
}


void CIPAType::RemoveDictionaryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("DictionaryID"), nIndex);
}


void CIPAType::RemoveDictionaryID()
{
	while (HasDictionaryID())
		RemoveDictionaryIDAt(0);
}

int CIPAType::GetEntryIDMinCount()
{
	return 0;
}


int CIPAType::GetEntryIDMaxCount()
{
	return 1;
}


int CIPAType::GetEntryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EntryID"));
}


bool CIPAType::HasEntryID()
{
	return InternalHasChild(Attribute, _T(""), _T("EntryID"));
}


void CIPAType::AddEntryID(CSchemaString EntryID)
{
	InternalAppend(Attribute, _T(""), _T("EntryID"), EntryID);
}


void CIPAType::InsertEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}


void CIPAType::ReplaceEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}



CSchemaString CIPAType::GetEntryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex));
}



CSchemaString CIPAType::GetEntryID()
{
	return GetEntryIDAt(0);
}


void CIPAType::RemoveEntryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EntryID"), nIndex);
}


void CIPAType::RemoveEntryID()
{
	while (HasEntryID())
		RemoveEntryIDAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CAccentType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CAccentType::GetGroupType()
{
	return eSequence;
}

int CAccentType::GetDictionaryIDMinCount()
{
	return 0;
}


int CAccentType::GetDictionaryIDMaxCount()
{
	return 1;
}


int CAccentType::GetDictionaryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("DictionaryID"));
}


bool CAccentType::HasDictionaryID()
{
	return InternalHasChild(Attribute, _T(""), _T("DictionaryID"));
}


void CAccentType::AddDictionaryID(CSchemaString DictionaryID)
{
	InternalAppend(Attribute, _T(""), _T("DictionaryID"), DictionaryID);
}


void CAccentType::InsertDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}


void CAccentType::ReplaceDictionaryIDAt(CSchemaString DictionaryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("DictionaryID"), nIndex, DictionaryID);
}



CSchemaString CAccentType::GetDictionaryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("DictionaryID"), nIndex));
}



CSchemaString CAccentType::GetDictionaryID()
{
	return GetDictionaryIDAt(0);
}


void CAccentType::RemoveDictionaryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("DictionaryID"), nIndex);
}


void CAccentType::RemoveDictionaryID()
{
	while (HasDictionaryID())
		RemoveDictionaryIDAt(0);
}

int CAccentType::GetEntryIDMinCount()
{
	return 0;
}


int CAccentType::GetEntryIDMaxCount()
{
	return 1;
}


int CAccentType::GetEntryIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EntryID"));
}


bool CAccentType::HasEntryID()
{
	return InternalHasChild(Attribute, _T(""), _T("EntryID"));
}


void CAccentType::AddEntryID(CSchemaString EntryID)
{
	InternalAppend(Attribute, _T(""), _T("EntryID"), EntryID);
}


void CAccentType::InsertEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}


void CAccentType::ReplaceEntryIDAt(CSchemaString EntryID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EntryID"), nIndex, EntryID);
}



CSchemaString CAccentType::GetEntryIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EntryID"), nIndex));
}



CSchemaString CAccentType::GetEntryID()
{
	return GetEntryIDAt(0);
}


void CAccentType::RemoveEntryIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EntryID"), nIndex);
}


void CAccentType::RemoveEntryID()
{
	while (HasEntryID())
		RemoveEntryIDAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CChunkType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CChunkType::GetGroupType()
{
	return eSequence;
}

int CChunkType::GetOrderMinCount()
{
	return 1;
}


int CChunkType::GetOrderMaxCount()
{
	return 1;
}


int CChunkType::GetOrderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Order"));
}


bool CChunkType::HasOrder()
{
	return InternalHasChild(Attribute, _T(""), _T("Order"));
}


void CChunkType::AddOrder(CSchemaInt Order)
{
	InternalAppend(Attribute, _T(""), _T("Order"), Order);
}


void CChunkType::InsertOrderAt(CSchemaInt Order, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}


void CChunkType::ReplaceOrderAt(CSchemaInt Order, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}



CSchemaInt CChunkType::GetOrderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex));
}



CSchemaInt CChunkType::GetOrder()
{
	return GetOrderAt(0);
}


void CChunkType::RemoveOrderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Order"), nIndex);
}


void CChunkType::RemoveOrder()
{
	while (HasOrder())
		RemoveOrderAt(0);
}

int CChunkType::GetScoreMinCount()
{
	return 0;
}


int CChunkType::GetScoreMaxCount()
{
	return 1;
}


int CChunkType::GetScoreCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Score"));
}


bool CChunkType::HasScore()
{
	return InternalHasChild(Attribute, _T(""), _T("Score"));
}


void CChunkType::AddScore(CSchemaFloat Score)
{
	InternalAppend(Attribute, _T(""), _T("Score"), Score);
}


void CChunkType::InsertScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}


void CChunkType::ReplaceScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}



CSchemaFloat CChunkType::GetScoreAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex));
}



CSchemaFloat CChunkType::GetScore()
{
	return GetScoreAt(0);
}


void CChunkType::RemoveScoreAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Score"), nIndex);
}


void CChunkType::RemoveScore()
{
	while (HasScore())
		RemoveScoreAt(0);
}

int CChunkType::GetTimeStampMinCount()
{
	return 0;
}


int CChunkType::GetTimeStampMaxCount()
{
	return 1;
}


int CChunkType::GetTimeStampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("TimeStamp"));
}


bool CChunkType::HasTimeStamp()
{
	return InternalHasChild(Attribute, _T(""), _T("TimeStamp"));
}


void CChunkType::AddTimeStamp(CSchemaDateTime TimeStamp)
{
	InternalAppend(Attribute, _T(""), _T("TimeStamp"), TimeStamp);
}


void CChunkType::InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}


void CChunkType::ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}



CSchemaDateTime CChunkType::GetTimeStampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex));
}



CSchemaDateTime CChunkType::GetTimeStamp()
{
	return GetTimeStampAt(0);
}


void CChunkType::RemoveTimeStampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("TimeStamp"), nIndex);
}


void CChunkType::RemoveTimeStamp()
{
	while (HasTimeStamp())
		RemoveTimeStampAt(0);
}

int CChunkType::GetBeginTimeMinCount()
{
	return 0;
}


int CChunkType::GetBeginTimeMaxCount()
{
	return 1;
}


int CChunkType::GetBeginTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTime"));
}


bool CChunkType::HasBeginTime()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTime"));
}


void CChunkType::AddBeginTime(CSchemaInteger BeginTime)
{
	InternalAppend(Attribute, _T(""), _T("BeginTime"), BeginTime);
}


void CChunkType::InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}


void CChunkType::ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}



CSchemaInteger CChunkType::GetBeginTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex));
}



CSchemaInteger CChunkType::GetBeginTime()
{
	return GetBeginTimeAt(0);
}


void CChunkType::RemoveBeginTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTime"), nIndex);
}


void CChunkType::RemoveBeginTime()
{
	while (HasBeginTime())
		RemoveBeginTimeAt(0);
}

int CChunkType::GetEndTimeMinCount()
{
	return 0;
}


int CChunkType::GetEndTimeMaxCount()
{
	return 1;
}


int CChunkType::GetEndTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTime"));
}


bool CChunkType::HasEndTime()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTime"));
}


void CChunkType::AddEndTime(CSchemaInteger EndTime)
{
	InternalAppend(Attribute, _T(""), _T("EndTime"), EndTime);
}


void CChunkType::InsertEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}


void CChunkType::ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}



CSchemaInteger CChunkType::GetEndTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex));
}



CSchemaInteger CChunkType::GetEndTime()
{
	return GetEndTimeAt(0);
}


void CChunkType::RemoveEndTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTime"), nIndex);
}


void CChunkType::RemoveEndTime()
{
	while (HasEndTime())
		RemoveEndTimeAt(0);
}

int CChunkType::GetSurfaceMinCount()
{
	return 1;
}


int CChunkType::GetSurfaceMaxCount()
{
	return INT_MAX;
}


int CChunkType::GetSurfaceCount()
{
	return ChildCountInternal(Element, _T(""), _T("Surface"));
}


bool CChunkType::HasSurface()
{
	return InternalHasChild(Element, _T(""), _T("Surface"));
}


void CChunkType::AddSurface(CSurfaceType& Surface)
{
	InternalAppendNode(_T(""), _T("Surface"), Surface);
}


void CChunkType::InsertSurfaceAt(CSurfaceType& Surface, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Surface"), nIndex, Surface);
}


void CChunkType::ReplaceSurfaceAt(CSurfaceType& Surface, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Surface"), nIndex, Surface);
}



CSurfaceType CChunkType::GetSurfaceAt(int nIndex)
{
	return CSurfaceType(InternalGetAt(Element, _T(""), _T("Surface"), nIndex));
}



CSurfaceType CChunkType::GetSurface()
{
	return GetSurfaceAt(0);
}


void CChunkType::RemoveSurfaceAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Surface"), nIndex);
}


void CChunkType::RemoveSurface()
{
	while (HasSurface())
		RemoveSurfaceAt(0);
}

int CChunkType::GetPOSMinCount()
{
	return 0;
}


int CChunkType::GetPOSMaxCount()
{
	return INT_MAX;
}


int CChunkType::GetPOSCount()
{
	return ChildCountInternal(Element, _T(""), _T("POS"));
}


bool CChunkType::HasPOS()
{
	return InternalHasChild(Element, _T(""), _T("POS"));
}


void CChunkType::AddPOS(CPOSType& POS)
{
	InternalAppendNode(_T(""), _T("POS"), POS);
}


void CChunkType::InsertPOSAt(CPOSType& POS, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("POS"), nIndex, POS);
}


void CChunkType::ReplacePOSAt(CPOSType& POS, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("POS"), nIndex, POS);
}



CPOSType CChunkType::GetPOSAt(int nIndex)
{
	return CPOSType(InternalGetAt(Element, _T(""), _T("POS"), nIndex));
}



CPOSType CChunkType::GetPOS()
{
	return GetPOSAt(0);
}


void CChunkType::RemovePOSAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("POS"), nIndex);
}


void CChunkType::RemovePOS()
{
	while (HasPOS())
		RemovePOSAt(0);
}

int CChunkType::GetPronunciationMinCount()
{
	return 0;
}


int CChunkType::GetPronunciationMaxCount()
{
	return INT_MAX;
}


int CChunkType::GetPronunciationCount()
{
	return ChildCountInternal(Element, _T(""), _T("Pronunciation"));
}


bool CChunkType::HasPronunciation()
{
	return InternalHasChild(Element, _T(""), _T("Pronunciation"));
}


void CChunkType::AddPronunciation(CPronunciationType& Pronunciation)
{
	InternalAppendNode(_T(""), _T("Pronunciation"), Pronunciation);
}


void CChunkType::InsertPronunciationAt(CPronunciationType& Pronunciation, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Pronunciation"), nIndex, Pronunciation);
}


void CChunkType::ReplacePronunciationAt(CPronunciationType& Pronunciation, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Pronunciation"), nIndex, Pronunciation);
}



CPronunciationType CChunkType::GetPronunciationAt(int nIndex)
{
	return CPronunciationType(InternalGetAt(Element, _T(""), _T("Pronunciation"), nIndex));
}



CPronunciationType CChunkType::GetPronunciation()
{
	return GetPronunciationAt(0);
}


void CChunkType::RemovePronunciationAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Pronunciation"), nIndex);
}


void CChunkType::RemovePronunciation()
{
	while (HasPronunciation())
		RemovePronunciationAt(0);
}

int CChunkType::GetIPAMinCount()
{
	return 0;
}


int CChunkType::GetIPAMaxCount()
{
	return INT_MAX;
}


int CChunkType::GetIPACount()
{
	return ChildCountInternal(Element, _T(""), _T("IPA"));
}


bool CChunkType::HasIPA()
{
	return InternalHasChild(Element, _T(""), _T("IPA"));
}


void CChunkType::AddIPA(CIPAType& IPA)
{
	InternalAppendNode(_T(""), _T("IPA"), IPA);
}


void CChunkType::InsertIPAAt(CIPAType& IPA, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("IPA"), nIndex, IPA);
}


void CChunkType::ReplaceIPAAt(CIPAType& IPA, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("IPA"), nIndex, IPA);
}



CIPAType CChunkType::GetIPAAt(int nIndex)
{
	return CIPAType(InternalGetAt(Element, _T(""), _T("IPA"), nIndex));
}



CIPAType CChunkType::GetIPA()
{
	return GetIPAAt(0);
}


void CChunkType::RemoveIPAAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("IPA"), nIndex);
}


void CChunkType::RemoveIPA()
{
	while (HasIPA())
		RemoveIPAAt(0);
}

int CChunkType::GetAccentMinCount()
{
	return 0;
}


int CChunkType::GetAccentMaxCount()
{
	return INT_MAX;
}


int CChunkType::GetAccentCount()
{
	return ChildCountInternal(Element, _T(""), _T("Accent"));
}


bool CChunkType::HasAccent()
{
	return InternalHasChild(Element, _T(""), _T("Accent"));
}


void CChunkType::AddAccent(CAccentType& Accent)
{
	InternalAppendNode(_T(""), _T("Accent"), Accent);
}


void CChunkType::InsertAccentAt(CAccentType& Accent, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Accent"), nIndex, Accent);
}


void CChunkType::ReplaceAccentAt(CAccentType& Accent, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Accent"), nIndex, Accent);
}



CAccentType CChunkType::GetAccentAt(int nIndex)
{
	return CAccentType(InternalGetAt(Element, _T(""), _T("Accent"), nIndex));
}



CAccentType CChunkType::GetAccent()
{
	return GetAccentAt(0);
}


void CChunkType::RemoveAccentAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Accent"), nIndex);
}


void CChunkType::RemoveAccent()
{
	while (HasAccent())
		RemoveAccentAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CURLType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CURLType::GetGroupType()
{
	return eSequence;
}

////////////////////////////////////////////////////////////////////////
//
// class CHTMLType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CHTMLType::GetGroupType()
{
	return eSequence;
}

////////////////////////////////////////////////////////////////////////
//
// class CDataType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CDataType::GetGroupType()
{
	return eSequence;
}

int CDataType::GetTextMinCount()
{
	return 0;
}


int CDataType::GetTextMaxCount()
{
	return INT_MAX;
}


int CDataType::GetTextCount()
{
	return ChildCountInternal(Element, _T(""), _T("Text"));
}


bool CDataType::HasText()
{
	return InternalHasChild(Element, _T(""), _T("Text"));
}


void CDataType::AddText(CTextType& Text)
{
	InternalAppendNode(_T(""), _T("Text"), Text);
}


void CDataType::InsertTextAt(CTextType& Text, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Text"), nIndex, Text);
}


void CDataType::ReplaceTextAt(CTextType& Text, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Text"), nIndex, Text);
}



CTextType CDataType::GetTextAt(int nIndex)
{
	return CTextType(InternalGetAt(Element, _T(""), _T("Text"), nIndex));
}



CTextType CDataType::GetText()
{
	return GetTextAt(0);
}


void CDataType::RemoveTextAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Text"), nIndex);
}


void CDataType::RemoveText()
{
	while (HasText())
		RemoveTextAt(0);
}

int CDataType::GetAudioMinCount()
{
	return 0;
}


int CDataType::GetAudioMaxCount()
{
	return INT_MAX;
}


int CDataType::GetAudioCount()
{
	return ChildCountInternal(Element, _T(""), _T("Audio"));
}


bool CDataType::HasAudio()
{
	return InternalHasChild(Element, _T(""), _T("Audio"));
}


void CDataType::AddAudio(CAudioType& Audio)
{
	InternalAppendNode(_T(""), _T("Audio"), Audio);
}


void CDataType::InsertAudioAt(CAudioType& Audio, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Audio"), nIndex, Audio);
}


void CDataType::ReplaceAudioAt(CAudioType& Audio, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Audio"), nIndex, Audio);
}



CAudioType CDataType::GetAudioAt(int nIndex)
{
	return CAudioType(InternalGetAt(Element, _T(""), _T("Audio"), nIndex));
}



CAudioType CDataType::GetAudio()
{
	return GetAudioAt(0);
}


void CDataType::RemoveAudioAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Audio"), nIndex);
}


void CDataType::RemoveAudio()
{
	while (HasAudio())
		RemoveAudioAt(0);
}

int CDataType::GetImageMinCount()
{
	return 0;
}


int CDataType::GetImageMaxCount()
{
	return INT_MAX;
}


int CDataType::GetImageCount()
{
	return ChildCountInternal(Element, _T(""), _T("Image"));
}


bool CDataType::HasImage()
{
	return InternalHasChild(Element, _T(""), _T("Image"));
}


void CDataType::AddImage(CImageType& Image)
{
	InternalAppendNode(_T(""), _T("Image"), Image);
}


void CDataType::InsertImageAt(CImageType& Image, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Image"), nIndex, Image);
}


void CDataType::ReplaceImageAt(CImageType& Image, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Image"), nIndex, Image);
}



CImageType CDataType::GetImageAt(int nIndex)
{
	return CImageType(InternalGetAt(Element, _T(""), _T("Image"), nIndex));
}



CImageType CDataType::GetImage()
{
	return GetImageAt(0);
}


void CDataType::RemoveImageAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Image"), nIndex);
}


void CDataType::RemoveImage()
{
	while (HasImage())
		RemoveImageAt(0);
}

int CDataType::GetVideoMinCount()
{
	return 0;
}


int CDataType::GetVideoMaxCount()
{
	return INT_MAX;
}


int CDataType::GetVideoCount()
{
	return ChildCountInternal(Element, _T(""), _T("Video"));
}


bool CDataType::HasVideo()
{
	return InternalHasChild(Element, _T(""), _T("Video"));
}


void CDataType::AddVideo(CVideoType& Video)
{
	InternalAppendNode(_T(""), _T("Video"), Video);
}


void CDataType::InsertVideoAt(CVideoType& Video, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Video"), nIndex, Video);
}


void CDataType::ReplaceVideoAt(CVideoType& Video, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Video"), nIndex, Video);
}



CVideoType CDataType::GetVideoAt(int nIndex)
{
	return CVideoType(InternalGetAt(Element, _T(""), _T("Video"), nIndex));
}



CVideoType CDataType::GetVideo()
{
	return GetVideoAt(0);
}


void CDataType::RemoveVideoAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Video"), nIndex);
}


void CDataType::RemoveVideo()
{
	while (HasVideo())
		RemoveVideoAt(0);
}

int CDataType::GetURLMinCount()
{
	return 0;
}


int CDataType::GetURLMaxCount()
{
	return INT_MAX;
}


int CDataType::GetURLCount()
{
	return ChildCountInternal(Element, _T(""), _T("URL"));
}


bool CDataType::HasURL()
{
	return InternalHasChild(Element, _T(""), _T("URL"));
}


void CDataType::AddURL(CURLType& URL)
{
	InternalAppendNode(_T(""), _T("URL"), URL);
}


void CDataType::InsertURLAt(CURLType& URL, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("URL"), nIndex, URL);
}


void CDataType::ReplaceURLAt(CURLType& URL, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("URL"), nIndex, URL);
}



CURLType CDataType::GetURLAt(int nIndex)
{
	return CURLType(InternalGetAt(Element, _T(""), _T("URL"), nIndex));
}



CURLType CDataType::GetURL()
{
	return GetURLAt(0);
}


void CDataType::RemoveURLAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("URL"), nIndex);
}


void CDataType::RemoveURL()
{
	while (HasURL())
		RemoveURLAt(0);
}

int CDataType::GetHTMLMinCount()
{
	return 0;
}


int CDataType::GetHTMLMaxCount()
{
	return INT_MAX;
}


int CDataType::GetHTMLCount()
{
	return ChildCountInternal(Element, _T(""), _T("HTML"));
}


bool CDataType::HasHTML()
{
	return InternalHasChild(Element, _T(""), _T("HTML"));
}


void CDataType::AddHTML(CHTMLType& HTML)
{
	InternalAppendNode(_T(""), _T("HTML"), HTML);
}


void CDataType::InsertHTMLAt(CHTMLType& HTML, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("HTML"), nIndex, HTML);
}


void CDataType::ReplaceHTMLAt(CHTMLType& HTML, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("HTML"), nIndex, HTML);
}



CHTMLType CDataType::GetHTMLAt(int nIndex)
{
	return CHTMLType(InternalGetAt(Element, _T(""), _T("HTML"), nIndex));
}



CHTMLType CDataType::GetHTML()
{
	return GetHTMLAt(0);
}


void CDataType::RemoveHTMLAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("HTML"), nIndex);
}


void CDataType::RemoveHTML()
{
	while (HasHTML())
		RemoveHTMLAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CGlobalPositionType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CGlobalPositionType::GetGroupType()
{
	return eSequence;
}

int CGlobalPositionType::GetLongitudeMinCount()
{
	return 1;
}


int CGlobalPositionType::GetLongitudeMaxCount()
{
	return 1;
}


int CGlobalPositionType::GetLongitudeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Longitude"));
}


bool CGlobalPositionType::HasLongitude()
{
	return InternalHasChild(Attribute, _T(""), _T("Longitude"));
}


void CGlobalPositionType::AddLongitude(CSchemaFloat Longitude)
{
	InternalAppend(Attribute, _T(""), _T("Longitude"), Longitude);
}


void CGlobalPositionType::InsertLongitudeAt(CSchemaFloat Longitude, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Longitude"), nIndex, Longitude);
}


void CGlobalPositionType::ReplaceLongitudeAt(CSchemaFloat Longitude, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Longitude"), nIndex, Longitude);
}



CSchemaFloat CGlobalPositionType::GetLongitudeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Longitude"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Longitude"), nIndex));
}



CSchemaFloat CGlobalPositionType::GetLongitude()
{
	return GetLongitudeAt(0);
}


void CGlobalPositionType::RemoveLongitudeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Longitude"), nIndex);
}


void CGlobalPositionType::RemoveLongitude()
{
	while (HasLongitude())
		RemoveLongitudeAt(0);
}

int CGlobalPositionType::GetLatitudeMinCount()
{
	return 1;
}


int CGlobalPositionType::GetLatitudeMaxCount()
{
	return 1;
}


int CGlobalPositionType::GetLatitudeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Latitude"));
}


bool CGlobalPositionType::HasLatitude()
{
	return InternalHasChild(Attribute, _T(""), _T("Latitude"));
}


void CGlobalPositionType::AddLatitude(CSchemaFloat Latitude)
{
	InternalAppend(Attribute, _T(""), _T("Latitude"), Latitude);
}


void CGlobalPositionType::InsertLatitudeAt(CSchemaFloat Latitude, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Latitude"), nIndex, Latitude);
}


void CGlobalPositionType::ReplaceLatitudeAt(CSchemaFloat Latitude, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Latitude"), nIndex, Latitude);
}



CSchemaFloat CGlobalPositionType::GetLatitudeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Latitude"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Latitude"), nIndex));
}



CSchemaFloat CGlobalPositionType::GetLatitude()
{
	return GetLatitudeAt(0);
}


void CGlobalPositionType::RemoveLatitudeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Latitude"), nIndex);
}


void CGlobalPositionType::RemoveLatitude()
{
	while (HasLatitude())
		RemoveLatitudeAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CLocationType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CLocationType::GetGroupType()
{
	return eSequence;
}

int CLocationType::GetURIMinCount()
{
	return 1;
}


int CLocationType::GetURIMaxCount()
{
	return 1;
}


int CLocationType::GetURICount()
{
	return ChildCountInternal(Element, _T(""), _T("URI"));
}


bool CLocationType::HasURI()
{
	return InternalHasChild(Element, _T(""), _T("URI"));
}


void CLocationType::AddURI(CSchemaString URI)
{
	InternalAppend(Element, _T(""), _T("URI"), URI);
}


void CLocationType::InsertURIAt(CSchemaString URI, int nIndex)
{
	InternalInsertAt(Element, _T(""), _T("URI"), nIndex, URI);
}


void CLocationType::ReplaceURIAt(CSchemaString URI, int nIndex)
{
	InternalReplaceAt(Element, _T(""), _T("URI"), nIndex, URI);
}



CSchemaString CLocationType::GetURIAt(int nIndex)
{
	return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("URI"), nIndex)).c_str();
	//return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("URI"), nIndex));
}



CSchemaString CLocationType::GetURI()
{
	return GetURIAt(0);
}


void CLocationType::RemoveURIAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("URI"), nIndex);
}


void CLocationType::RemoveURI()
{
	while (HasURI())
		RemoveURIAt(0);
}

int CLocationType::GetGlobalPositionMinCount()
{
	return 0;
}


int CLocationType::GetGlobalPositionMaxCount()
{
	return 1;
}


int CLocationType::GetGlobalPositionCount()
{
	return ChildCountInternal(Element, _T(""), _T("GlobalPosition"));
}


bool CLocationType::HasGlobalPosition()
{
	return InternalHasChild(Element, _T(""), _T("GlobalPosition"));
}


void CLocationType::AddGlobalPosition(CGlobalPositionType& GlobalPosition)
{
	InternalAppendNode(_T(""), _T("GlobalPosition"), GlobalPosition);
}


void CLocationType::InsertGlobalPositionAt(CGlobalPositionType& GlobalPosition, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("GlobalPosition"), nIndex, GlobalPosition);
}


void CLocationType::ReplaceGlobalPositionAt(CGlobalPositionType& GlobalPosition, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("GlobalPosition"), nIndex, GlobalPosition);
}



CGlobalPositionType CLocationType::GetGlobalPositionAt(int nIndex)
{
	return CGlobalPositionType(InternalGetAt(Element, _T(""), _T("GlobalPosition"), nIndex));
}



CGlobalPositionType CLocationType::GetGlobalPosition()
{
	return GetGlobalPositionAt(0);
}


void CLocationType::RemoveGlobalPositionAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("GlobalPosition"), nIndex);
}


void CLocationType::RemoveGlobalPosition()
{
	while (HasGlobalPosition())
		RemoveGlobalPositionAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CDeviceType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CDeviceType::GetGroupType()
{
	return eSequence;
}

int CDeviceType::GetLocationMinCount()
{
	return 1;
}


int CDeviceType::GetLocationMaxCount()
{
	return 1;
}


int CDeviceType::GetLocationCount()
{
	return ChildCountInternal(Element, _T(""), _T("Location"));
}


bool CDeviceType::HasLocation()
{
	return InternalHasChild(Element, _T(""), _T("Location"));
}


void CDeviceType::AddLocation(CLocationType& Location)
{
	InternalAppendNode(_T(""), _T("Location"), Location);
}


void CDeviceType::InsertLocationAt(CLocationType& Location, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Location"), nIndex, Location);
}


void CDeviceType::ReplaceLocationAt(CLocationType& Location, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Location"), nIndex, Location);
}



CLocationType CDeviceType::GetLocationAt(int nIndex)
{
	return CLocationType(InternalGetAt(Element, _T(""), _T("Location"), nIndex));
}



CLocationType CDeviceType::GetLocation()
{
	return GetLocationAt(0);
}


void CDeviceType::RemoveLocationAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Location"), nIndex);
}


void CDeviceType::RemoveLocation()
{
	while (HasLocation())
		RemoveLocationAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CErrorType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CErrorType::GetGroupType()
{
	return eSequence;
}

int CErrorType::GetCodeMinCount()
{
	return 1;
}


int CErrorType::GetCodeMaxCount()
{
	return 1;
}


int CErrorType::GetCodeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Code"));
}


bool CErrorType::HasCode()
{
	return InternalHasChild(Attribute, _T(""), _T("Code"));
}


void CErrorType::AddCode(CSchemaString Code)
{
	InternalAppend(Attribute, _T(""), _T("Code"), Code);
}


void CErrorType::InsertCodeAt(CSchemaString Code, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Code"), nIndex, Code);
}


void CErrorType::ReplaceCodeAt(CSchemaString Code, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Code"), nIndex, Code);
}



CSchemaString CErrorType::GetCodeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Code"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Code"), nIndex));
}



CSchemaString CErrorType::GetCode()
{
	return GetCodeAt(0);
}


void CErrorType::RemoveCodeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Code"), nIndex);
}


void CErrorType::RemoveCode()
{
	while (HasCode())
		RemoveCodeAt(0);
}

int CErrorType::GetServiceMinCount()
{
	return 1;
}


int CErrorType::GetServiceMaxCount()
{
	return 1;
}


int CErrorType::GetServiceCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Service"));
}


bool CErrorType::HasService()
{
	return InternalHasChild(Attribute, _T(""), _T("Service"));
}


void CErrorType::AddService(CSchemaString Service)
{
	InternalAppend(Attribute, _T(""), _T("Service"), Service);
}


void CErrorType::InsertServiceAt(CSchemaString Service, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}


void CErrorType::ReplaceServiceAt(CSchemaString Service, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}



CSchemaString CErrorType::GetServiceAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex));
}



CSchemaString CErrorType::GetService()
{
	return GetServiceAt(0);
}


void CErrorType::RemoveServiceAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Service"), nIndex);
}


void CErrorType::RemoveService()
{
	while (HasService())
		RemoveServiceAt(0);
}

int CErrorType::GetMessageMinCount()
{
	return 1;
}


int CErrorType::GetMessageMaxCount()
{
	return 1;
}


int CErrorType::GetMessageCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Message"));
}


bool CErrorType::HasMessage()
{
	return InternalHasChild(Attribute, _T(""), _T("Message"));
}


void CErrorType::AddMessage(CSchemaString Message)
{
	InternalAppend(Attribute, _T(""), _T("Message"), Message);
}


void CErrorType::InsertMessageAt(CSchemaString Message, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Message"), nIndex, Message);
}


void CErrorType::ReplaceMessageAt(CSchemaString Message, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Message"), nIndex, Message);
}



CSchemaString CErrorType::GetMessageAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Message"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Message"), nIndex));
}



CSchemaString CErrorType::GetMessage()
{
	return GetMessageAt(0);
}


void CErrorType::RemoveMessageAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Message"), nIndex);
}


void CErrorType::RemoveMessage()
{
	while (HasMessage())
		RemoveMessageAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CHistoryType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CHistoryType::GetGroupType()
{
	return eSequence;
}

int CHistoryType::GetServiceMinCount()
{
	return 1;
}


int CHistoryType::GetServiceMaxCount()
{
	return 1;
}


int CHistoryType::GetServiceCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Service"));
}


bool CHistoryType::HasService()
{
	return InternalHasChild(Attribute, _T(""), _T("Service"));
}


void CHistoryType::AddService(CSchemaString Service)
{
	InternalAppend(Attribute, _T(""), _T("Service"), Service);
}


void CHistoryType::InsertServiceAt(CSchemaString Service, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}


void CHistoryType::ReplaceServiceAt(CSchemaString Service, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}



CSchemaString CHistoryType::GetServiceAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex));
}



CSchemaString CHistoryType::GetService()
{
	return GetServiceAt(0);
}


void CHistoryType::RemoveServiceAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Service"), nIndex);
}


void CHistoryType::RemoveService()
{
	while (HasService())
		RemoveServiceAt(0);
}

int CHistoryType::GetProcessOrderMinCount()
{
	return 1;
}


int CHistoryType::GetProcessOrderMaxCount()
{
	return 1;
}


int CHistoryType::GetProcessOrderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ProcessOrder"));
}


bool CHistoryType::HasProcessOrder()
{
	return InternalHasChild(Attribute, _T(""), _T("ProcessOrder"));
}


void CHistoryType::AddProcessOrder(CSchemaInt ProcessOrder)
{
	InternalAppend(Attribute, _T(""), _T("ProcessOrder"), ProcessOrder);
}


void CHistoryType::InsertProcessOrderAt(CSchemaInt ProcessOrder, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ProcessOrder"), nIndex, ProcessOrder);
}


void CHistoryType::ReplaceProcessOrderAt(CSchemaInt ProcessOrder, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ProcessOrder"), nIndex, ProcessOrder);
}



CSchemaInt CHistoryType::GetProcessOrderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ProcessOrder"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ProcessOrder"), nIndex));
}



CSchemaInt CHistoryType::GetProcessOrder()
{
	return GetProcessOrderAt(0);
}


void CHistoryType::RemoveProcessOrderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ProcessOrder"), nIndex);
}


void CHistoryType::RemoveProcessOrder()
{
	while (HasProcessOrder())
		RemoveProcessOrderAt(0);
}

int CHistoryType::GetRequestMinCount()
{
	return 1;
}


int CHistoryType::GetRequestMaxCount()
{
	return 1;
}


int CHistoryType::GetRequestCount()
{
	return ChildCountInternal(Element, _T(""), _T("Request"));
}


bool CHistoryType::HasRequest()
{
	return InternalHasChild(Element, _T(""), _T("Request"));
}


void CHistoryType::AddRequest(CRequestType& Request)
{
	InternalAppendNode(_T(""), _T("Request"), Request);
}


void CHistoryType::InsertRequestAt(CRequestType& Request, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Request"), nIndex, Request);
}


void CHistoryType::ReplaceRequestAt(CRequestType& Request, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Request"), nIndex, Request);
}



CRequestType CHistoryType::GetRequestAt(int nIndex)
{
	return CRequestType(InternalGetAt(Element, _T(""), _T("Request"), nIndex));
}



CRequestType CHistoryType::GetRequest()
{
	return GetRequestAt(0);
}


void CHistoryType::RemoveRequestAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Request"), nIndex);
}


void CHistoryType::RemoveRequest()
{
	while (HasRequest())
		RemoveRequestAt(0);
}

int CHistoryType::GetResponseMinCount()
{
	return 1;
}


int CHistoryType::GetResponseMaxCount()
{
	return 1;
}


int CHistoryType::GetResponseCount()
{
	return ChildCountInternal(Element, _T(""), _T("Response"));
}


bool CHistoryType::HasResponse()
{
	return InternalHasChild(Element, _T(""), _T("Response"));
}


void CHistoryType::AddResponse(CResponseType& Response)
{
	InternalAppendNode(_T(""), _T("Response"), Response);
}


void CHistoryType::InsertResponseAt(CResponseType& Response, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Response"), nIndex, Response);
}


void CHistoryType::ReplaceResponseAt(CResponseType& Response, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Response"), nIndex, Response);
}



CResponseType CHistoryType::GetResponseAt(int nIndex)
{
	return CResponseType(InternalGetAt(Element, _T(""), _T("Response"), nIndex));
}



CResponseType CHistoryType::GetResponse()
{
	return GetResponseAt(0);
}


void CHistoryType::RemoveResponseAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Response"), nIndex);
}


void CHistoryType::RemoveResponse()
{
	while (HasResponse())
		RemoveResponseAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CImageType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CImageType::GetGroupType()
{
	return eSequence;
}

int CImageType::GetChannelIDMinCount()
{
	return 1;
}


int CImageType::GetChannelIDMaxCount()
{
	return 1;
}


int CImageType::GetChannelIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ChannelID"));
}


bool CImageType::HasChannelID()
{
	return InternalHasChild(Attribute, _T(""), _T("ChannelID"));
}


void CImageType::AddChannelID(CSchemaInt ChannelID)
{
	InternalAppend(Attribute, _T(""), _T("ChannelID"), ChannelID);
}


void CImageType::InsertChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}


void CImageType::ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}



CSchemaInt CImageType::GetChannelIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex));
}



CSchemaInt CImageType::GetChannelID()
{
	return GetChannelIDAt(0);
}


void CImageType::RemoveChannelIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ChannelID"), nIndex);
}


void CImageType::RemoveChannelID()
{
	while (HasChannelID())
		RemoveChannelIDAt(0);
}

int CImageType::GetBeginTimestampMinCount()
{
	return 1;
}


int CImageType::GetBeginTimestampMaxCount()
{
	return 1;
}


int CImageType::GetBeginTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTimestamp"));
}


bool CImageType::HasBeginTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTimestamp"));
}


void CImageType::AddBeginTimestamp(CSchemaDateTime BeginTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("BeginTimestamp"), BeginTimestamp);
}


void CImageType::InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}


void CImageType::ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}



CSchemaDateTime CImageType::GetBeginTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex));
}



CSchemaDateTime CImageType::GetBeginTimestamp()
{
	return GetBeginTimestampAt(0);
}


void CImageType::RemoveBeginTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex);
}


void CImageType::RemoveBeginTimestamp()
{
	while (HasBeginTimestamp())
		RemoveBeginTimestampAt(0);
}

int CImageType::GetEndTimestampMinCount()
{
	return 1;
}


int CImageType::GetEndTimestampMaxCount()
{
	return 1;
}


int CImageType::GetEndTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTimestamp"));
}


bool CImageType::HasEndTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTimestamp"));
}


void CImageType::AddEndTimestamp(CSchemaDateTime EndTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("EndTimestamp"), EndTimestamp);
}


void CImageType::InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}


void CImageType::ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}



CSchemaDateTime CImageType::GetEndTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex));
}



CSchemaDateTime CImageType::GetEndTimestamp()
{
	return GetEndTimestampAt(0);
}


void CImageType::RemoveEndTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTimestamp"), nIndex);
}


void CImageType::RemoveEndTimestamp()
{
	while (HasEndTimestamp())
		RemoveEndTimestampAt(0);
}

int CImageType::GetEndPointMinCount()
{
	return 0;
}


int CImageType::GetEndPointMaxCount()
{
	return 1;
}


int CImageType::GetEndPointCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndPoint"));
}


bool CImageType::HasEndPoint()
{
	return InternalHasChild(Attribute, _T(""), _T("EndPoint"));
}


void CImageType::AddEndPoint(CSchemaDateTime EndPoint)
{
	InternalAppend(Attribute, _T(""), _T("EndPoint"), EndPoint);
}


void CImageType::InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}


void CImageType::ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}



CSchemaDateTime CImageType::GetEndPointAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex));
}



CSchemaDateTime CImageType::GetEndPoint()
{
	return GetEndPointAt(0);
}


void CImageType::RemoveEndPointAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndPoint"), nIndex);
}


void CImageType::RemoveEndPoint()
{
	while (HasEndPoint())
		RemoveEndPointAt(0);
}

int CImageType::GetModelTypeMinCount()
{
	return 0;
}


int CImageType::GetModelTypeMaxCount()
{
	return 1;
}


int CImageType::GetModelTypeCount()
{
	return ChildCountInternal(Element, _T(""), _T("ModelType"));
}


bool CImageType::HasModelType()
{
	return InternalHasChild(Element, _T(""), _T("ModelType"));
}


void CImageType::AddModelType(CModelTypeType& ModelType)
{
	InternalAppendNode(_T(""), _T("ModelType"), ModelType);
}


void CImageType::InsertModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}


void CImageType::ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}



CModelTypeType CImageType::GetModelTypeAt(int nIndex)
{
	return CModelTypeType(InternalGetAt(Element, _T(""), _T("ModelType"), nIndex));
}



CModelTypeType CImageType::GetModelType()
{
	return GetModelTypeAt(0);
}


void CImageType::RemoveModelTypeAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("ModelType"), nIndex);
}


void CImageType::RemoveModelType()
{
	while (HasModelType())
		RemoveModelTypeAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CInputType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CInputType::GetGroupType()
{
	return eSequence;
}

int CInputType::GetDataMinCount()
{
	return 1;
}


int CInputType::GetDataMaxCount()
{
	return 1;
}


int CInputType::GetDataCount()
{
	return ChildCountInternal(Element, _T(""), _T("Data"));
}


bool CInputType::HasData()
{
	return InternalHasChild(Element, _T(""), _T("Data"));
}


void CInputType::AddData(CDataType& Data)
{
	InternalAppendNode(_T(""), _T("Data"), Data);
}


void CInputType::InsertDataAt(CDataType& Data, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Data"), nIndex, Data);
}


void CInputType::ReplaceDataAt(CDataType& Data, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Data"), nIndex, Data);
}



CDataType CInputType::GetDataAt(int nIndex)
{
	return CDataType(InternalGetAt(Element, _T(""), _T("Data"), nIndex));
}



CDataType CInputType::GetData()
{
	return GetDataAt(0);
}


void CInputType::RemoveDataAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Data"), nIndex);
}


void CInputType::RemoveData()
{
	while (HasData())
		RemoveDataAt(0);
}

int CInputType::GetAttachedBinaryMinCount()
{
	return 0;
}


int CInputType::GetAttachedBinaryMaxCount()
{
	return INT_MAX;
}


int CInputType::GetAttachedBinaryCount()
{
	return ChildCountInternal(Element, _T(""), _T("AttachedBinary"));
}


bool CInputType::HasAttachedBinary()
{
	return InternalHasChild(Element, _T(""), _T("AttachedBinary"));
}


void CInputType::AddAttachedBinary(CAttachedBinaryType& AttachedBinary)
{
	InternalAppendNode(_T(""), _T("AttachedBinary"), AttachedBinary);
}


void CInputType::InsertAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("AttachedBinary"), nIndex, AttachedBinary);
}


void CInputType::ReplaceAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("AttachedBinary"), nIndex, AttachedBinary);
}



CAttachedBinaryType CInputType::GetAttachedBinaryAt(int nIndex)
{
	return CAttachedBinaryType(InternalGetAt(Element, _T(""), _T("AttachedBinary"), nIndex));
}



CAttachedBinaryType CInputType::GetAttachedBinary()
{
	return GetAttachedBinaryAt(0);
}


void CInputType::RemoveAttachedBinaryAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("AttachedBinary"), nIndex);
}


void CInputType::RemoveAttachedBinary()
{
	while (HasAttachedBinary())
		RemoveAttachedBinaryAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSpeakingType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSpeakingType::GetGroupType()
{
	return eSequence;
}

int CSpeakingType::GetLanguageMinCount()
{
	return 1;
}


int CSpeakingType::GetLanguageMaxCount()
{
	return 1;
}


int CSpeakingType::GetLanguageCount()
{
	return ChildCountInternal(Element, _T(""), _T("Language"));
}


bool CSpeakingType::HasLanguage()
{
	return InternalHasChild(Element, _T(""), _T("Language"));
}


void CSpeakingType::AddLanguage(CLanguageType& Language)
{
	InternalAppendNode(_T(""), _T("Language"), Language);
}


void CSpeakingType::InsertLanguageAt(CLanguageType& Language, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Language"), nIndex, Language);
}


void CSpeakingType::ReplaceLanguageAt(CLanguageType& Language, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Language"), nIndex, Language);
}



CLanguageType CSpeakingType::GetLanguageAt(int nIndex)
{
	return CLanguageType(InternalGetAt(Element, _T(""), _T("Language"), nIndex));
}



CLanguageType CSpeakingType::GetLanguage()
{
	return GetLanguageAt(0);
}


void CSpeakingType::RemoveLanguageAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Language"), nIndex);
}


void CSpeakingType::RemoveLanguage()
{
	while (HasLanguage())
		RemoveLanguageAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CWritingType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CWritingType::GetGroupType()
{
	return eSequence;
}

int CWritingType::GetLanguageMinCount()
{
	return 1;
}


int CWritingType::GetLanguageMaxCount()
{
	return 1;
}


int CWritingType::GetLanguageCount()
{
	return ChildCountInternal(Element, _T(""), _T("Language"));
}


bool CWritingType::HasLanguage()
{
	return InternalHasChild(Element, _T(""), _T("Language"));
}


void CWritingType::AddLanguage(CLanguageType& Language)
{
	InternalAppendNode(_T(""), _T("Language"), Language);
}


void CWritingType::InsertLanguageAt(CLanguageType& Language, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Language"), nIndex, Language);
}


void CWritingType::ReplaceLanguageAt(CLanguageType& Language, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Language"), nIndex, Language);
}



CLanguageType CWritingType::GetLanguageAt(int nIndex)
{
	return CLanguageType(InternalGetAt(Element, _T(""), _T("Language"), nIndex));
}



CLanguageType CWritingType::GetLanguage()
{
	return GetLanguageAt(0);
}


void CWritingType::RemoveLanguageAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Language"), nIndex);
}


void CWritingType::RemoveLanguage()
{
	while (HasLanguage())
		RemoveLanguageAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSigningType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSigningType::GetGroupType()
{
	return eSequence;
}

////////////////////////////////////////////////////////////////////////
//
// class CInputModalityType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CInputModalityType::GetGroupType()
{
	return eSequence;
}

int CInputModalityType::GetSpeakingMinCount()
{
	return 0;
}


int CInputModalityType::GetSpeakingMaxCount()
{
	return 1;
}


int CInputModalityType::GetSpeakingCount()
{
	return ChildCountInternal(Element, _T(""), _T("Speaking"));
}


bool CInputModalityType::HasSpeaking()
{
	return InternalHasChild(Element, _T(""), _T("Speaking"));
}


void CInputModalityType::AddSpeaking(CSpeakingType& Speaking)
{
	InternalAppendNode(_T(""), _T("Speaking"), Speaking);
}


void CInputModalityType::InsertSpeakingAt(CSpeakingType& Speaking, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Speaking"), nIndex, Speaking);
}


void CInputModalityType::ReplaceSpeakingAt(CSpeakingType& Speaking, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Speaking"), nIndex, Speaking);
}



CSpeakingType CInputModalityType::GetSpeakingAt(int nIndex)
{
	return CSpeakingType(InternalGetAt(Element, _T(""), _T("Speaking"), nIndex));
}



CSpeakingType CInputModalityType::GetSpeaking()
{
	return GetSpeakingAt(0);
}


void CInputModalityType::RemoveSpeakingAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Speaking"), nIndex);
}


void CInputModalityType::RemoveSpeaking()
{
	while (HasSpeaking())
		RemoveSpeakingAt(0);
}

int CInputModalityType::GetWritingMinCount()
{
	return 0;
}


int CInputModalityType::GetWritingMaxCount()
{
	return 1;
}


int CInputModalityType::GetWritingCount()
{
	return ChildCountInternal(Element, _T(""), _T("Writing"));
}


bool CInputModalityType::HasWriting()
{
	return InternalHasChild(Element, _T(""), _T("Writing"));
}


void CInputModalityType::AddWriting(CWritingType& Writing)
{
	InternalAppendNode(_T(""), _T("Writing"), Writing);
}


void CInputModalityType::InsertWritingAt(CWritingType& Writing, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Writing"), nIndex, Writing);
}


void CInputModalityType::ReplaceWritingAt(CWritingType& Writing, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Writing"), nIndex, Writing);
}



CWritingType CInputModalityType::GetWritingAt(int nIndex)
{
	return CWritingType(InternalGetAt(Element, _T(""), _T("Writing"), nIndex));
}



CWritingType CInputModalityType::GetWriting()
{
	return GetWritingAt(0);
}


void CInputModalityType::RemoveWritingAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Writing"), nIndex);
}


void CInputModalityType::RemoveWriting()
{
	while (HasWriting())
		RemoveWritingAt(0);
}

int CInputModalityType::GetSigningMinCount()
{
	return 0;
}


int CInputModalityType::GetSigningMaxCount()
{
	return 1;
}


int CInputModalityType::GetSigningCount()
{
	return ChildCountInternal(Element, _T(""), _T("Signing"));
}


bool CInputModalityType::HasSigning()
{
	return InternalHasChild(Element, _T(""), _T("Signing"));
}


void CInputModalityType::AddSigning(CSigningType& Signing)
{
	InternalAppendNode(_T(""), _T("Signing"), Signing);
}


void CInputModalityType::InsertSigningAt(CSigningType& Signing, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Signing"), nIndex, Signing);
}


void CInputModalityType::ReplaceSigningAt(CSigningType& Signing, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Signing"), nIndex, Signing);
}



CSigningType CInputModalityType::GetSigningAt(int nIndex)
{
	return CSigningType(InternalGetAt(Element, _T(""), _T("Signing"), nIndex));
}



CSigningType CInputModalityType::GetSigning()
{
	return GetSigningAt(0);
}


void CInputModalityType::RemoveSigningAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Signing"), nIndex);
}


void CInputModalityType::RemoveSigning()
{
	while (HasSigning())
		RemoveSigningAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CInputUserProfileType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CInputUserProfileType::GetGroupType()
{
	return eSequence;
}

int CInputUserProfileType::GetIDMinCount()
{
	return 1;
}


int CInputUserProfileType::GetIDMaxCount()
{
	return 1;
}


int CInputUserProfileType::GetIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ID"));
}


bool CInputUserProfileType::HasID()
{
	return InternalHasChild(Attribute, _T(""), _T("ID"));
}


void CInputUserProfileType::AddID(CSchemaString ID)
{
	InternalAppend(Attribute, _T(""), _T("ID"), ID);
}


void CInputUserProfileType::InsertIDAt(CSchemaString ID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}


void CInputUserProfileType::ReplaceIDAt(CSchemaString ID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}



CSchemaString CInputUserProfileType::GetIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex));
}



CSchemaString CInputUserProfileType::GetID()
{
	return GetIDAt(0);
}


void CInputUserProfileType::RemoveIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ID"), nIndex);
}


void CInputUserProfileType::RemoveID()
{
	while (HasID())
		RemoveIDAt(0);
}

int CInputUserProfileType::GetAgeMinCount()
{
	return 0;
}


int CInputUserProfileType::GetAgeMaxCount()
{
	return 1;
}


int CInputUserProfileType::GetAgeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Age"));
}


bool CInputUserProfileType::HasAge()
{
	return InternalHasChild(Attribute, _T(""), _T("Age"));
}


void CInputUserProfileType::AddAge(CSchemaInt Age)
{
	InternalAppend(Attribute, _T(""), _T("Age"), Age);
}


void CInputUserProfileType::InsertAgeAt(CSchemaInt Age, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Age"), nIndex, Age);
}


void CInputUserProfileType::ReplaceAgeAt(CSchemaInt Age, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Age"), nIndex, Age);
}



CSchemaInt CInputUserProfileType::GetAgeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Age"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Age"), nIndex));
}



CSchemaInt CInputUserProfileType::GetAge()
{
	return GetAgeAt(0);
}


void CInputUserProfileType::RemoveAgeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Age"), nIndex);
}


void CInputUserProfileType::RemoveAge()
{
	while (HasAge())
		RemoveAgeAt(0);
}

int CInputUserProfileType::GetGenderMinCount()
{
	return 0;
}


int CInputUserProfileType::GetGenderMaxCount()
{
	return 1;
}


int CInputUserProfileType::GetGenderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Gender"));
}


bool CInputUserProfileType::HasGender()
{
	return InternalHasChild(Attribute, _T(""), _T("Gender"));
}


void CInputUserProfileType::AddGender(CSchemaString Gender)
{
	InternalAppend(Attribute, _T(""), _T("Gender"), Gender);
}


void CInputUserProfileType::InsertGenderAt(CSchemaString Gender, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Gender"), nIndex, Gender);
}


void CInputUserProfileType::ReplaceGenderAt(CSchemaString Gender, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Gender"), nIndex, Gender);
}



CSchemaString CInputUserProfileType::GetGenderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Gender"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Gender"), nIndex));
}



CSchemaString CInputUserProfileType::GetGender()
{
	return GetGenderAt(0);
}


void CInputUserProfileType::RemoveGenderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Gender"), nIndex);
}


void CInputUserProfileType::RemoveGender()
{
	while (HasGender())
		RemoveGenderAt(0);
}

int CInputUserProfileType::GetEmailMinCount()
{
	return 0;
}


int CInputUserProfileType::GetEmailMaxCount()
{
	return 1;
}


int CInputUserProfileType::GetEmailCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Email"));
}


bool CInputUserProfileType::HasEmail()
{
	return InternalHasChild(Attribute, _T(""), _T("Email"));
}


void CInputUserProfileType::AddEmail(CSchemaString Email)
{
	InternalAppend(Attribute, _T(""), _T("Email"), Email);
}


void CInputUserProfileType::InsertEmailAt(CSchemaString Email, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Email"), nIndex, Email);
}


void CInputUserProfileType::ReplaceEmailAt(CSchemaString Email, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Email"), nIndex, Email);
}



CSchemaString CInputUserProfileType::GetEmailAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Email"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Email"), nIndex));
}



CSchemaString CInputUserProfileType::GetEmail()
{
	return GetEmailAt(0);
}


void CInputUserProfileType::RemoveEmailAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Email"), nIndex);
}


void CInputUserProfileType::RemoveEmail()
{
	while (HasEmail())
		RemoveEmailAt(0);
}

int CInputUserProfileType::GetPasswordMinCount()
{
	return 0;
}


int CInputUserProfileType::GetPasswordMaxCount()
{
	return 1;
}


int CInputUserProfileType::GetPasswordCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Password"));
}


bool CInputUserProfileType::HasPassword()
{
	return InternalHasChild(Attribute, _T(""), _T("Password"));
}


void CInputUserProfileType::AddPassword(CSchemaString Password)
{
	InternalAppend(Attribute, _T(""), _T("Password"), Password);
}


void CInputUserProfileType::InsertPasswordAt(CSchemaString Password, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Password"), nIndex, Password);
}


void CInputUserProfileType::ReplacePasswordAt(CSchemaString Password, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Password"), nIndex, Password);
}



CSchemaString CInputUserProfileType::GetPasswordAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Password"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Password"), nIndex));
}



CSchemaString CInputUserProfileType::GetPassword()
{
	return GetPasswordAt(0);
}


void CInputUserProfileType::RemovePasswordAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Password"), nIndex);
}


void CInputUserProfileType::RemovePassword()
{
	while (HasPassword())
		RemovePasswordAt(0);
}


int CInputUserProfileType::GetAccessCodeMinCount()
{
	return 0;
}


int CInputUserProfileType::GetAccessCodeMaxCount()
{
	return 1;
}


int CInputUserProfileType::GetAccessCodeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("AccessCode"));
}


bool CInputUserProfileType::HasAccessCode()
{
	return InternalHasChild(Attribute, _T(""), _T("AccessCode"));
}


void CInputUserProfileType::AddAccessCode(CSchemaString AccessCode)
{
	InternalAppend(Attribute, _T(""), _T("AccessCode"), AccessCode);
}


void CInputUserProfileType::InsertAccessCodeAt(CSchemaString AccessCode, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("AccessCode"), nIndex, AccessCode);
}


void CInputUserProfileType::ReplaceAccessCodeAt(CSchemaString AccessCode, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("AccessCode"), nIndex, AccessCode);
}



CSchemaString CInputUserProfileType::GetAccessCodeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("AccessCode"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("AccessCode"), nIndex));
}



CSchemaString CInputUserProfileType::GetAccessCode()
{
	return GetAccessCodeAt(0);
}


void CInputUserProfileType::RemoveAccessCodeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("AccessCode"), nIndex);
}


void CInputUserProfileType::RemoveAccessCode()
{
	while (HasAccessCode())
		RemoveAccessCodeAt(0);
}

int CInputUserProfileType::GetInputModalityMinCount()
{
	return 0;
}


int CInputUserProfileType::GetInputModalityMaxCount()
{
	return 1;
}


int CInputUserProfileType::GetInputModalityCount()
{
	return ChildCountInternal(Element, _T(""), _T("InputModality"));
}


bool CInputUserProfileType::HasInputModality()
{
	return InternalHasChild(Element, _T(""), _T("InputModality"));
}


void CInputUserProfileType::AddInputModality(CInputModalityType& InputModality)
{
	InternalAppendNode(_T(""), _T("InputModality"), InputModality);
}


void CInputUserProfileType::InsertInputModalityAt(CInputModalityType& InputModality, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("InputModality"), nIndex, InputModality);
}


void CInputUserProfileType::ReplaceInputModalityAt(CInputModalityType& InputModality, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("InputModality"), nIndex, InputModality);
}



CInputModalityType CInputUserProfileType::GetInputModalityAt(int nIndex)
{
	return CInputModalityType(InternalGetAt(Element, _T(""), _T("InputModality"), nIndex));
}



CInputModalityType CInputUserProfileType::GetInputModality()
{
	return GetInputModalityAt(0);
}


void CInputUserProfileType::RemoveInputModalityAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("InputModality"), nIndex);
}


void CInputUserProfileType::RemoveInputModality()
{
	while (HasInputModality())
		RemoveInputModalityAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CLanguageType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CLanguageType::GetGroupType()
{
	return eSequence;
}

int CLanguageType::GetIDMinCount()
{
	return 1;
}


int CLanguageType::GetIDMaxCount()
{
	return 1;
}


int CLanguageType::GetIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ID"));
}


bool CLanguageType::HasID()
{
	return InternalHasChild(Attribute, _T(""), _T("ID"));
}


void CLanguageType::AddID(CSchemaString ID)
{
	InternalAppend(Attribute, _T(""), _T("ID"), ID);
}


void CLanguageType::InsertIDAt(CSchemaString ID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}


void CLanguageType::ReplaceIDAt(CSchemaString ID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}



CSchemaString CLanguageType::GetIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex));
}



CSchemaString CLanguageType::GetID()
{
	return GetIDAt(0);
}


void CLanguageType::RemoveIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ID"), nIndex);
}


void CLanguageType::RemoveID()
{
	while (HasID())
		RemoveIDAt(0);
}

int CLanguageType::GetDialectMinCount()
{
	return 0;
}


int CLanguageType::GetDialectMaxCount()
{
	return 1;
}


int CLanguageType::GetDialectCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Dialect"));
}


bool CLanguageType::HasDialect()
{
	return InternalHasChild(Attribute, _T(""), _T("Dialect"));
}


void CLanguageType::AddDialect(CSchemaString Dialect)
{
	InternalAppend(Attribute, _T(""), _T("Dialect"), Dialect);
}


void CLanguageType::InsertDialectAt(CSchemaString Dialect, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Dialect"), nIndex, Dialect);
}


void CLanguageType::ReplaceDialectAt(CSchemaString Dialect, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Dialect"), nIndex, Dialect);
}



CSchemaString CLanguageType::GetDialectAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Dialect"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Dialect"), nIndex));
}



CSchemaString CLanguageType::GetDialect()
{
	return GetDialectAt(0);
}


void CLanguageType::RemoveDialectAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Dialect"), nIndex);
}


void CLanguageType::RemoveDialect()
{
	while (HasDialect())
		RemoveDialectAt(0);
}

int CLanguageType::GetFluencyMinCount()
{
	return 1;
}


int CLanguageType::GetFluencyMaxCount()
{
	return 1;
}


int CLanguageType::GetFluencyCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Fluency"));
}


bool CLanguageType::HasFluency()
{
	return InternalHasChild(Attribute, _T(""), _T("Fluency"));
}


void CLanguageType::AddFluency(CSchemaInt Fluency)
{
	InternalAppend(Attribute, _T(""), _T("Fluency"), Fluency);
}


void CLanguageType::InsertFluencyAt(CSchemaInt Fluency, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Fluency"), nIndex, Fluency);
}


void CLanguageType::ReplaceFluencyAt(CSchemaInt Fluency, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Fluency"), nIndex, Fluency);
}



CSchemaInt CLanguageType::GetFluencyAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Fluency"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Fluency"), nIndex));
}



CSchemaInt CLanguageType::GetFluency()
{
	return GetFluencyAt(0);
}


void CLanguageType::RemoveFluencyAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Fluency"), nIndex);
}


void CLanguageType::RemoveFluency()
{
	while (HasFluency())
		RemoveFluencyAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CLanguageTypeType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CLanguageTypeType::GetGroupType()
{
	return eSequence;
}

int CLanguageTypeType::GetIDMinCount()
{
	return 1;
}


int CLanguageTypeType::GetIDMaxCount()
{
	return 1;
}


int CLanguageTypeType::GetIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ID"));
}


bool CLanguageTypeType::HasID()
{
	return InternalHasChild(Attribute, _T(""), _T("ID"));
}


void CLanguageTypeType::AddID(CSchemaString ID)
{
	InternalAppend(Attribute, _T(""), _T("ID"), ID);
}


void CLanguageTypeType::InsertIDAt(CSchemaString ID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}


void CLanguageTypeType::ReplaceIDAt(CSchemaString ID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}



CSchemaString CLanguageTypeType::GetIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex));
}



CSchemaString CLanguageTypeType::GetID()
{
	return GetIDAt(0);
}


void CLanguageTypeType::RemoveIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ID"), nIndex);
}


void CLanguageTypeType::RemoveID()
{
	while (HasID())
		RemoveIDAt(0);
}

int CLanguageTypeType::GetDialectMinCount()
{
	return 0;
}


int CLanguageTypeType::GetDialectMaxCount()
{
	return 1;
}


int CLanguageTypeType::GetDialectCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Dialect"));
}


bool CLanguageTypeType::HasDialect()
{
	return InternalHasChild(Attribute, _T(""), _T("Dialect"));
}


void CLanguageTypeType::AddDialect(CSchemaString Dialect)
{
	InternalAppend(Attribute, _T(""), _T("Dialect"), Dialect);
}


void CLanguageTypeType::InsertDialectAt(CSchemaString Dialect, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Dialect"), nIndex, Dialect);
}


void CLanguageTypeType::ReplaceDialectAt(CSchemaString Dialect, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Dialect"), nIndex, Dialect);
}



CSchemaString CLanguageTypeType::GetDialectAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Dialect"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Dialect"), nIndex));
}



CSchemaString CLanguageTypeType::GetDialect()
{
	return GetDialectAt(0);
}


void CLanguageTypeType::RemoveDialectAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Dialect"), nIndex);
}


void CLanguageTypeType::RemoveDialect()
{
	while (HasDialect())
		RemoveDialectAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CMCMLType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CMCMLType::GetGroupType()
{
	return eSequence;
}

int CMCMLType::GetVersionMinCount()
{
	return 1;
}


int CMCMLType::GetVersionMaxCount()
{
	return 1;
}


int CMCMLType::GetVersionCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Version"));
}


bool CMCMLType::HasVersion()
{
	return InternalHasChild(Attribute, _T(""), _T("Version"));
}


void CMCMLType::AddVersion(CSchemaString Version)
{
	InternalAppend(Attribute, _T(""), _T("Version"), Version);
}


void CMCMLType::InsertVersionAt(CSchemaString Version, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Version"), nIndex, Version);
}


void CMCMLType::ReplaceVersionAt(CSchemaString Version, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Version"), nIndex, Version);
}



CSchemaString CMCMLType::GetVersionAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Version"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Version"), nIndex));
}



CSchemaString CMCMLType::GetVersion()
{
	return GetVersionAt(0);
}


void CMCMLType::RemoveVersionAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Version"), nIndex);
}


void CMCMLType::RemoveVersion()
{
	while (HasVersion())
		RemoveVersionAt(0);
}

int CMCMLType::GetUserMinCount()
{
	return 1;
}


int CMCMLType::GetUserMaxCount()
{
	return 1;
}


int CMCMLType::GetUserCount()
{
	return ChildCountInternal(Element, _T(""), _T("User"));
}


bool CMCMLType::HasUser()
{
	return InternalHasChild(Element, _T(""), _T("User"));
}


void CMCMLType::AddUser(CUserType& User)
{
	InternalAppendNode(_T(""), _T("User"), User);
}


void CMCMLType::InsertUserAt(CUserType& User, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("User"), nIndex, User);
}


void CMCMLType::ReplaceUserAt(CUserType& User, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("User"), nIndex, User);
}



CUserType CMCMLType::GetUserAt(int nIndex)
{
	return CUserType(InternalGetAt(Element, _T(""), _T("User"), nIndex));
}



CUserType CMCMLType::GetUser()
{
	return GetUserAt(0);
}


void CMCMLType::RemoveUserAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("User"), nIndex);
}


void CMCMLType::RemoveUser()
{
	while (HasUser())
		RemoveUserAt(0);
}

int CMCMLType::GetServerMinCount()
{
	return 1;
}


int CMCMLType::GetServerMaxCount()
{
	return INT_MAX;
}


int CMCMLType::GetServerCount()
{
	return ChildCountInternal(Element, _T(""), _T("Server"));
}


bool CMCMLType::HasServer()
{
	return InternalHasChild(Element, _T(""), _T("Server"));
}


void CMCMLType::AddServer(CServerType& Server)
{
	InternalAppendNode(_T(""), _T("Server"), Server);
}


void CMCMLType::InsertServerAt(CServerType& Server, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Server"), nIndex, Server);
}


void CMCMLType::ReplaceServerAt(CServerType& Server, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Server"), nIndex, Server);
}



CServerType CMCMLType::GetServerAt(int nIndex)
{
	return CServerType(InternalGetAt(Element, _T(""), _T("Server"), nIndex));
}



CServerType CMCMLType::GetServer()
{
	return GetServerAt(0);
}


void CMCMLType::RemoveServerAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Server"), nIndex);
}


void CMCMLType::RemoveServer()
{
	while (HasServer())
		RemoveServerAt(0);
}

int CMCMLType::GetHistoryMinCount()
{
	return 0;
}


int CMCMLType::GetHistoryMaxCount()
{
	return INT_MAX;
}


int CMCMLType::GetHistoryCount()
{
	return ChildCountInternal(Element, _T(""), _T("History"));
}


bool CMCMLType::HasHistory()
{
	return InternalHasChild(Element, _T(""), _T("History"));
}


void CMCMLType::AddHistory(CHistoryType& History)
{
	InternalAppendNode(_T(""), _T("History"), History);
}


void CMCMLType::InsertHistoryAt(CHistoryType& History, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("History"), nIndex, History);
}


void CMCMLType::ReplaceHistoryAt(CHistoryType& History, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("History"), nIndex, History);
}



CHistoryType CMCMLType::GetHistoryAt(int nIndex)
{
	return CHistoryType(InternalGetAt(Element, _T(""), _T("History"), nIndex));
}



CHistoryType CMCMLType::GetHistory()
{
	return GetHistoryAt(0);
}


void CMCMLType::RemoveHistoryAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("History"), nIndex);
}


void CMCMLType::RemoveHistory()
{
	while (HasHistory())
		RemoveHistoryAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CPersonalityType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CPersonalityType::GetGroupType()
{
	return eSequence;
}

int CPersonalityType::GetIDMinCount()
{
	return 1;
}


int CPersonalityType::GetIDMaxCount()
{
	return 1;
}


int CPersonalityType::GetIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ID"));
}


bool CPersonalityType::HasID()
{
	return InternalHasChild(Attribute, _T(""), _T("ID"));
}


void CPersonalityType::AddID(CSchemaString ID)
{
	InternalAppend(Attribute, _T(""), _T("ID"), ID);
}


void CPersonalityType::InsertIDAt(CSchemaString ID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}


void CPersonalityType::ReplaceIDAt(CSchemaString ID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}



CSchemaString CPersonalityType::GetIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex));
}



CSchemaString CPersonalityType::GetID()
{
	return GetIDAt(0);
}


void CPersonalityType::RemoveIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ID"), nIndex);
}


void CPersonalityType::RemoveID()
{
	while (HasID())
		RemoveIDAt(0);
}

int CPersonalityType::GetAgeMinCount()
{
	return 1;
}


int CPersonalityType::GetAgeMaxCount()
{
	return 1;
}


int CPersonalityType::GetAgeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Age"));
}


bool CPersonalityType::HasAge()
{
	return InternalHasChild(Attribute, _T(""), _T("Age"));
}


void CPersonalityType::AddAge(CSchemaInt Age)
{
	InternalAppend(Attribute, _T(""), _T("Age"), Age);
}


void CPersonalityType::InsertAgeAt(CSchemaInt Age, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Age"), nIndex, Age);
}


void CPersonalityType::ReplaceAgeAt(CSchemaInt Age, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Age"), nIndex, Age);
}



CSchemaInt CPersonalityType::GetAgeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Age"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Age"), nIndex));
}



CSchemaInt CPersonalityType::GetAge()
{
	return GetAgeAt(0);
}


void CPersonalityType::RemoveAgeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Age"), nIndex);
}


void CPersonalityType::RemoveAge()
{
	while (HasAge())
		RemoveAgeAt(0);
}

int CPersonalityType::GetGenderMinCount()
{
	return 1;
}


int CPersonalityType::GetGenderMaxCount()
{
	return 1;
}


int CPersonalityType::GetGenderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Gender"));
}


bool CPersonalityType::HasGender()
{
	return InternalHasChild(Attribute, _T(""), _T("Gender"));
}


void CPersonalityType::AddGender(CSchemaString Gender)
{
	InternalAppend(Attribute, _T(""), _T("Gender"), Gender);
}


void CPersonalityType::InsertGenderAt(CSchemaString Gender, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Gender"), nIndex, Gender);
}


void CPersonalityType::ReplaceGenderAt(CSchemaString Gender, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Gender"), nIndex, Gender);
}



CSchemaString CPersonalityType::GetGenderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Gender"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Gender"), nIndex));
}



CSchemaString CPersonalityType::GetGender()
{
	return GetGenderAt(0);
}


void CPersonalityType::RemoveGenderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Gender"), nIndex);
}


void CPersonalityType::RemoveGender()
{
	while (HasGender())
		RemoveGenderAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CModelTypeType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CModelTypeType::GetGroupType()
{
	return eSequence;
}

int CModelTypeType::GetDomainMinCount()
{
	return 0;
}


int CModelTypeType::GetDomainMaxCount()
{
	return INT_MAX;
}


int CModelTypeType::GetDomainCount()
{
	return ChildCountInternal(Element, _T(""), _T("Domain"));
}


bool CModelTypeType::HasDomain()
{
	return InternalHasChild(Element, _T(""), _T("Domain"));
}


void CModelTypeType::AddDomain(CSchemaString Domain)
{
	InternalAppend(Element, _T(""), _T("Domain"), Domain);
}


void CModelTypeType::InsertDomainAt(CSchemaString Domain, int nIndex)
{
	InternalInsertAt(Element, _T(""), _T("Domain"), nIndex, Domain);
}


void CModelTypeType::ReplaceDomainAt(CSchemaString Domain, int nIndex)
{
	InternalReplaceAt(Element, _T(""), _T("Domain"), nIndex, Domain);
}



CSchemaString CModelTypeType::GetDomainAt(int nIndex)
{
	return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("Domain"), nIndex)).c_str();
	//return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("Domain"), nIndex));
}



CSchemaString CModelTypeType::GetDomain()
{
	return GetDomainAt(0);
}


void CModelTypeType::RemoveDomainAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Domain"), nIndex);
}


void CModelTypeType::RemoveDomain()
{
	while (HasDomain())
		RemoveDomainAt(0);
}

int CModelTypeType::GetTaskMinCount()
{
	return 0;
}


int CModelTypeType::GetTaskMaxCount()
{
	return INT_MAX;
}


int CModelTypeType::GetTaskCount()
{
	return ChildCountInternal(Element, _T(""), _T("Task"));
}


bool CModelTypeType::HasTask()
{
	return InternalHasChild(Element, _T(""), _T("Task"));
}


void CModelTypeType::AddTask(CSchemaString Task)
{
	InternalAppend(Element, _T(""), _T("Task"), Task);
}


void CModelTypeType::InsertTaskAt(CSchemaString Task, int nIndex)
{
	InternalInsertAt(Element, _T(""), _T("Task"), nIndex, Task);
}


void CModelTypeType::ReplaceTaskAt(CSchemaString Task, int nIndex)
{
	InternalReplaceAt(Element, _T(""), _T("Task"), nIndex, Task);
}



CSchemaString CModelTypeType::GetTaskAt(int nIndex)
{
	return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("Task"), nIndex)).c_str();
	//return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("Task"), nIndex));
}



CSchemaString CModelTypeType::GetTask()
{
	return GetTaskAt(0);
}


void CModelTypeType::RemoveTaskAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Task"), nIndex);
}


void CModelTypeType::RemoveTask()
{
	while (HasTask())
		RemoveTaskAt(0);
}

int CModelTypeType::GetPersonalityMinCount()
{
	return 0;
}


int CModelTypeType::GetPersonalityMaxCount()
{
	return 1;
}


int CModelTypeType::GetPersonalityCount()
{
	return ChildCountInternal(Element, _T(""), _T("Personality"));
}


bool CModelTypeType::HasPersonality()
{
	return InternalHasChild(Element, _T(""), _T("Personality"));
}


void CModelTypeType::AddPersonality(CPersonalityType& Personality)
{
	InternalAppendNode(_T(""), _T("Personality"), Personality);
}


void CModelTypeType::InsertPersonalityAt(CPersonalityType& Personality, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Personality"), nIndex, Personality);
}


void CModelTypeType::ReplacePersonalityAt(CPersonalityType& Personality, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Personality"), nIndex, Personality);
}



CPersonalityType CModelTypeType::GetPersonalityAt(int nIndex)
{
	return CPersonalityType(InternalGetAt(Element, _T(""), _T("Personality"), nIndex));
}



CPersonalityType CModelTypeType::GetPersonality()
{
	return GetPersonalityAt(0);
}


void CModelTypeType::RemovePersonalityAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Personality"), nIndex);
}


void CModelTypeType::RemovePersonality()
{
	while (HasPersonality())
		RemovePersonalityAt(0);
}

int CModelTypeType::GetLanguageMinCount()
{
	return 1;
}


int CModelTypeType::GetLanguageMaxCount()
{
	return 1;
}


int CModelTypeType::GetLanguageCount()
{
	return ChildCountInternal(Element, _T(""), _T("Language"));
}


bool CModelTypeType::HasLanguage()
{
	return InternalHasChild(Element, _T(""), _T("Language"));
}


void CModelTypeType::AddLanguage(CLanguageType& Language)
{
	InternalAppendNode(_T(""), _T("Language"), Language);
}


void CModelTypeType::InsertLanguageAt(CLanguageType& Language, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Language"), nIndex, Language);
}


void CModelTypeType::ReplaceLanguageAt(CLanguageType& Language, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Language"), nIndex, Language);
}



CLanguageType CModelTypeType::GetLanguageAt(int nIndex)
{
	return CLanguageType(InternalGetAt(Element, _T(""), _T("Language"), nIndex));
}



CLanguageType CModelTypeType::GetLanguage()
{
	return GetLanguageAt(0);
}


void CModelTypeType::RemoveLanguageAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Language"), nIndex);
}


void CModelTypeType::RemoveLanguage()
{
	while (HasLanguage())
		RemoveLanguageAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class COutputType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType COutputType::GetGroupType()
{
	return eSequence;
}

int COutputType::GetDataMinCount()
{
	return 1;
}


int COutputType::GetDataMaxCount()
{
	return 1;
}


int COutputType::GetDataCount()
{
	return ChildCountInternal(Element, _T(""), _T("Data"));
}


bool COutputType::HasData()
{
	return InternalHasChild(Element, _T(""), _T("Data"));
}


void COutputType::AddData(CDataType& Data)
{
	InternalAppendNode(_T(""), _T("Data"), Data);
}


void COutputType::InsertDataAt(CDataType& Data, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Data"), nIndex, Data);
}


void COutputType::ReplaceDataAt(CDataType& Data, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Data"), nIndex, Data);
}



CDataType COutputType::GetDataAt(int nIndex)
{
	return CDataType(InternalGetAt(Element, _T(""), _T("Data"), nIndex));
}



CDataType COutputType::GetData()
{
	return GetDataAt(0);
}


void COutputType::RemoveDataAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Data"), nIndex);
}


void COutputType::RemoveData()
{
	while (HasData())
		RemoveDataAt(0);
}

int COutputType::GetAttachedBinaryMinCount()
{
	return 0;
}


int COutputType::GetAttachedBinaryMaxCount()
{
	return INT_MAX;
}


int COutputType::GetAttachedBinaryCount()
{
	return ChildCountInternal(Element, _T(""), _T("AttachedBinary"));
}


bool COutputType::HasAttachedBinary()
{
	return InternalHasChild(Element, _T(""), _T("AttachedBinary"));
}


void COutputType::AddAttachedBinary(CAttachedBinaryType& AttachedBinary)
{
	InternalAppendNode(_T(""), _T("AttachedBinary"), AttachedBinary);
}


void COutputType::InsertAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("AttachedBinary"), nIndex, AttachedBinary);
}


void COutputType::ReplaceAttachedBinaryAt(CAttachedBinaryType& AttachedBinary, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("AttachedBinary"), nIndex, AttachedBinary);
}



CAttachedBinaryType COutputType::GetAttachedBinaryAt(int nIndex)
{
	return CAttachedBinaryType(InternalGetAt(Element, _T(""), _T("AttachedBinary"), nIndex));
}



CAttachedBinaryType COutputType::GetAttachedBinary()
{
	return GetAttachedBinaryAt(0);
}


void COutputType::RemoveAttachedBinaryAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("AttachedBinary"), nIndex);
}


void COutputType::RemoveAttachedBinary()
{
	while (HasAttachedBinary())
		RemoveAttachedBinaryAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CReceiverType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CReceiverType::GetGroupType()
{
	return eSequence;
}

int CReceiverType::GetDeviceMinCount()
{
	return 1;
}


int CReceiverType::GetDeviceMaxCount()
{
	return 1;
}


int CReceiverType::GetDeviceCount()
{
	return ChildCountInternal(Element, _T(""), _T("Device"));
}


bool CReceiverType::HasDevice()
{
	return InternalHasChild(Element, _T(""), _T("Device"));
}


void CReceiverType::AddDevice(CDeviceType& Device)
{
	InternalAppendNode(_T(""), _T("Device"), Device);
}


void CReceiverType::InsertDeviceAt(CDeviceType& Device, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Device"), nIndex, Device);
}


void CReceiverType::ReplaceDeviceAt(CDeviceType& Device, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Device"), nIndex, Device);
}



CDeviceType CReceiverType::GetDeviceAt(int nIndex)
{
	return CDeviceType(InternalGetAt(Element, _T(""), _T("Device"), nIndex));
}



CDeviceType CReceiverType::GetDevice()
{
	return GetDeviceAt(0);
}


void CReceiverType::RemoveDeviceAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Device"), nIndex);
}


void CReceiverType::RemoveDevice()
{
	while (HasDevice())
		RemoveDeviceAt(0);
}

int CReceiverType::GetUserProfileMinCount()
{
	return 1;
}


int CReceiverType::GetUserProfileMaxCount()
{
	return INT_MAX;
}


int CReceiverType::GetUserProfileCount()
{
	return ChildCountInternal(Element, _T(""), _T("UserProfile"));
}


bool CReceiverType::HasUserProfile()
{
	return InternalHasChild(Element, _T(""), _T("UserProfile"));
}


void CReceiverType::AddUserProfile(CUserProfileType& UserProfile)
{
	InternalAppendNode(_T(""), _T("UserProfile"), UserProfile);
}


void CReceiverType::InsertUserProfileAt(CUserProfileType& UserProfile, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("UserProfile"), nIndex, UserProfile);
}


void CReceiverType::ReplaceUserProfileAt(CUserProfileType& UserProfile, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("UserProfile"), nIndex, UserProfile);
}



CUserProfileType CReceiverType::GetUserProfileAt(int nIndex)
{
	return CUserProfileType(InternalGetAt(Element, _T(""), _T("UserProfile"), nIndex));
}



CUserProfileType CReceiverType::GetUserProfile()
{
	return GetUserProfileAt(0);
}


void CReceiverType::RemoveUserProfileAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("UserProfile"), nIndex);
}


void CReceiverType::RemoveUserProfile()
{
	while (HasUserProfile())
		RemoveUserProfileAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CRequestType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CRequestType::GetGroupType()
{
	return eSequence;
}

int CRequestType::GetServiceMinCount()
{
	return 1;
}


int CRequestType::GetServiceMaxCount()
{
	return 1;
}


int CRequestType::GetServiceCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Service"));
}


bool CRequestType::HasService()
{
	return InternalHasChild(Attribute, _T(""), _T("Service"));
}


void CRequestType::AddService(CSchemaString Service)
{
	InternalAppend(Attribute, _T(""), _T("Service"), Service);
}


void CRequestType::InsertServiceAt(CSchemaString Service, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}


void CRequestType::ReplaceServiceAt(CSchemaString Service, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}



CSchemaString CRequestType::GetServiceAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex));
}



CSchemaString CRequestType::GetService()
{
	return GetServiceAt(0);
}


void CRequestType::RemoveServiceAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Service"), nIndex);
}


void CRequestType::RemoveService()
{
	while (HasService())
		RemoveServiceAt(0);
}

int CRequestType::GetProcessOrderMinCount()
{
	return 1;
}


int CRequestType::GetProcessOrderMaxCount()
{
	return 1;
}


int CRequestType::GetProcessOrderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ProcessOrder"));
}


bool CRequestType::HasProcessOrder()
{
	return InternalHasChild(Attribute, _T(""), _T("ProcessOrder"));
}


void CRequestType::AddProcessOrder(CSchemaInt ProcessOrder)
{
	InternalAppend(Attribute, _T(""), _T("ProcessOrder"), ProcessOrder);
}


void CRequestType::InsertProcessOrderAt(CSchemaInt ProcessOrder, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ProcessOrder"), nIndex, ProcessOrder);
}


void CRequestType::ReplaceProcessOrderAt(CSchemaInt ProcessOrder, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ProcessOrder"), nIndex, ProcessOrder);
}



CSchemaInt CRequestType::GetProcessOrderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ProcessOrder"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ProcessOrder"), nIndex));
}



CSchemaInt CRequestType::GetProcessOrder()
{
	return GetProcessOrderAt(0);
}


void CRequestType::RemoveProcessOrderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ProcessOrder"), nIndex);
}


void CRequestType::RemoveProcessOrder()
{
	while (HasProcessOrder())
		RemoveProcessOrderAt(0);
}

int CRequestType::GetRoutingMinCount()
{
	return 1;
}


int CRequestType::GetRoutingMaxCount()
{
	return 1;
}


int CRequestType::GetRoutingCount()
{
	return ChildCountInternal(Element, _T(""), _T("Routing"));
}


bool CRequestType::HasRouting()
{
	return InternalHasChild(Element, _T(""), _T("Routing"));
}


void CRequestType::AddRouting(CRoutingType& Routing)
{
	InternalAppendNode(_T(""), _T("Routing"), Routing);
}


void CRequestType::InsertRoutingAt(CRoutingType& Routing, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Routing"), nIndex, Routing);
}


void CRequestType::ReplaceRoutingAt(CRoutingType& Routing, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Routing"), nIndex, Routing);
}



CRoutingType CRequestType::GetRoutingAt(int nIndex)
{
	return CRoutingType(InternalGetAt(Element, _T(""), _T("Routing"), nIndex));
}



CRoutingType CRequestType::GetRouting()
{
	return GetRoutingAt(0);
}


void CRequestType::RemoveRoutingAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Routing"), nIndex);
}


void CRequestType::RemoveRouting()
{
	while (HasRouting())
		RemoveRoutingAt(0);
}

int CRequestType::GetInputUserProfileMinCount()
{
	return 0;
}


int CRequestType::GetInputUserProfileMaxCount()
{
	return INT_MAX;
}


int CRequestType::GetInputUserProfileCount()
{
	return ChildCountInternal(Element, _T(""), _T("InputUserProfile"));
}


bool CRequestType::HasInputUserProfile()
{
	return InternalHasChild(Element, _T(""), _T("InputUserProfile"));
}


void CRequestType::AddInputUserProfile(CInputUserProfileType& InputUserProfile)
{
	InternalAppendNode(_T(""), _T("InputUserProfile"), InputUserProfile);
}


void CRequestType::InsertInputUserProfileAt(CInputUserProfileType& InputUserProfile, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("InputUserProfile"), nIndex, InputUserProfile);
}


void CRequestType::ReplaceInputUserProfileAt(CInputUserProfileType& InputUserProfile, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("InputUserProfile"), nIndex, InputUserProfile);
}



CInputUserProfileType CRequestType::GetInputUserProfileAt(int nIndex)
{
	return CInputUserProfileType(InternalGetAt(Element, _T(""), _T("InputUserProfile"), nIndex));
}



CInputUserProfileType CRequestType::GetInputUserProfile()
{
	return GetInputUserProfileAt(0);
}


void CRequestType::RemoveInputUserProfileAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("InputUserProfile"), nIndex);
}


void CRequestType::RemoveInputUserProfile()
{
	while (HasInputUserProfile())
		RemoveInputUserProfileAt(0);
}

int CRequestType::GetTargetOutputMinCount()
{
	return 0;
}


int CRequestType::GetTargetOutputMaxCount()
{
	return 1;
}


int CRequestType::GetTargetOutputCount()
{
	return ChildCountInternal(Element, _T(""), _T("TargetOutput"));
}


bool CRequestType::HasTargetOutput()
{
	return InternalHasChild(Element, _T(""), _T("TargetOutput"));
}


void CRequestType::AddTargetOutput(CTargetOutputType& TargetOutput)
{
	InternalAppendNode(_T(""), _T("TargetOutput"), TargetOutput);
}


void CRequestType::InsertTargetOutputAt(CTargetOutputType& TargetOutput, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("TargetOutput"), nIndex, TargetOutput);
}


void CRequestType::ReplaceTargetOutputAt(CTargetOutputType& TargetOutput, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("TargetOutput"), nIndex, TargetOutput);
}



CTargetOutputType CRequestType::GetTargetOutputAt(int nIndex)
{
	return CTargetOutputType(InternalGetAt(Element, _T(""), _T("TargetOutput"), nIndex));
}



CTargetOutputType CRequestType::GetTargetOutput()
{
	return GetTargetOutputAt(0);
}


void CRequestType::RemoveTargetOutputAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("TargetOutput"), nIndex);
}


void CRequestType::RemoveTargetOutput()
{
	while (HasTargetOutput())
		RemoveTargetOutputAt(0);
}

int CRequestType::GetInputMinCount()
{
	return 0;
}


int CRequestType::GetInputMaxCount()
{
	return 1;
}


int CRequestType::GetInputCount()
{
	return ChildCountInternal(Element, _T(""), _T("Input"));
}


bool CRequestType::HasInput()
{
	return InternalHasChild(Element, _T(""), _T("Input"));
}


void CRequestType::AddInput(CInputType& Input)
{
	InternalAppendNode(_T(""), _T("Input"), Input);
}


void CRequestType::InsertInputAt(CInputType& Input, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Input"), nIndex, Input);
}


void CRequestType::ReplaceInputAt(CInputType& Input, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Input"), nIndex, Input);
}



CInputType CRequestType::GetInputAt(int nIndex)
{
	return CInputType(InternalGetAt(Element, _T(""), _T("Input"), nIndex));
}



CInputType CRequestType::GetInput()
{
	return GetInputAt(0);
}


void CRequestType::RemoveInputAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Input"), nIndex);
}


void CRequestType::RemoveInput()
{
	while (HasInput())
		RemoveInputAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CResponseType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CResponseType::GetGroupType()
{
	return eSequence;
}

int CResponseType::GetServiceMinCount()
{
	return 1;
}


int CResponseType::GetServiceMaxCount()
{
	return 1;
}


int CResponseType::GetServiceCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Service"));
}


bool CResponseType::HasService()
{
	return InternalHasChild(Attribute, _T(""), _T("Service"));
}


void CResponseType::AddService(CSchemaString Service)
{
	InternalAppend(Attribute, _T(""), _T("Service"), Service);
}


void CResponseType::InsertServiceAt(CSchemaString Service, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}


void CResponseType::ReplaceServiceAt(CSchemaString Service, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Service"), nIndex, Service);
}



CSchemaString CResponseType::GetServiceAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Service"), nIndex));
}



CSchemaString CResponseType::GetService()
{
	return GetServiceAt(0);
}


void CResponseType::RemoveServiceAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Service"), nIndex);
}


void CResponseType::RemoveService()
{
	while (HasService())
		RemoveServiceAt(0);
}

int CResponseType::GetProcessOrderMinCount()
{
	return 1;
}


int CResponseType::GetProcessOrderMaxCount()
{
	return 1;
}


int CResponseType::GetProcessOrderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ProcessOrder"));
}


bool CResponseType::HasProcessOrder()
{
	return InternalHasChild(Attribute, _T(""), _T("ProcessOrder"));
}


void CResponseType::AddProcessOrder(CSchemaInt ProcessOrder)
{
	InternalAppend(Attribute, _T(""), _T("ProcessOrder"), ProcessOrder);
}


void CResponseType::InsertProcessOrderAt(CSchemaInt ProcessOrder, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ProcessOrder"), nIndex, ProcessOrder);
}


void CResponseType::ReplaceProcessOrderAt(CSchemaInt ProcessOrder, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ProcessOrder"), nIndex, ProcessOrder);
}



CSchemaInt CResponseType::GetProcessOrderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ProcessOrder"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ProcessOrder"), nIndex));
}



CSchemaInt CResponseType::GetProcessOrder()
{
	return GetProcessOrderAt(0);
}


void CResponseType::RemoveProcessOrderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ProcessOrder"), nIndex);
}


void CResponseType::RemoveProcessOrder()
{
	while (HasProcessOrder())
		RemoveProcessOrderAt(0);
}

int CResponseType::GetRoutingMinCount()
{
	return 1;
}


int CResponseType::GetRoutingMaxCount()
{
	return 1;
}


int CResponseType::GetRoutingCount()
{
	return ChildCountInternal(Element, _T(""), _T("Routing"));
}


bool CResponseType::HasRouting()
{
	return InternalHasChild(Element, _T(""), _T("Routing"));
}


void CResponseType::AddRouting(CRoutingType& Routing)
{
	InternalAppendNode(_T(""), _T("Routing"), Routing);
}


void CResponseType::InsertRoutingAt(CRoutingType& Routing, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Routing"), nIndex, Routing);
}


void CResponseType::ReplaceRoutingAt(CRoutingType& Routing, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Routing"), nIndex, Routing);
}



CRoutingType CResponseType::GetRoutingAt(int nIndex)
{
	return CRoutingType(InternalGetAt(Element, _T(""), _T("Routing"), nIndex));
}



CRoutingType CResponseType::GetRouting()
{
	return GetRoutingAt(0);
}


void CResponseType::RemoveRoutingAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Routing"), nIndex);
}


void CResponseType::RemoveRouting()
{
	while (HasRouting())
		RemoveRoutingAt(0);
}

int CResponseType::GetOutputMinCount()
{
	return 1;
}


int CResponseType::GetOutputMaxCount()
{
	return INT_MAX;
}


int CResponseType::GetOutputCount()
{
	return ChildCountInternal(Element, _T(""), _T("Output"));
}


bool CResponseType::HasOutput()
{
	return InternalHasChild(Element, _T(""), _T("Output"));
}


void CResponseType::AddOutput(COutputType& Output)
{
	InternalAppendNode(_T(""), _T("Output"), Output);
}


void CResponseType::InsertOutputAt(COutputType& Output, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Output"), nIndex, Output);
}


void CResponseType::ReplaceOutputAt(COutputType& Output, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Output"), nIndex, Output);
}



COutputType CResponseType::GetOutputAt(int nIndex)
{
	return COutputType(InternalGetAt(Element, _T(""), _T("Output"), nIndex));
}



COutputType CResponseType::GetOutput()
{
	return GetOutputAt(0);
}


void CResponseType::RemoveOutputAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Output"), nIndex);
}


void CResponseType::RemoveOutput()
{
	while (HasOutput())
		RemoveOutputAt(0);
}

int CResponseType::GetErrorMinCount()
{
	return 1;
}


int CResponseType::GetErrorMaxCount()
{
	return 1;
}


int CResponseType::GetErrorCount()
{
	return ChildCountInternal(Element, _T(""), _T("Error"));
}


bool CResponseType::HasError()
{
	return InternalHasChild(Element, _T(""), _T("Error"));
}


void CResponseType::AddError(CErrorType& Error)
{
	InternalAppendNode(_T(""), _T("Error"), Error);
}


void CResponseType::InsertErrorAt(CErrorType& Error, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Error"), nIndex, Error);
}


void CResponseType::ReplaceErrorAt(CErrorType& Error, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Error"), nIndex, Error);
}



CErrorType CResponseType::GetErrorAt(int nIndex)
{
	return CErrorType(InternalGetAt(Element, _T(""), _T("Error"), nIndex));
}



CErrorType CResponseType::GetError()
{
	return GetErrorAt(0);
}


void CResponseType::RemoveErrorAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Error"), nIndex);
}


void CResponseType::RemoveError()
{
	while (HasError())
		RemoveErrorAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CFromType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CFromType::GetGroupType()
{
	return eSequence;
}

int CFromType::GetURIMinCount()
{
	return 1;
}


int CFromType::GetURIMaxCount()
{
	return 1;
}


int CFromType::GetURICount()
{
	return ChildCountInternal(Attribute, _T(""), _T("URI"));
}


bool CFromType::HasURI()
{
	return InternalHasChild(Attribute, _T(""), _T("URI"));
}


void CFromType::AddURI(CSchemaString URI)
{
	InternalAppend(Attribute, _T(""), _T("URI"), URI);
}


void CFromType::InsertURIAt(CSchemaString URI, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("URI"), nIndex, URI);
}


void CFromType::ReplaceURIAt(CSchemaString URI, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("URI"), nIndex, URI);
}



CSchemaString CFromType::GetURIAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("URI"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("URI"), nIndex));
}



CSchemaString CFromType::GetURI()
{
	return GetURIAt(0);
}


void CFromType::RemoveURIAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("URI"), nIndex);
}


void CFromType::RemoveURI()
{
	while (HasURI())
		RemoveURIAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CToType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CToType::GetGroupType()
{
	return eSequence;
}

int CToType::GetURIMinCount()
{
	return 1;
}


int CToType::GetURIMaxCount()
{
	return 1;
}


int CToType::GetURICount()
{
	return ChildCountInternal(Attribute, _T(""), _T("URI"));
}


bool CToType::HasURI()
{
	return InternalHasChild(Attribute, _T(""), _T("URI"));
}


void CToType::AddURI(CSchemaString URI)
{
	InternalAppend(Attribute, _T(""), _T("URI"), URI);
}


void CToType::InsertURIAt(CSchemaString URI, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("URI"), nIndex, URI);
}


void CToType::ReplaceURIAt(CSchemaString URI, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("URI"), nIndex, URI);
}



CSchemaString CToType::GetURIAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("URI"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("URI"), nIndex));
}



CSchemaString CToType::GetURI()
{
	return GetURIAt(0);
}


void CToType::RemoveURIAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("URI"), nIndex);
}


void CToType::RemoveURI()
{
	while (HasURI())
		RemoveURIAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CRoutingType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CRoutingType::GetGroupType()
{
	return eSequence;
}

int CRoutingType::GetFromMinCount()
{
	return 1;
}


int CRoutingType::GetFromMaxCount()
{
	return 1;
}


int CRoutingType::GetFromCount()
{
	return ChildCountInternal(Element, _T(""), _T("From"));
}


bool CRoutingType::HasFrom()
{
	return InternalHasChild(Element, _T(""), _T("From"));
}


void CRoutingType::AddFrom(CFromType& From)
{
	InternalAppendNode(_T(""), _T("From"), From);
}


void CRoutingType::InsertFromAt(CFromType& From, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("From"), nIndex, From);
}


void CRoutingType::ReplaceFromAt(CFromType& From, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("From"), nIndex, From);
}



CFromType CRoutingType::GetFromAt(int nIndex)
{
	return CFromType(InternalGetAt(Element, _T(""), _T("From"), nIndex));
}



CFromType CRoutingType::GetFrom()
{
	return GetFromAt(0);
}


void CRoutingType::RemoveFromAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("From"), nIndex);
}


void CRoutingType::RemoveFrom()
{
	while (HasFrom())
		RemoveFromAt(0);
}

int CRoutingType::GetToMinCount()
{
	return 1;
}


int CRoutingType::GetToMaxCount()
{
	return INT_MAX;
}


int CRoutingType::GetToCount()
{
	return ChildCountInternal(Element, _T(""), _T("To"));
}


bool CRoutingType::HasTo()
{
	return InternalHasChild(Element, _T(""), _T("To"));
}


void CRoutingType::AddTo(CToType& To)
{
	InternalAppendNode(_T(""), _T("To"), To);
}


void CRoutingType::InsertToAt(CToType& To, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("To"), nIndex, To);
}


void CRoutingType::ReplaceToAt(CToType& To, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("To"), nIndex, To);
}



CToType CRoutingType::GetToAt(int nIndex)
{
	return CToType(InternalGetAt(Element, _T(""), _T("To"), nIndex));
}



CToType CRoutingType::GetTo()
{
	return GetToAt(0);
}


void CRoutingType::RemoveToAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("To"), nIndex);
}


void CRoutingType::RemoveTo()
{
	while (HasTo())
		RemoveToAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSurfaceType2
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSurfaceType2::GetGroupType()
{
	return eSequence;
}

int CSurfaceType2::GetDelimiterMinCount()
{
	return 0;
}


int CSurfaceType2::GetDelimiterMaxCount()
{
	return 1;
}


int CSurfaceType2::GetDelimiterCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Delimiter"));
}


bool CSurfaceType2::HasDelimiter()
{
	return InternalHasChild(Attribute, _T(""), _T("Delimiter"));
}


void CSurfaceType2::AddDelimiter(CSchemaString Delimiter)
{
	InternalAppend(Attribute, _T(""), _T("Delimiter"), Delimiter);
}


void CSurfaceType2::InsertDelimiterAt(CSchemaString Delimiter, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Delimiter"), nIndex, Delimiter);
}


void CSurfaceType2::ReplaceDelimiterAt(CSchemaString Delimiter, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Delimiter"), nIndex, Delimiter);
}



CSchemaString CSurfaceType2::GetDelimiterAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Delimiter"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Delimiter"), nIndex));
}



CSchemaString CSurfaceType2::GetDelimiter()
{
	return GetDelimiterAt(0);
}


void CSurfaceType2::RemoveDelimiterAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Delimiter"), nIndex);
}


void CSurfaceType2::RemoveDelimiter()
{
	while (HasDelimiter())
		RemoveDelimiterAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSentenceType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSentenceType::GetGroupType()
{
	return eSequence;
}

int CSentenceType::GetOrderMinCount()
{
	return 1;
}


int CSentenceType::GetOrderMaxCount()
{
	return 1;
}


int CSentenceType::GetOrderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Order"));
}


bool CSentenceType::HasOrder()
{
	return InternalHasChild(Attribute, _T(""), _T("Order"));
}


void CSentenceType::AddOrder(CSchemaInt Order)
{
	InternalAppend(Attribute, _T(""), _T("Order"), Order);
}


void CSentenceType::InsertOrderAt(CSchemaInt Order, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}


void CSentenceType::ReplaceOrderAt(CSchemaInt Order, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}



CSchemaInt CSentenceType::GetOrderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex));
}



CSchemaInt CSentenceType::GetOrder()
{
	return GetOrderAt(0);
}


void CSentenceType::RemoveOrderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Order"), nIndex);
}


void CSentenceType::RemoveOrder()
{
	while (HasOrder())
		RemoveOrderAt(0);
}

int CSentenceType::GetScoreMinCount()
{
	return 0;
}


int CSentenceType::GetScoreMaxCount()
{
	return 1;
}


int CSentenceType::GetScoreCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Score"));
}


bool CSentenceType::HasScore()
{
	return InternalHasChild(Attribute, _T(""), _T("Score"));
}


void CSentenceType::AddScore(CSchemaFloat Score)
{
	InternalAppend(Attribute, _T(""), _T("Score"), Score);
}


void CSentenceType::InsertScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}


void CSentenceType::ReplaceScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}



CSchemaFloat CSentenceType::GetScoreAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex));
}



CSchemaFloat CSentenceType::GetScore()
{
	return GetScoreAt(0);
}


void CSentenceType::RemoveScoreAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Score"), nIndex);
}


void CSentenceType::RemoveScore()
{
	while (HasScore())
		RemoveScoreAt(0);
}

int CSentenceType::GetTimeStampMinCount()
{
	return 0;
}


int CSentenceType::GetTimeStampMaxCount()
{
	return 1;
}


int CSentenceType::GetTimeStampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("TimeStamp"));
}


bool CSentenceType::HasTimeStamp()
{
	return InternalHasChild(Attribute, _T(""), _T("TimeStamp"));
}


void CSentenceType::AddTimeStamp(CSchemaDateTime TimeStamp)
{
	InternalAppend(Attribute, _T(""), _T("TimeStamp"), TimeStamp);
}


void CSentenceType::InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}


void CSentenceType::ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}



CSchemaDateTime CSentenceType::GetTimeStampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex));
}



CSchemaDateTime CSentenceType::GetTimeStamp()
{
	return GetTimeStampAt(0);
}


void CSentenceType::RemoveTimeStampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("TimeStamp"), nIndex);
}


void CSentenceType::RemoveTimeStamp()
{
	while (HasTimeStamp())
		RemoveTimeStampAt(0);
}

int CSentenceType::GetBeginTimeMinCount()
{
	return 0;
}


int CSentenceType::GetBeginTimeMaxCount()
{
	return 1;
}


int CSentenceType::GetBeginTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTime"));
}


bool CSentenceType::HasBeginTime()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTime"));
}


void CSentenceType::AddBeginTime(CSchemaInteger BeginTime)
{
	InternalAppend(Attribute, _T(""), _T("BeginTime"), BeginTime);
}


void CSentenceType::InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}


void CSentenceType::ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}



CSchemaInteger CSentenceType::GetBeginTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex));
}



CSchemaInteger CSentenceType::GetBeginTime()
{
	return GetBeginTimeAt(0);
}


void CSentenceType::RemoveBeginTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTime"), nIndex);
}


void CSentenceType::RemoveBeginTime()
{
	while (HasBeginTime())
		RemoveBeginTimeAt(0);
}

int CSentenceType::GetEndTimeMinCount()
{
	return 0;
}


int CSentenceType::GetEndTimeMaxCount()
{
	return 1;
}


int CSentenceType::GetEndTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTime"));
}


bool CSentenceType::HasEndTime()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTime"));
}


void CSentenceType::AddEndTime(CSchemaInteger EndTime)
{
	InternalAppend(Attribute, _T(""), _T("EndTime"), EndTime);
}


void CSentenceType::InsertEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}


void CSentenceType::ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}



CSchemaInteger CSentenceType::GetEndTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex));
}



CSchemaInteger CSentenceType::GetEndTime()
{
	return GetEndTimeAt(0);
}


void CSentenceType::RemoveEndTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTime"), nIndex);
}


void CSentenceType::RemoveEndTime()
{
	while (HasEndTime())
		RemoveEndTimeAt(0);
}

int CSentenceType::GetFunctionMinCount()
{
	return 0;
}


int CSentenceType::GetFunctionMaxCount()
{
	return INT_MAX;
}


int CSentenceType::GetFunctionCount()
{
	return ChildCountInternal(Element, _T(""), _T("Function"));
}


bool CSentenceType::HasFunction()
{
	return InternalHasChild(Element, _T(""), _T("Function"));
}


void CSentenceType::AddFunction(CSchemaString Function)
{
	InternalAppend(Element, _T(""), _T("Function"), Function);
}


void CSentenceType::InsertFunctionAt(CSchemaString Function, int nIndex)
{
	InternalInsertAt(Element, _T(""), _T("Function"), nIndex, Function);
}


void CSentenceType::ReplaceFunctionAt(CSchemaString Function, int nIndex)
{
	InternalReplaceAt(Element, _T(""), _T("Function"), nIndex, Function);
}



CSchemaString CSentenceType::GetFunctionAt(int nIndex)
{
	return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("Function"), nIndex)).c_str();
	//return InternalGetNodeValue(Element, InternalGetAt(Element, _T(""), _T("Function"), nIndex));
}



CSchemaString CSentenceType::GetFunction()
{
	return GetFunctionAt(0);
}


void CSentenceType::RemoveFunctionAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Function"), nIndex);
}


void CSentenceType::RemoveFunction()
{
	while (HasFunction())
		RemoveFunctionAt(0);
}

int CSentenceType::GetSurfaceMinCount()
{
	return 1;
}


int CSentenceType::GetSurfaceMaxCount()
{
	return INT_MAX;
}


int CSentenceType::GetSurfaceCount()
{
	return ChildCountInternal(Element, _T(""), _T("Surface"));
}


bool CSentenceType::HasSurface()
{
	return InternalHasChild(Element, _T(""), _T("Surface"));
}


void CSentenceType::AddSurface(CSurfaceType2& Surface)
{
	InternalAppendNode(_T(""), _T("Surface"), Surface);
}


void CSentenceType::InsertSurfaceAt(CSurfaceType2& Surface, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Surface"), nIndex, Surface);
}


void CSentenceType::ReplaceSurfaceAt(CSurfaceType2& Surface, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Surface"), nIndex, Surface);
}



CSurfaceType2 CSentenceType::GetSurfaceAt(int nIndex)
{
	return CSurfaceType2(InternalGetAt(Element, _T(""), _T("Surface"), nIndex));
}



CSurfaceType2 CSentenceType::GetSurface()
{
	return GetSurfaceAt(0);
}


void CSentenceType::RemoveSurfaceAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Surface"), nIndex);
}


void CSentenceType::RemoveSurface()
{
	while (HasSurface())
		RemoveSurfaceAt(0);
}

int CSentenceType::GetChunkMinCount()
{
	return 0;
}


int CSentenceType::GetChunkMaxCount()
{
	return INT_MAX;
}


int CSentenceType::GetChunkCount()
{
	return ChildCountInternal(Element, _T(""), _T("Chunk"));
}


bool CSentenceType::HasChunk()
{
	return InternalHasChild(Element, _T(""), _T("Chunk"));
}


void CSentenceType::AddChunk(CChunkType& Chunk)
{
	InternalAppendNode(_T(""), _T("Chunk"), Chunk);
}


void CSentenceType::InsertChunkAt(CChunkType& Chunk, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Chunk"), nIndex, Chunk);
}


void CSentenceType::ReplaceChunkAt(CChunkType& Chunk, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Chunk"), nIndex, Chunk);
}



CChunkType CSentenceType::GetChunkAt(int nIndex)
{
	return CChunkType(InternalGetAt(Element, _T(""), _T("Chunk"), nIndex));
}



CChunkType CSentenceType::GetChunk()
{
	return GetChunkAt(0);
}


void CSentenceType::RemoveChunkAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Chunk"), nIndex);
}


void CSentenceType::RemoveChunk()
{
	while (HasChunk())
		RemoveChunkAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSentenceSequenceType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSentenceSequenceType::GetGroupType()
{
	return eSequence;
}

int CSentenceSequenceType::GetOrderMinCount()
{
	return 1;
}


int CSentenceSequenceType::GetOrderMaxCount()
{
	return 1;
}


int CSentenceSequenceType::GetOrderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Order"));
}


bool CSentenceSequenceType::HasOrder()
{
	return InternalHasChild(Attribute, _T(""), _T("Order"));
}


void CSentenceSequenceType::AddOrder(CSchemaInt Order)
{
	InternalAppend(Attribute, _T(""), _T("Order"), Order);
}


void CSentenceSequenceType::InsertOrderAt(CSchemaInt Order, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}


void CSentenceSequenceType::ReplaceOrderAt(CSchemaInt Order, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}



CSchemaInt CSentenceSequenceType::GetOrderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex));
}



CSchemaInt CSentenceSequenceType::GetOrder()
{
	return GetOrderAt(0);
}


void CSentenceSequenceType::RemoveOrderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Order"), nIndex);
}


void CSentenceSequenceType::RemoveOrder()
{
	while (HasOrder())
		RemoveOrderAt(0);
}

int CSentenceSequenceType::GetScoreMinCount()
{
	return 0;
}


int CSentenceSequenceType::GetScoreMaxCount()
{
	return 1;
}


int CSentenceSequenceType::GetScoreCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Score"));
}


bool CSentenceSequenceType::HasScore()
{
	return InternalHasChild(Attribute, _T(""), _T("Score"));
}


void CSentenceSequenceType::AddScore(CSchemaFloat Score)
{
	InternalAppend(Attribute, _T(""), _T("Score"), Score);
}


void CSentenceSequenceType::InsertScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}


void CSentenceSequenceType::ReplaceScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}



CSchemaFloat CSentenceSequenceType::GetScoreAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex));
}



CSchemaFloat CSentenceSequenceType::GetScore()
{
	return GetScoreAt(0);
}


void CSentenceSequenceType::RemoveScoreAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Score"), nIndex);
}


void CSentenceSequenceType::RemoveScore()
{
	while (HasScore())
		RemoveScoreAt(0);
}

int CSentenceSequenceType::GetTimeStampMinCount()
{
	return 0;
}


int CSentenceSequenceType::GetTimeStampMaxCount()
{
	return 1;
}


int CSentenceSequenceType::GetTimeStampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("TimeStamp"));
}


bool CSentenceSequenceType::HasTimeStamp()
{
	return InternalHasChild(Attribute, _T(""), _T("TimeStamp"));
}


void CSentenceSequenceType::AddTimeStamp(CSchemaDateTime TimeStamp)
{
	InternalAppend(Attribute, _T(""), _T("TimeStamp"), TimeStamp);
}


void CSentenceSequenceType::InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}


void CSentenceSequenceType::ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}



CSchemaDateTime CSentenceSequenceType::GetTimeStampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex));
}



CSchemaDateTime CSentenceSequenceType::GetTimeStamp()
{
	return GetTimeStampAt(0);
}


void CSentenceSequenceType::RemoveTimeStampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("TimeStamp"), nIndex);
}


void CSentenceSequenceType::RemoveTimeStamp()
{
	while (HasTimeStamp())
		RemoveTimeStampAt(0);
}

int CSentenceSequenceType::GetBeginTimeMinCount()
{
	return 0;
}


int CSentenceSequenceType::GetBeginTimeMaxCount()
{
	return 1;
}


int CSentenceSequenceType::GetBeginTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTime"));
}


bool CSentenceSequenceType::HasBeginTime()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTime"));
}


void CSentenceSequenceType::AddBeginTime(CSchemaInteger BeginTime)
{
	InternalAppend(Attribute, _T(""), _T("BeginTime"), BeginTime);
}


void CSentenceSequenceType::InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}


void CSentenceSequenceType::ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}



CSchemaInteger CSentenceSequenceType::GetBeginTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex));
}



CSchemaInteger CSentenceSequenceType::GetBeginTime()
{
	return GetBeginTimeAt(0);
}


void CSentenceSequenceType::RemoveBeginTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTime"), nIndex);
}


void CSentenceSequenceType::RemoveBeginTime()
{
	while (HasBeginTime())
		RemoveBeginTimeAt(0);
}

int CSentenceSequenceType::GetEndTimeMinCount()
{
	return 0;
}


int CSentenceSequenceType::GetEndTimeMaxCount()
{
	return 1;
}


int CSentenceSequenceType::GetEndTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTime"));
}


bool CSentenceSequenceType::HasEndTime()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTime"));
}


void CSentenceSequenceType::AddEndTime(CSchemaInteger EndTime)
{
	InternalAppend(Attribute, _T(""), _T("EndTime"), EndTime);
}


void CSentenceSequenceType::InsertEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}


void CSentenceSequenceType::ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}



CSchemaInteger CSentenceSequenceType::GetEndTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex));
}



CSchemaInteger CSentenceSequenceType::GetEndTime()
{
	return GetEndTimeAt(0);
}


void CSentenceSequenceType::RemoveEndTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTime"), nIndex);
}


void CSentenceSequenceType::RemoveEndTime()
{
	while (HasEndTime())
		RemoveEndTimeAt(0);
}

int CSentenceSequenceType::GetN_bestRankMinCount()
{
	return 0;
}


int CSentenceSequenceType::GetN_bestRankMaxCount()
{
	return 1;
}


int CSentenceSequenceType::GetN_bestRankCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("N-bestRank"));
}


bool CSentenceSequenceType::HasN_bestRank()
{
	return InternalHasChild(Attribute, _T(""), _T("N-bestRank"));
}


void CSentenceSequenceType::AddN_bestRank(CSchemaInt N_bestRank)
{
	InternalAppend(Attribute, _T(""), _T("N-bestRank"), N_bestRank);
}


void CSentenceSequenceType::InsertN_bestRankAt(CSchemaInt N_bestRank, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("N-bestRank"), nIndex, N_bestRank);
}


void CSentenceSequenceType::ReplaceN_bestRankAt(CSchemaInt N_bestRank, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("N-bestRank"), nIndex, N_bestRank);
}



CSchemaInt CSentenceSequenceType::GetN_bestRankAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("N-bestRank"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("N-bestRank"), nIndex));
}



CSchemaInt CSentenceSequenceType::GetN_bestRank()
{
	return GetN_bestRankAt(0);
}


void CSentenceSequenceType::RemoveN_bestRankAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("N-bestRank"), nIndex);
}


void CSentenceSequenceType::RemoveN_bestRank()
{
	while (HasN_bestRank())
		RemoveN_bestRankAt(0);
}

int CSentenceSequenceType::GetSentenceMinCount()
{
	return 1;
}


int CSentenceSequenceType::GetSentenceMaxCount()
{
	return INT_MAX;
}


int CSentenceSequenceType::GetSentenceCount()
{
	return ChildCountInternal(Element, _T(""), _T("Sentence"));
}


bool CSentenceSequenceType::HasSentence()
{
	return InternalHasChild(Element, _T(""), _T("Sentence"));
}


void CSentenceSequenceType::AddSentence(CSentenceType& Sentence)
{
	InternalAppendNode(_T(""), _T("Sentence"), Sentence);
}


void CSentenceSequenceType::InsertSentenceAt(CSentenceType& Sentence, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Sentence"), nIndex, Sentence);
}


void CSentenceSequenceType::ReplaceSentenceAt(CSentenceType& Sentence, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Sentence"), nIndex, Sentence);
}



CSentenceType CSentenceSequenceType::GetSentenceAt(int nIndex)
{
	return CSentenceType(InternalGetAt(Element, _T(""), _T("Sentence"), nIndex));
}



CSentenceType CSentenceSequenceType::GetSentence()
{
	return GetSentenceAt(0);
}


void CSentenceSequenceType::RemoveSentenceAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Sentence"), nIndex);
}


void CSentenceSequenceType::RemoveSentence()
{
	while (HasSentence())
		RemoveSentenceAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CServerType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CServerType::GetGroupType()
{
	return eSequence;
}

int CServerType::GetRequestMinCount()
{
	return 1;
}


int CServerType::GetRequestMaxCount()
{
	return INT_MAX;
}


int CServerType::GetRequestCount()
{
	return ChildCountInternal(Element, _T(""), _T("Request"));
}


bool CServerType::HasRequest()
{
	return InternalHasChild(Element, _T(""), _T("Request"));
}


void CServerType::AddRequest(CRequestType& Request)
{
	InternalAppendNode(_T(""), _T("Request"), Request);
}


void CServerType::InsertRequestAt(CRequestType& Request, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Request"), nIndex, Request);
}


void CServerType::ReplaceRequestAt(CRequestType& Request, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Request"), nIndex, Request);
}



CRequestType CServerType::GetRequestAt(int nIndex)
{
	return CRequestType(InternalGetAt(Element, _T(""), _T("Request"), nIndex));
}



CRequestType CServerType::GetRequest()
{
	return GetRequestAt(0);
}


void CServerType::RemoveRequestAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Request"), nIndex);
}


void CServerType::RemoveRequest()
{
	while (HasRequest())
		RemoveRequestAt(0);
}

int CServerType::GetResponseMinCount()
{
	return 1;
}


int CServerType::GetResponseMaxCount()
{
	return 1;
}


int CServerType::GetResponseCount()
{
	return ChildCountInternal(Element, _T(""), _T("Response"));
}


bool CServerType::HasResponse()
{
	return InternalHasChild(Element, _T(""), _T("Response"));
}


void CServerType::AddResponse(CResponseType& Response)
{
	InternalAppendNode(_T(""), _T("Response"), Response);
}


void CServerType::InsertResponseAt(CResponseType& Response, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Response"), nIndex, Response);
}


void CServerType::ReplaceResponseAt(CResponseType& Response, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Response"), nIndex, Response);
}



CResponseType CServerType::GetResponseAt(int nIndex)
{
	return CResponseType(InternalGetAt(Element, _T(""), _T("Response"), nIndex));
}



CResponseType CServerType::GetResponse()
{
	return GetResponseAt(0);
}


void CServerType::RemoveResponseAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Response"), nIndex);
}


void CServerType::RemoveResponse()
{
	while (HasResponse())
		RemoveResponseAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSignalType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSignalType::GetGroupType()
{
	return eSequence;
}

int CSignalType::GetAudioFormatMinCount()
{
	return 1;
}


int CSignalType::GetAudioFormatMaxCount()
{
	return 1;
}


int CSignalType::GetAudioFormatCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("AudioFormat"));
}


bool CSignalType::HasAudioFormat()
{
	return InternalHasChild(Attribute, _T(""), _T("AudioFormat"));
}


void CSignalType::AddAudioFormat(CSchemaString AudioFormat)
{
	InternalAppend(Attribute, _T(""), _T("AudioFormat"), AudioFormat);
}


void CSignalType::InsertAudioFormatAt(CSchemaString AudioFormat, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("AudioFormat"), nIndex, AudioFormat);
}


void CSignalType::ReplaceAudioFormatAt(CSchemaString AudioFormat, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("AudioFormat"), nIndex, AudioFormat);
}



CSchemaString CSignalType::GetAudioFormatAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("AudioFormat"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("AudioFormat"), nIndex));
}



CSchemaString CSignalType::GetAudioFormat()
{
	return GetAudioFormatAt(0);
}


void CSignalType::RemoveAudioFormatAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("AudioFormat"), nIndex);
}


void CSignalType::RemoveAudioFormat()
{
	while (HasAudioFormat())
		RemoveAudioFormatAt(0);
}

int CSignalType::GetSamplingRateMinCount()
{
	return 1;
}


int CSignalType::GetSamplingRateMaxCount()
{
	return 1;
}


int CSignalType::GetSamplingRateCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("SamplingRate"));
}


bool CSignalType::HasSamplingRate()
{
	return InternalHasChild(Attribute, _T(""), _T("SamplingRate"));
}


void CSignalType::AddSamplingRate(CSchemaInt SamplingRate)
{
	InternalAppend(Attribute, _T(""), _T("SamplingRate"), SamplingRate);
}


void CSignalType::InsertSamplingRateAt(CSchemaInt SamplingRate, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("SamplingRate"), nIndex, SamplingRate);
}


void CSignalType::ReplaceSamplingRateAt(CSchemaInt SamplingRate, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("SamplingRate"), nIndex, SamplingRate);
}



CSchemaInt CSignalType::GetSamplingRateAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("SamplingRate"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("SamplingRate"), nIndex));
}



CSchemaInt CSignalType::GetSamplingRate()
{
	return GetSamplingRateAt(0);
}


void CSignalType::RemoveSamplingRateAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("SamplingRate"), nIndex);
}


void CSignalType::RemoveSamplingRate()
{
	while (HasSamplingRate())
		RemoveSamplingRateAt(0);
}

int CSignalType::GetBitRateMinCount()
{
	return 1;
}


int CSignalType::GetBitRateMaxCount()
{
	return 1;
}


int CSignalType::GetBitRateCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BitRate"));
}


bool CSignalType::HasBitRate()
{
	return InternalHasChild(Attribute, _T(""), _T("BitRate"));
}


void CSignalType::AddBitRate(CSchemaInt BitRate)
{
	InternalAppend(Attribute, _T(""), _T("BitRate"), BitRate);
}


void CSignalType::InsertBitRateAt(CSchemaInt BitRate, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BitRate"), nIndex, BitRate);
}


void CSignalType::ReplaceBitRateAt(CSchemaInt BitRate, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BitRate"), nIndex, BitRate);
}



CSchemaInt CSignalType::GetBitRateAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BitRate"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BitRate"), nIndex));
}



CSchemaInt CSignalType::GetBitRate()
{
	return GetBitRateAt(0);
}


void CSignalType::RemoveBitRateAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BitRate"), nIndex);
}


void CSignalType::RemoveBitRate()
{
	while (HasBitRate())
		RemoveBitRateAt(0);
}

int CSignalType::GetEndianMinCount()
{
	return 1;
}


int CSignalType::GetEndianMaxCount()
{
	return 1;
}


int CSignalType::GetEndianCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Endian"));
}


bool CSignalType::HasEndian()
{
	return InternalHasChild(Attribute, _T(""), _T("Endian"));
}


void CSignalType::AddEndian(CSchemaString Endian)
{
	InternalAppend(Attribute, _T(""), _T("Endian"), Endian);
}


void CSignalType::InsertEndianAt(CSchemaString Endian, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Endian"), nIndex, Endian);
}


void CSignalType::ReplaceEndianAt(CSchemaString Endian, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Endian"), nIndex, Endian);
}



CSchemaString CSignalType::GetEndianAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Endian"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Endian"), nIndex));
}



CSchemaString CSignalType::GetEndian()
{
	return GetEndianAt(0);
}


void CSignalType::RemoveEndianAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Endian"), nIndex);
}


void CSignalType::RemoveEndian()
{
	while (HasEndian())
		RemoveEndianAt(0);
}

int CSignalType::GetChannelQtyMinCount()
{
	return 1;
}


int CSignalType::GetChannelQtyMaxCount()
{
	return 1;
}


int CSignalType::GetChannelQtyCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ChannelQty"));
}


bool CSignalType::HasChannelQty()
{
	return InternalHasChild(Attribute, _T(""), _T("ChannelQty"));
}


void CSignalType::AddChannelQty(CSchemaInt ChannelQty)
{
	InternalAppend(Attribute, _T(""), _T("ChannelQty"), ChannelQty);
}


void CSignalType::InsertChannelQtyAt(CSchemaInt ChannelQty, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ChannelQty"), nIndex, ChannelQty);
}


void CSignalType::ReplaceChannelQtyAt(CSchemaInt ChannelQty, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ChannelQty"), nIndex, ChannelQty);
}



CSchemaInt CSignalType::GetChannelQtyAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelQty"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelQty"), nIndex));
}



CSchemaInt CSignalType::GetChannelQty()
{
	return GetChannelQtyAt(0);
}


void CSignalType::RemoveChannelQtyAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ChannelQty"), nIndex);
}


void CSignalType::RemoveChannelQty()
{
	while (HasChannelQty())
		RemoveChannelQtyAt(0);
}

int CSignalType::GetValueTypeMinCount()
{
	return 1;
}


int CSignalType::GetValueTypeMaxCount()
{
	return 1;
}


int CSignalType::GetValueTypeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ValueType"));
}


bool CSignalType::HasValueType()
{
	return InternalHasChild(Attribute, _T(""), _T("ValueType"));
}


void CSignalType::AddValueType(CSchemaString ValueType)
{
	InternalAppend(Attribute, _T(""), _T("ValueType"), ValueType);
}


void CSignalType::InsertValueTypeAt(CSchemaString ValueType, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ValueType"), nIndex, ValueType);
}


void CSignalType::ReplaceValueTypeAt(CSchemaString ValueType, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ValueType"), nIndex, ValueType);
}



CSchemaString CSignalType::GetValueTypeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ValueType"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ValueType"), nIndex));
}



CSchemaString CSignalType::GetValueType()
{
	return GetValueTypeAt(0);
}


void CSignalType::RemoveValueTypeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ValueType"), nIndex);
}


void CSignalType::RemoveValueType()
{
	while (HasValueType())
		RemoveValueTypeAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CSurfaceType3
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CSurfaceType3::GetGroupType()
{
	return eSequence;
}

int CSurfaceType3::GetOrderMinCount()
{
	return 1;
}


int CSurfaceType3::GetOrderMaxCount()
{
	return 1;
}


int CSurfaceType3::GetOrderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Order"));
}


bool CSurfaceType3::HasOrder()
{
	return InternalHasChild(Attribute, _T(""), _T("Order"));
}


void CSurfaceType3::AddOrder(CSchemaInt Order)
{
	InternalAppend(Attribute, _T(""), _T("Order"), Order);
}


void CSurfaceType3::InsertOrderAt(CSchemaInt Order, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}


void CSurfaceType3::ReplaceOrderAt(CSchemaInt Order, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Order"), nIndex, Order);
}



CSchemaInt CSurfaceType3::GetOrderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Order"), nIndex));
}



CSchemaInt CSurfaceType3::GetOrder()
{
	return GetOrderAt(0);
}


void CSurfaceType3::RemoveOrderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Order"), nIndex);
}


void CSurfaceType3::RemoveOrder()
{
	while (HasOrder())
		RemoveOrderAt(0);
}

int CSurfaceType3::GetScoreMinCount()
{
	return 0;
}


int CSurfaceType3::GetScoreMaxCount()
{
	return 1;
}


int CSurfaceType3::GetScoreCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Score"));
}


bool CSurfaceType3::HasScore()
{
	return InternalHasChild(Attribute, _T(""), _T("Score"));
}


void CSurfaceType3::AddScore(CSchemaFloat Score)
{
	InternalAppend(Attribute, _T(""), _T("Score"), Score);
}


void CSurfaceType3::InsertScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}


void CSurfaceType3::ReplaceScoreAt(CSchemaFloat Score, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Score"), nIndex, Score);
}



CSchemaFloat CSurfaceType3::GetScoreAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Score"), nIndex));
}



CSchemaFloat CSurfaceType3::GetScore()
{
	return GetScoreAt(0);
}


void CSurfaceType3::RemoveScoreAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Score"), nIndex);
}


void CSurfaceType3::RemoveScore()
{
	while (HasScore())
		RemoveScoreAt(0);
}

int CSurfaceType3::GetTimeStampMinCount()
{
	return 0;
}


int CSurfaceType3::GetTimeStampMaxCount()
{
	return 1;
}


int CSurfaceType3::GetTimeStampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("TimeStamp"));
}


bool CSurfaceType3::HasTimeStamp()
{
	return InternalHasChild(Attribute, _T(""), _T("TimeStamp"));
}


void CSurfaceType3::AddTimeStamp(CSchemaDateTime TimeStamp)
{
	InternalAppend(Attribute, _T(""), _T("TimeStamp"), TimeStamp);
}


void CSurfaceType3::InsertTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}


void CSurfaceType3::ReplaceTimeStampAt(CSchemaDateTime TimeStamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("TimeStamp"), nIndex, TimeStamp);
}



CSchemaDateTime CSurfaceType3::GetTimeStampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("TimeStamp"), nIndex));
}



CSchemaDateTime CSurfaceType3::GetTimeStamp()
{
	return GetTimeStampAt(0);
}


void CSurfaceType3::RemoveTimeStampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("TimeStamp"), nIndex);
}


void CSurfaceType3::RemoveTimeStamp()
{
	while (HasTimeStamp())
		RemoveTimeStampAt(0);
}

int CSurfaceType3::GetBeginTimeMinCount()
{
	return 0;
}


int CSurfaceType3::GetBeginTimeMaxCount()
{
	return 1;
}


int CSurfaceType3::GetBeginTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTime"));
}


bool CSurfaceType3::HasBeginTime()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTime"));
}


void CSurfaceType3::AddBeginTime(CSchemaInteger BeginTime)
{
	InternalAppend(Attribute, _T(""), _T("BeginTime"), BeginTime);
}


void CSurfaceType3::InsertBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}


void CSurfaceType3::ReplaceBeginTimeAt(CSchemaInteger BeginTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTime"), nIndex, BeginTime);
}



CSchemaInteger CSurfaceType3::GetBeginTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTime"), nIndex));
}



CSchemaInteger CSurfaceType3::GetBeginTime()
{
	return GetBeginTimeAt(0);
}


void CSurfaceType3::RemoveBeginTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTime"), nIndex);
}


void CSurfaceType3::RemoveBeginTime()
{
	while (HasBeginTime())
		RemoveBeginTimeAt(0);
}

int CSurfaceType3::GetEndTimeMinCount()
{
	return 0;
}


int CSurfaceType3::GetEndTimeMaxCount()
{
	return 1;
}


int CSurfaceType3::GetEndTimeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTime"));
}


bool CSurfaceType3::HasEndTime()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTime"));
}


void CSurfaceType3::AddEndTime(CSchemaInteger EndTime)
{
	InternalAppend(Attribute, _T(""), _T("EndTime"), EndTime);
}


void CSurfaceType3::InsertEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}


void CSurfaceType3::ReplaceEndTimeAt(CSchemaInteger EndTime, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTime"), nIndex, EndTime);
}



CSchemaInteger CSurfaceType3::GetEndTimeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTime"), nIndex));
}



CSchemaInteger CSurfaceType3::GetEndTime()
{
	return GetEndTimeAt(0);
}


void CSurfaceType3::RemoveEndTimeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTime"), nIndex);
}


void CSurfaceType3::RemoveEndTime()
{
	while (HasEndTime())
		RemoveEndTimeAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CHypothesisFormatType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CHypothesisFormatType::GetGroupType()
{
	return eSequence;
}

int CHypothesisFormatType::GetNofN_bestMinCount()
{
	return 1;
}


int CHypothesisFormatType::GetNofN_bestMaxCount()
{
	return 1;
}


int CHypothesisFormatType::GetNofN_bestCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("NofN-best"));
}


bool CHypothesisFormatType::HasNofN_best()
{
	return InternalHasChild(Attribute, _T(""), _T("NofN-best"));
}


void CHypothesisFormatType::AddNofN_best(CSchemaString NofN_best)
{
	InternalAppend(Attribute, _T(""), _T("NofN-best"), NofN_best);
}


void CHypothesisFormatType::InsertNofN_bestAt(CSchemaString NofN_best, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("NofN-best"), nIndex, NofN_best);
}


void CHypothesisFormatType::ReplaceNofN_bestAt(CSchemaString NofN_best, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("NofN-best"), nIndex, NofN_best);
}



CSchemaString CHypothesisFormatType::GetNofN_bestAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("NofN-best"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("NofN-best"), nIndex));
}



CSchemaString CHypothesisFormatType::GetNofN_best()
{
	return GetNofN_bestAt(0);
}


void CHypothesisFormatType::RemoveNofN_bestAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("NofN-best"), nIndex);
}


void CHypothesisFormatType::RemoveNofN_best()
{
	while (HasNofN_best())
		RemoveNofN_bestAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class COptionType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType COptionType::GetGroupType()
{
	return eSequence;
}

int COptionType::GetKeyMinCount()
{
	return 1;
}


int COptionType::GetKeyMaxCount()
{
	return 1;
}


int COptionType::GetKeyCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Key"));
}


bool COptionType::HasKey()
{
	return InternalHasChild(Attribute, _T(""), _T("Key"));
}


void COptionType::AddKey(CSchemaString Key)
{
	InternalAppend(Attribute, _T(""), _T("Key"), Key);
}


void COptionType::InsertKeyAt(CSchemaString Key, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Key"), nIndex, Key);
}


void COptionType::ReplaceKeyAt(CSchemaString Key, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Key"), nIndex, Key);
}



CSchemaString COptionType::GetKeyAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Key"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Key"), nIndex));
}



CSchemaString COptionType::GetKey()
{
	return GetKeyAt(0);
}


void COptionType::RemoveKeyAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Key"), nIndex);
}


void COptionType::RemoveKey()
{
	while (HasKey())
		RemoveKeyAt(0);
}

int COptionType::GetValueMinCount()
{
	return 1;
}


int COptionType::GetValueMaxCount()
{
	return 1;
}


int COptionType::GetValueCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Value"));
}


bool COptionType::HasValue()
{
	return InternalHasChild(Attribute, _T(""), _T("Value"));
}


void COptionType::AddValue(CSchemaString Value)
{
	InternalAppend(Attribute, _T(""), _T("Value"), Value);
}


void COptionType::InsertValueAt(CSchemaString Value, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Value"), nIndex, Value);
}


void COptionType::ReplaceValueAt(CSchemaString Value, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Value"), nIndex, Value);
}



CSchemaString COptionType::GetValueAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Value"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Value"), nIndex));
}



CSchemaString COptionType::GetValue()
{
	return GetValueAt(0);
}


void COptionType::RemoveValueAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Value"), nIndex);
}


void COptionType::RemoveValue()
{
	while (HasValue())
		RemoveValueAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CTargetOutputType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CTargetOutputType::GetGroupType()
{
	return eSequence;
}

int CTargetOutputType::GetHypothesisFormatMinCount()
{
	return 0;
}


int CTargetOutputType::GetHypothesisFormatMaxCount()
{
	return 1;
}


int CTargetOutputType::GetHypothesisFormatCount()
{
	return ChildCountInternal(Element, _T(""), _T("HypothesisFormat"));
}


bool CTargetOutputType::HasHypothesisFormat()
{
	return InternalHasChild(Element, _T(""), _T("HypothesisFormat"));
}


void CTargetOutputType::AddHypothesisFormat(CHypothesisFormatType& HypothesisFormat)
{
	InternalAppendNode(_T(""), _T("HypothesisFormat"), HypothesisFormat);
}


void CTargetOutputType::InsertHypothesisFormatAt(CHypothesisFormatType& HypothesisFormat, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("HypothesisFormat"), nIndex, HypothesisFormat);
}


void CTargetOutputType::ReplaceHypothesisFormatAt(CHypothesisFormatType& HypothesisFormat, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("HypothesisFormat"), nIndex, HypothesisFormat);
}



CHypothesisFormatType CTargetOutputType::GetHypothesisFormatAt(int nIndex)
{
	return CHypothesisFormatType(InternalGetAt(Element, _T(""), _T("HypothesisFormat"), nIndex));
}



CHypothesisFormatType CTargetOutputType::GetHypothesisFormat()
{
	return GetHypothesisFormatAt(0);
}


void CTargetOutputType::RemoveHypothesisFormatAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("HypothesisFormat"), nIndex);
}


void CTargetOutputType::RemoveHypothesisFormat()
{
	while (HasHypothesisFormat())
		RemoveHypothesisFormatAt(0);
}

int CTargetOutputType::GetLanguageTypeMinCount()
{
	return 0;
}


int CTargetOutputType::GetLanguageTypeMaxCount()
{
	return 1;
}


int CTargetOutputType::GetLanguageTypeCount()
{
	return ChildCountInternal(Element, _T(""), _T("LanguageType"));
}


bool CTargetOutputType::HasLanguageType()
{
	return InternalHasChild(Element, _T(""), _T("LanguageType"));
}


void CTargetOutputType::AddLanguageType(CLanguageTypeType& LanguageType)
{
	InternalAppendNode(_T(""), _T("LanguageType"), LanguageType);
}


void CTargetOutputType::InsertLanguageTypeAt(CLanguageTypeType& LanguageType, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("LanguageType"), nIndex, LanguageType);
}


void CTargetOutputType::ReplaceLanguageTypeAt(CLanguageTypeType& LanguageType, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("LanguageType"), nIndex, LanguageType);
}



CLanguageTypeType CTargetOutputType::GetLanguageTypeAt(int nIndex)
{
	return CLanguageTypeType(InternalGetAt(Element, _T(""), _T("LanguageType"), nIndex));
}



CLanguageTypeType CTargetOutputType::GetLanguageType()
{
	return GetLanguageTypeAt(0);
}


void CTargetOutputType::RemoveLanguageTypeAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("LanguageType"), nIndex);
}


void CTargetOutputType::RemoveLanguageType()
{
	while (HasLanguageType())
		RemoveLanguageTypeAt(0);
}

int CTargetOutputType::GetOptionMinCount()
{
	return 0;
}


int CTargetOutputType::GetOptionMaxCount()
{
	return INT_MAX;
}


int CTargetOutputType::GetOptionCount()
{
	return ChildCountInternal(Element, _T(""), _T("Option"));
}


bool CTargetOutputType::HasOption()
{
	return InternalHasChild(Element, _T(""), _T("Option"));
}


void CTargetOutputType::AddOption(COptionType& Option)
{
	InternalAppendNode(_T(""), _T("Option"), Option);
}


void CTargetOutputType::InsertOptionAt(COptionType& Option, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Option"), nIndex, Option);
}


void CTargetOutputType::ReplaceOptionAt(COptionType& Option, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Option"), nIndex, Option);
}



COptionType CTargetOutputType::GetOptionAt(int nIndex)
{
	return COptionType(InternalGetAt(Element, _T(""), _T("Option"), nIndex));
}



COptionType CTargetOutputType::GetOption()
{
	return GetOptionAt(0);
}


void CTargetOutputType::RemoveOptionAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Option"), nIndex);
}


void CTargetOutputType::RemoveOption()
{
	while (HasOption())
		RemoveOptionAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CTextType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CTextType::GetGroupType()
{
	return eSequence;
}

int CTextType::GetChannelIDMinCount()
{
	return 1;
}


int CTextType::GetChannelIDMaxCount()
{
	return 1;
}


int CTextType::GetChannelIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ChannelID"));
}


bool CTextType::HasChannelID()
{
	return InternalHasChild(Attribute, _T(""), _T("ChannelID"));
}


void CTextType::AddChannelID(CSchemaInt ChannelID)
{
	InternalAppend(Attribute, _T(""), _T("ChannelID"), ChannelID);
}


void CTextType::InsertChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}


void CTextType::ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}



CSchemaInt CTextType::GetChannelIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex));
}



CSchemaInt CTextType::GetChannelID()
{
	return GetChannelIDAt(0);
}


void CTextType::RemoveChannelIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ChannelID"), nIndex);
}


void CTextType::RemoveChannelID()
{
	while (HasChannelID())
		RemoveChannelIDAt(0);
}

int CTextType::GetBeginTimestampMinCount()
{
	return 1;
}


int CTextType::GetBeginTimestampMaxCount()
{
	return 1;
}


int CTextType::GetBeginTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTimestamp"));
}


bool CTextType::HasBeginTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTimestamp"));
}


void CTextType::AddBeginTimestamp(CSchemaDateTime BeginTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("BeginTimestamp"), BeginTimestamp);
}


void CTextType::InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}


void CTextType::ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}



CSchemaDateTime CTextType::GetBeginTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex));
}



CSchemaDateTime CTextType::GetBeginTimestamp()
{
	return GetBeginTimestampAt(0);
}


void CTextType::RemoveBeginTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex);
}


void CTextType::RemoveBeginTimestamp()
{
	while (HasBeginTimestamp())
		RemoveBeginTimestampAt(0);
}

int CTextType::GetEndTimestampMinCount()
{
	return 1;
}


int CTextType::GetEndTimestampMaxCount()
{
	return 1;
}


int CTextType::GetEndTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTimestamp"));
}


bool CTextType::HasEndTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTimestamp"));
}


void CTextType::AddEndTimestamp(CSchemaDateTime EndTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("EndTimestamp"), EndTimestamp);
}


void CTextType::InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}


void CTextType::ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}



CSchemaDateTime CTextType::GetEndTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex));
}



CSchemaDateTime CTextType::GetEndTimestamp()
{
	return GetEndTimestampAt(0);
}


void CTextType::RemoveEndTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTimestamp"), nIndex);
}


void CTextType::RemoveEndTimestamp()
{
	while (HasEndTimestamp())
		RemoveEndTimestampAt(0);
}

int CTextType::GetEndPointMinCount()
{
	return 0;
}


int CTextType::GetEndPointMaxCount()
{
	return 1;
}


int CTextType::GetEndPointCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndPoint"));
}


bool CTextType::HasEndPoint()
{
	return InternalHasChild(Attribute, _T(""), _T("EndPoint"));
}


void CTextType::AddEndPoint(CSchemaDateTime EndPoint)
{
	InternalAppend(Attribute, _T(""), _T("EndPoint"), EndPoint);
}


void CTextType::InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}


void CTextType::ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}



CSchemaDateTime CTextType::GetEndPointAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex));
}



CSchemaDateTime CTextType::GetEndPoint()
{
	return GetEndPointAt(0);
}


void CTextType::RemoveEndPointAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndPoint"), nIndex);
}


void CTextType::RemoveEndPoint()
{
	while (HasEndPoint())
		RemoveEndPointAt(0);
}

int CTextType::GetModelTypeMinCount()
{
	return 0;
}


int CTextType::GetModelTypeMaxCount()
{
	return 1;
}


int CTextType::GetModelTypeCount()
{
	return ChildCountInternal(Element, _T(""), _T("ModelType"));
}


bool CTextType::HasModelType()
{
	return InternalHasChild(Element, _T(""), _T("ModelType"));
}


void CTextType::AddModelType(CModelTypeType& ModelType)
{
	InternalAppendNode(_T(""), _T("ModelType"), ModelType);
}


void CTextType::InsertModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}


void CTextType::ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}



CModelTypeType CTextType::GetModelTypeAt(int nIndex)
{
	return CModelTypeType(InternalGetAt(Element, _T(""), _T("ModelType"), nIndex));
}



CModelTypeType CTextType::GetModelType()
{
	return GetModelTypeAt(0);
}


void CTextType::RemoveModelTypeAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("ModelType"), nIndex);
}


void CTextType::RemoveModelType()
{
	while (HasModelType())
		RemoveModelTypeAt(0);
}

int CTextType::GetSentenceSequenceMinCount()
{
	return 1;
}


int CTextType::GetSentenceSequenceMaxCount()
{
	return INT_MAX;
}


int CTextType::GetSentenceSequenceCount()
{
	return ChildCountInternal(Element, _T(""), _T("SentenceSequence"));
}


bool CTextType::HasSentenceSequence()
{
	return InternalHasChild(Element, _T(""), _T("SentenceSequence"));
}


void CTextType::AddSentenceSequence(CSentenceSequenceType& SentenceSequence)
{
	InternalAppendNode(_T(""), _T("SentenceSequence"), SentenceSequence);
}


void CTextType::InsertSentenceSequenceAt(CSentenceSequenceType& SentenceSequence, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("SentenceSequence"), nIndex, SentenceSequence);
}


void CTextType::ReplaceSentenceSequenceAt(CSentenceSequenceType& SentenceSequence, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("SentenceSequence"), nIndex, SentenceSequence);
}



CSentenceSequenceType CTextType::GetSentenceSequenceAt(int nIndex)
{
	return CSentenceSequenceType(InternalGetAt(Element, _T(""), _T("SentenceSequence"), nIndex));
}



CSentenceSequenceType CTextType::GetSentenceSequence()
{
	return GetSentenceSequenceAt(0);
}


void CTextType::RemoveSentenceSequenceAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("SentenceSequence"), nIndex);
}


void CTextType::RemoveSentenceSequence()
{
	while (HasSentenceSequence())
		RemoveSentenceSequenceAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CTransmitterType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CTransmitterType::GetGroupType()
{
	return eSequence;
}

int CTransmitterType::GetDeviceMinCount()
{
	return 1;
}


int CTransmitterType::GetDeviceMaxCount()
{
	return 1;
}


int CTransmitterType::GetDeviceCount()
{
	return ChildCountInternal(Element, _T(""), _T("Device"));
}


bool CTransmitterType::HasDevice()
{
	return InternalHasChild(Element, _T(""), _T("Device"));
}


void CTransmitterType::AddDevice(CDeviceType& Device)
{
	InternalAppendNode(_T(""), _T("Device"), Device);
}


void CTransmitterType::InsertDeviceAt(CDeviceType& Device, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Device"), nIndex, Device);
}


void CTransmitterType::ReplaceDeviceAt(CDeviceType& Device, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Device"), nIndex, Device);
}



CDeviceType CTransmitterType::GetDeviceAt(int nIndex)
{
	return CDeviceType(InternalGetAt(Element, _T(""), _T("Device"), nIndex));
}



CDeviceType CTransmitterType::GetDevice()
{
	return GetDeviceAt(0);
}


void CTransmitterType::RemoveDeviceAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Device"), nIndex);
}


void CTransmitterType::RemoveDevice()
{
	while (HasDevice())
		RemoveDeviceAt(0);
}

int CTransmitterType::GetUserProfileMinCount()
{
	return 1;
}


int CTransmitterType::GetUserProfileMaxCount()
{
	return INT_MAX;
}


int CTransmitterType::GetUserProfileCount()
{
	return ChildCountInternal(Element, _T(""), _T("UserProfile"));
}


bool CTransmitterType::HasUserProfile()
{
	return InternalHasChild(Element, _T(""), _T("UserProfile"));
}


void CTransmitterType::AddUserProfile(CUserProfileType& UserProfile)
{
	InternalAppendNode(_T(""), _T("UserProfile"), UserProfile);
}


void CTransmitterType::InsertUserProfileAt(CUserProfileType& UserProfile, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("UserProfile"), nIndex, UserProfile);
}


void CTransmitterType::ReplaceUserProfileAt(CUserProfileType& UserProfile, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("UserProfile"), nIndex, UserProfile);
}



CUserProfileType CTransmitterType::GetUserProfileAt(int nIndex)
{
	return CUserProfileType(InternalGetAt(Element, _T(""), _T("UserProfile"), nIndex));
}



CUserProfileType CTransmitterType::GetUserProfile()
{
	return GetUserProfileAt(0);
}


void CTransmitterType::RemoveUserProfileAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("UserProfile"), nIndex);
}


void CTransmitterType::RemoveUserProfile()
{
	while (HasUserProfile())
		RemoveUserProfileAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CUserType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CUserType::GetGroupType()
{
	return eSequence;
}

int CUserType::GetTransmitterMinCount()
{
	return 1;
}


int CUserType::GetTransmitterMaxCount()
{
	return 1;
}


int CUserType::GetTransmitterCount()
{
	return ChildCountInternal(Element, _T(""), _T("Transmitter"));
}


bool CUserType::HasTransmitter()
{
	return InternalHasChild(Element, _T(""), _T("Transmitter"));
}


void CUserType::AddTransmitter(CTransmitterType& Transmitter)
{
	InternalAppendNode(_T(""), _T("Transmitter"), Transmitter);
}


void CUserType::InsertTransmitterAt(CTransmitterType& Transmitter, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Transmitter"), nIndex, Transmitter);
}


void CUserType::ReplaceTransmitterAt(CTransmitterType& Transmitter, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Transmitter"), nIndex, Transmitter);
}



CTransmitterType CUserType::GetTransmitterAt(int nIndex)
{
	return CTransmitterType(InternalGetAt(Element, _T(""), _T("Transmitter"), nIndex));
}



CTransmitterType CUserType::GetTransmitter()
{
	return GetTransmitterAt(0);
}


void CUserType::RemoveTransmitterAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Transmitter"), nIndex);
}


void CUserType::RemoveTransmitter()
{
	while (HasTransmitter())
		RemoveTransmitterAt(0);
}

int CUserType::GetReceiverMinCount()
{
	return 1;
}


int CUserType::GetReceiverMaxCount()
{
	return INT_MAX;
}


int CUserType::GetReceiverCount()
{
	return ChildCountInternal(Element, _T(""), _T("Receiver"));
}


bool CUserType::HasReceiver()
{
	return InternalHasChild(Element, _T(""), _T("Receiver"));
}


void CUserType::AddReceiver(CReceiverType& Receiver)
{
	InternalAppendNode(_T(""), _T("Receiver"), Receiver);
}


void CUserType::InsertReceiverAt(CReceiverType& Receiver, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("Receiver"), nIndex, Receiver);
}


void CUserType::ReplaceReceiverAt(CReceiverType& Receiver, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("Receiver"), nIndex, Receiver);
}



CReceiverType CUserType::GetReceiverAt(int nIndex)
{
	return CReceiverType(InternalGetAt(Element, _T(""), _T("Receiver"), nIndex));
}



CReceiverType CUserType::GetReceiver()
{
	return GetReceiverAt(0);
}


void CUserType::RemoveReceiverAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("Receiver"), nIndex);
}


void CUserType::RemoveReceiver()
{
	while (HasReceiver())
		RemoveReceiverAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CUserProfileType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CUserProfileType::GetGroupType()
{
	return eSequence;
}

int CUserProfileType::GetIDMinCount()
{
	return 1;
}


int CUserProfileType::GetIDMaxCount()
{
	return 1;
}


int CUserProfileType::GetIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ID"));
}


bool CUserProfileType::HasID()
{
	return InternalHasChild(Attribute, _T(""), _T("ID"));
}


void CUserProfileType::AddID(CSchemaString ID)
{
	InternalAppend(Attribute, _T(""), _T("ID"), ID);
}


void CUserProfileType::InsertIDAt(CSchemaString ID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}


void CUserProfileType::ReplaceIDAt(CSchemaString ID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ID"), nIndex, ID);
}



CSchemaString CUserProfileType::GetIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ID"), nIndex));
}



CSchemaString CUserProfileType::GetID()
{
	return GetIDAt(0);
}


void CUserProfileType::RemoveIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ID"), nIndex);
}


void CUserProfileType::RemoveID()
{
	while (HasID())
		RemoveIDAt(0);
}

int CUserProfileType::GetAgeMinCount()
{
	return 0;
}


int CUserProfileType::GetAgeMaxCount()
{
	return 1;
}


int CUserProfileType::GetAgeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Age"));
}


bool CUserProfileType::HasAge()
{
	return InternalHasChild(Attribute, _T(""), _T("Age"));
}


void CUserProfileType::AddAge(CSchemaInt Age)
{
	InternalAppend(Attribute, _T(""), _T("Age"), Age);
}


void CUserProfileType::InsertAgeAt(CSchemaInt Age, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Age"), nIndex, Age);
}


void CUserProfileType::ReplaceAgeAt(CSchemaInt Age, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Age"), nIndex, Age);
}



CSchemaInt CUserProfileType::GetAgeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Age"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Age"), nIndex));
}



CSchemaInt CUserProfileType::GetAge()
{
	return GetAgeAt(0);
}


void CUserProfileType::RemoveAgeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Age"), nIndex);
}


void CUserProfileType::RemoveAge()
{
	while (HasAge())
		RemoveAgeAt(0);
}

int CUserProfileType::GetGenderMinCount()
{
	return 0;
}


int CUserProfileType::GetGenderMaxCount()
{
	return 1;
}


int CUserProfileType::GetGenderCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Gender"));
}


bool CUserProfileType::HasGender()
{
	return InternalHasChild(Attribute, _T(""), _T("Gender"));
}


void CUserProfileType::AddGender(CSchemaString Gender)
{
	InternalAppend(Attribute, _T(""), _T("Gender"), Gender);
}


void CUserProfileType::InsertGenderAt(CSchemaString Gender, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Gender"), nIndex, Gender);
}


void CUserProfileType::ReplaceGenderAt(CSchemaString Gender, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Gender"), nIndex, Gender);
}



CSchemaString CUserProfileType::GetGenderAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Gender"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Gender"), nIndex));
}



CSchemaString CUserProfileType::GetGender()
{
	return GetGenderAt(0);
}


void CUserProfileType::RemoveGenderAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Gender"), nIndex);
}


void CUserProfileType::RemoveGender()
{
	while (HasGender())
		RemoveGenderAt(0);
}

int CUserProfileType::GetEmailMinCount()
{
	return 0;
}


int CUserProfileType::GetEmailMaxCount()
{
	return 1;
}


int CUserProfileType::GetEmailCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Email"));
}


bool CUserProfileType::HasEmail()
{
	return InternalHasChild(Attribute, _T(""), _T("Email"));
}


void CUserProfileType::AddEmail(CSchemaString Email)
{
	InternalAppend(Attribute, _T(""), _T("Email"), Email);
}


void CUserProfileType::InsertEmailAt(CSchemaString Email, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Email"), nIndex, Email);
}


void CUserProfileType::ReplaceEmailAt(CSchemaString Email, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Email"), nIndex, Email);
}



CSchemaString CUserProfileType::GetEmailAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Email"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Email"), nIndex));
}



CSchemaString CUserProfileType::GetEmail()
{
	return GetEmailAt(0);
}


void CUserProfileType::RemoveEmailAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Email"), nIndex);
}


void CUserProfileType::RemoveEmail()
{
	while (HasEmail())
		RemoveEmailAt(0);
}

int CUserProfileType::GetPasswordMinCount()
{
	return 0;
}


int CUserProfileType::GetPasswordMaxCount()
{
	return 1;
}


int CUserProfileType::GetPasswordCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("Password"));
}


bool CUserProfileType::HasPassword()
{
	return InternalHasChild(Attribute, _T(""), _T("Password"));
}


void CUserProfileType::AddPassword(CSchemaString Password)
{
	InternalAppend(Attribute, _T(""), _T("Password"), Password);
}


void CUserProfileType::InsertPasswordAt(CSchemaString Password, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("Password"), nIndex, Password);
}


void CUserProfileType::ReplacePasswordAt(CSchemaString Password, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("Password"), nIndex, Password);
}



CSchemaString CUserProfileType::GetPasswordAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Password"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("Password"), nIndex));
}



CSchemaString CUserProfileType::GetPassword()
{
	return GetPasswordAt(0);
}


void CUserProfileType::RemovePasswordAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("Password"), nIndex);
}


void CUserProfileType::RemovePassword()
{
	while (HasPassword())
		RemovePasswordAt(0);
}

int CUserProfileType::GetAccessCodeMinCount()
{
	return 0;
}


int CUserProfileType::GetAccessCodeMaxCount()
{
	return 1;
}


int CUserProfileType::GetAccessCodeCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("AccessCode"));
}


bool CUserProfileType::HasAccessCode()
{
	return InternalHasChild(Attribute, _T(""), _T("AccessCode"));
}


void CUserProfileType::AddAccessCode(CSchemaString AccessCode)
{
	InternalAppend(Attribute, _T(""), _T("AccessCode"), AccessCode);
}


void CUserProfileType::InsertAccessCodeAt(CSchemaString AccessCode, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("AccessCode"), nIndex, AccessCode);
}


void CUserProfileType::ReplaceAccessCodeAt(CSchemaString AccessCode, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("AccessCode"), nIndex, AccessCode);
}



CSchemaString CUserProfileType::GetAccessCodeAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("AccessCode"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("AccessCode"), nIndex));
}



CSchemaString CUserProfileType::GetAccessCode()
{
	return GetAccessCodeAt(0);
}


void CUserProfileType::RemoveAccessCodeAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("AccessCode"), nIndex);
}


void CUserProfileType::RemoveAccessCode()
{
	while (HasAccessCode())
		RemoveAccessCodeAt(0);
}

////////////////////////////////////////////////////////////////////////
//
// class CVideoType
//
////////////////////////////////////////////////////////////////////////


CNode::EGroupType CVideoType::GetGroupType()
{
	return eSequence;
}

int CVideoType::GetChannelIDMinCount()
{
	return 1;
}


int CVideoType::GetChannelIDMaxCount()
{
	return 1;
}


int CVideoType::GetChannelIDCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("ChannelID"));
}


bool CVideoType::HasChannelID()
{
	return InternalHasChild(Attribute, _T(""), _T("ChannelID"));
}


void CVideoType::AddChannelID(CSchemaInt ChannelID)
{
	InternalAppend(Attribute, _T(""), _T("ChannelID"), ChannelID);
}


void CVideoType::InsertChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}


void CVideoType::ReplaceChannelIDAt(CSchemaInt ChannelID, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("ChannelID"), nIndex, ChannelID);
}



CSchemaInt CVideoType::GetChannelIDAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("ChannelID"), nIndex));
}



CSchemaInt CVideoType::GetChannelID()
{
	return GetChannelIDAt(0);
}


void CVideoType::RemoveChannelIDAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("ChannelID"), nIndex);
}


void CVideoType::RemoveChannelID()
{
	while (HasChannelID())
		RemoveChannelIDAt(0);
}

int CVideoType::GetBeginTimestampMinCount()
{
	return 1;
}


int CVideoType::GetBeginTimestampMaxCount()
{
	return 1;
}


int CVideoType::GetBeginTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("BeginTimestamp"));
}


bool CVideoType::HasBeginTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("BeginTimestamp"));
}


void CVideoType::AddBeginTimestamp(CSchemaDateTime BeginTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("BeginTimestamp"), BeginTimestamp);
}


void CVideoType::InsertBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}


void CVideoType::ReplaceBeginTimestampAt(CSchemaDateTime BeginTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex, BeginTimestamp);
}



CSchemaDateTime CVideoType::GetBeginTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex));
}



CSchemaDateTime CVideoType::GetBeginTimestamp()
{
	return GetBeginTimestampAt(0);
}


void CVideoType::RemoveBeginTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("BeginTimestamp"), nIndex);
}


void CVideoType::RemoveBeginTimestamp()
{
	while (HasBeginTimestamp())
		RemoveBeginTimestampAt(0);
}

int CVideoType::GetEndTimestampMinCount()
{
	return 1;
}


int CVideoType::GetEndTimestampMaxCount()
{
	return 1;
}


int CVideoType::GetEndTimestampCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndTimestamp"));
}


bool CVideoType::HasEndTimestamp()
{
	return InternalHasChild(Attribute, _T(""), _T("EndTimestamp"));
}


void CVideoType::AddEndTimestamp(CSchemaDateTime EndTimestamp)
{
	InternalAppend(Attribute, _T(""), _T("EndTimestamp"), EndTimestamp);
}


void CVideoType::InsertEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}


void CVideoType::ReplaceEndTimestampAt(CSchemaDateTime EndTimestamp, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndTimestamp"), nIndex, EndTimestamp);
}



CSchemaDateTime CVideoType::GetEndTimestampAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndTimestamp"), nIndex));
}



CSchemaDateTime CVideoType::GetEndTimestamp()
{
	return GetEndTimestampAt(0);
}


void CVideoType::RemoveEndTimestampAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndTimestamp"), nIndex);
}


void CVideoType::RemoveEndTimestamp()
{
	while (HasEndTimestamp())
		RemoveEndTimestampAt(0);
}

int CVideoType::GetEndPointMinCount()
{
	return 0;
}


int CVideoType::GetEndPointMaxCount()
{
	return 1;
}


int CVideoType::GetEndPointCount()
{
	return ChildCountInternal(Attribute, _T(""), _T("EndPoint"));
}


bool CVideoType::HasEndPoint()
{
	return InternalHasChild(Attribute, _T(""), _T("EndPoint"));
}


void CVideoType::AddEndPoint(CSchemaDateTime EndPoint)
{
	InternalAppend(Attribute, _T(""), _T("EndPoint"), EndPoint);
}


void CVideoType::InsertEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalInsertAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}


void CVideoType::ReplaceEndPointAt(CSchemaDateTime EndPoint, int nIndex)
{
	InternalReplaceAt(Attribute, _T(""), _T("EndPoint"), nIndex, EndPoint);
}



CSchemaDateTime CVideoType::GetEndPointAt(int nIndex)
{
	return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex)).c_str();
	//return InternalGetNodeValue(Attribute, InternalGetAt(Attribute, _T(""), _T("EndPoint"), nIndex));
}



CSchemaDateTime CVideoType::GetEndPoint()
{
	return GetEndPointAt(0);
}


void CVideoType::RemoveEndPointAt(int nIndex)
{
	InternalRemoveAt(Attribute, _T(""), _T("EndPoint"), nIndex);
}


void CVideoType::RemoveEndPoint()
{
	while (HasEndPoint())
		RemoveEndPointAt(0);
}

int CVideoType::GetModelTypeMinCount()
{
	return 0;
}


int CVideoType::GetModelTypeMaxCount()
{
	return 1;
}


int CVideoType::GetModelTypeCount()
{
	return ChildCountInternal(Element, _T(""), _T("ModelType"));
}


bool CVideoType::HasModelType()
{
	return InternalHasChild(Element, _T(""), _T("ModelType"));
}


void CVideoType::AddModelType(CModelTypeType& ModelType)
{
	InternalAppendNode(_T(""), _T("ModelType"), ModelType);
}


void CVideoType::InsertModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalInsertNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}


void CVideoType::ReplaceModelTypeAt(CModelTypeType& ModelType, int nIndex)
{
	InternalReplaceNodeAt(_T(""), _T("ModelType"), nIndex, ModelType);
}



CModelTypeType CVideoType::GetModelTypeAt(int nIndex)
{
	return CModelTypeType(InternalGetAt(Element, _T(""), _T("ModelType"), nIndex));
}



CModelTypeType CVideoType::GetModelType()
{
	return GetModelTypeAt(0);
}


void CVideoType::RemoveModelTypeAt(int nIndex)
{
	InternalRemoveAt(Element, _T(""), _T("ModelType"), nIndex);
}


void CVideoType::RemoveModelType()
{
	while (HasModelType())
		RemoveModelTypeAt(0);
}

} // namespace mcml
