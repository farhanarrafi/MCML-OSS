////////////////////////////////////////////////////////////////////////
//
// TargetOutputType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.MCML;

public class TargetOutputType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.MCML.MCML_TypeInfo.binder.getTypes()[com.MCML.MCML_TypeInfo._altova_ti_altova_TargetOutputType]); }
	
	public TargetOutputType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		HypothesisFormat= new MemberElement_HypothesisFormat (this, com.MCML.MCML_TypeInfo.binder.getMembers()[com.MCML.MCML_TypeInfo._altova_mi_altova_TargetOutputType._HypothesisFormat]);
		LanguageType2= new MemberElement_LanguageType2 (this, com.MCML.MCML_TypeInfo.binder.getMembers()[com.MCML.MCML_TypeInfo._altova_mi_altova_TargetOutputType._LanguageType2]);
		Option= new MemberElement_Option (this, com.MCML.MCML_TypeInfo.binder.getMembers()[com.MCML.MCML_TypeInfo._altova_mi_altova_TargetOutputType._Option]);
	}
	// Attributes


	// Elements
	
	public MemberElement_HypothesisFormat HypothesisFormat;

		public static class MemberElement_HypothesisFormat
		{
			public static class MemberElement_HypothesisFormat_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_HypothesisFormat member;
				public MemberElement_HypothesisFormat_Iterator(MemberElement_HypothesisFormat member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					HypothesisFormatType nx = new HypothesisFormatType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_HypothesisFormat (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public HypothesisFormatType at(int index) {return new HypothesisFormatType(owner.getElementAt(info, index));}
			public HypothesisFormatType first() {return new HypothesisFormatType(owner.getElementFirst(info));}
			public HypothesisFormatType last(){return new HypothesisFormatType(owner.getElementLast(info));}
			public HypothesisFormatType append(){return new HypothesisFormatType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_HypothesisFormat_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_LanguageType2 LanguageType2;

		public static class MemberElement_LanguageType2
		{
			public static class MemberElement_LanguageType2_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_LanguageType2 member;
				public MemberElement_LanguageType2_Iterator(MemberElement_LanguageType2 member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					LanguageTypeType nx = new LanguageTypeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_LanguageType2 (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public LanguageTypeType at(int index) {return new LanguageTypeType(owner.getElementAt(info, index));}
			public LanguageTypeType first() {return new LanguageTypeType(owner.getElementFirst(info));}
			public LanguageTypeType last(){return new LanguageTypeType(owner.getElementLast(info));}
			public LanguageTypeType append(){return new LanguageTypeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_LanguageType2_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Option Option;

		public static class MemberElement_Option
		{
			public static class MemberElement_Option_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Option member;
				public MemberElement_Option_Iterator(MemberElement_Option member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					OptionType nx = new OptionType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Option (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public OptionType at(int index) {return new OptionType(owner.getElementAt(info, index));}
			public OptionType first() {return new OptionType(owner.getElementFirst(info));}
			public OptionType last(){return new OptionType(owner.getElementLast(info));}
			public OptionType append(){return new OptionType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Option_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
