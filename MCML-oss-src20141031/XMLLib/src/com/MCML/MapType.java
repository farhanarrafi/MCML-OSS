////////////////////////////////////////////////////////////////////////
//
// MapType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.MCML;

public class MapType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.MCML.MCML_TypeInfo.binder.getTypes()[com.MCML.MCML_TypeInfo._altova_ti_altova_MapType]); }
	
	public MapType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		Title= new MemberElement_Title (this, com.MCML.MCML_TypeInfo.binder.getMembers()[com.MCML.MCML_TypeInfo._altova_mi_altova_MapType._Title]);
		Spot= new MemberElement_Spot (this, com.MCML.MCML_TypeInfo.binder.getMembers()[com.MCML.MCML_TypeInfo._altova_mi_altova_MapType._Spot]);
		Latitude= new MemberElement_Latitude (this, com.MCML.MCML_TypeInfo.binder.getMembers()[com.MCML.MCML_TypeInfo._altova_mi_altova_MapType._Latitude]);
		Longitude= new MemberElement_Longitude (this, com.MCML.MCML_TypeInfo.binder.getMembers()[com.MCML.MCML_TypeInfo._altova_mi_altova_MapType._Longitude]);
	}
	// Attributes


	// Elements
	
	public MemberElement_Title Title;

		public static class MemberElement_Title
		{
			public static class MemberElement_Title_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Title member;
				public MemberElement_Title_Iterator(MemberElement_Title member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MCML.xs.anyType nx = new com.MCML.xs.anyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Title (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MCML.xs.anyType at(int index) {return new com.MCML.xs.anyType(owner.getElementAt(info, index));}
			public com.MCML.xs.anyType first() {return new com.MCML.xs.anyType(owner.getElementFirst(info));}
			public com.MCML.xs.anyType last(){return new com.MCML.xs.anyType(owner.getElementLast(info));}
			public com.MCML.xs.anyType append(){return new com.MCML.xs.anyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Title_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Spot Spot;

		public static class MemberElement_Spot
		{
			public static class MemberElement_Spot_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Spot member;
				public MemberElement_Spot_Iterator(MemberElement_Spot member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MCML.xs.anyType nx = new com.MCML.xs.anyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Spot (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MCML.xs.anyType at(int index) {return new com.MCML.xs.anyType(owner.getElementAt(info, index));}
			public com.MCML.xs.anyType first() {return new com.MCML.xs.anyType(owner.getElementFirst(info));}
			public com.MCML.xs.anyType last(){return new com.MCML.xs.anyType(owner.getElementLast(info));}
			public com.MCML.xs.anyType append(){return new com.MCML.xs.anyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Spot_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Latitude Latitude;

		public static class MemberElement_Latitude
		{
			public static class MemberElement_Latitude_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Latitude member;
				public MemberElement_Latitude_Iterator(MemberElement_Latitude member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MCML.xs.anyType nx = new com.MCML.xs.anyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Latitude (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MCML.xs.anyType at(int index) {return new com.MCML.xs.anyType(owner.getElementAt(info, index));}
			public com.MCML.xs.anyType first() {return new com.MCML.xs.anyType(owner.getElementFirst(info));}
			public com.MCML.xs.anyType last(){return new com.MCML.xs.anyType(owner.getElementLast(info));}
			public com.MCML.xs.anyType append(){return new com.MCML.xs.anyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Latitude_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Longitude Longitude;

		public static class MemberElement_Longitude
		{
			public static class MemberElement_Longitude_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Longitude member;
				public MemberElement_Longitude_Iterator(MemberElement_Longitude member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.MCML.xs.anyType nx = new com.MCML.xs.anyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Longitude (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.MCML.xs.anyType at(int index) {return new com.MCML.xs.anyType(owner.getElementAt(info, index));}
			public com.MCML.xs.anyType first() {return new com.MCML.xs.anyType(owner.getElementFirst(info));}
			public com.MCML.xs.anyType last(){return new com.MCML.xs.anyType(owner.getElementLast(info));}
			public com.MCML.xs.anyType append(){return new com.MCML.xs.anyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Longitude_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
