////////////////////////////////////////////////////////////////////////
//
// ResponseType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.Information;

public class ResponseType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.Information.InformationTypeInfo.binder.getTypes()[com.Information.InformationTypeInfo._altova_ti_altova_ResponseType]); }
	
	public ResponseType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		URL= new MemberElement_URL (this, com.Information.InformationTypeInfo.binder.getMembers()[com.Information.InformationTypeInfo._altova_mi_altova_ResponseType._URL]);
		Server= new MemberElement_Server (this, com.Information.InformationTypeInfo.binder.getMembers()[com.Information.InformationTypeInfo._altova_mi_altova_ResponseType._Server]);
		Time= new MemberElement_Time (this, com.Information.InformationTypeInfo.binder.getMembers()[com.Information.InformationTypeInfo._altova_mi_altova_ResponseType._Time]);
		Error_title= new MemberElement_Error_title (this, com.Information.InformationTypeInfo.binder.getMembers()[com.Information.InformationTypeInfo._altova_mi_altova_ResponseType._Error_title]);
		Error_body= new MemberElement_Error_body (this, com.Information.InformationTypeInfo.binder.getMembers()[com.Information.InformationTypeInfo._altova_mi_altova_ResponseType._Error_body]);
	}
	// Attributes


	// Elements
	
	public MemberElement_URL URL;

		public static class MemberElement_URL
		{
			public static class MemberElement_URL_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_URL member;
				public MemberElement_URL_Iterator(MemberElement_URL member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					com.Information.xs.anyType nx = new com.Information.xs.anyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_URL (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public com.Information.xs.anyType at(int index) {return new com.Information.xs.anyType(owner.getElementAt(info, index));}
			public com.Information.xs.anyType first() {return new com.Information.xs.anyType(owner.getElementFirst(info));}
			public com.Information.xs.anyType last(){return new com.Information.xs.anyType(owner.getElementLast(info));}
			public com.Information.xs.anyType append(){return new com.Information.xs.anyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_URL_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Server Server;

		public static class MemberElement_Server
		{
			public static class MemberElement_Server_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Server member;
				public MemberElement_Server_Iterator(MemberElement_Server member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					ServerType nx = new ServerType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Server (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public ServerType at(int index) {return new ServerType(owner.getElementAt(info, index));}
			public ServerType first() {return new ServerType(owner.getElementFirst(info));}
			public ServerType last(){return new ServerType(owner.getElementLast(info));}
			public ServerType append(){return new ServerType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Server_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Time Time;

		public static class MemberElement_Time
		{
			public static class MemberElement_Time_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Time member;
				public MemberElement_Time_Iterator(MemberElement_Time member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					TimeType nx = new TimeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Time (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public TimeType at(int index) {return new TimeType(owner.getElementAt(info, index));}
			public TimeType first() {return new TimeType(owner.getElementFirst(info));}
			public TimeType last(){return new TimeType(owner.getElementLast(info));}
			public TimeType append(){return new TimeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Time_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Error_title Error_title;

		public static class MemberElement_Error_title
		{
			public static class MemberElement_Error_title_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Error_title member;
				public MemberElement_Error_title_Iterator(MemberElement_Error_title member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					Error_titleType nx = new Error_titleType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Error_title (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public Error_titleType at(int index) {return new Error_titleType(owner.getElementAt(info, index));}
			public Error_titleType first() {return new Error_titleType(owner.getElementFirst(info));}
			public Error_titleType last(){return new Error_titleType(owner.getElementLast(info));}
			public Error_titleType append(){return new Error_titleType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Error_title_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_Error_body Error_body;

		public static class MemberElement_Error_body
		{
			public static class MemberElement_Error_body_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_Error_body member;
				public MemberElement_Error_body_Iterator(MemberElement_Error_body member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					Error_bodyType nx = new Error_bodyType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_Error_body (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public Error_bodyType at(int index) {return new Error_bodyType(owner.getElementAt(info, index));}
			public Error_bodyType first() {return new Error_bodyType(owner.getElementFirst(info));}
			public Error_bodyType last(){return new Error_bodyType(owner.getElementLast(info));}
			public Error_bodyType append(){return new Error_bodyType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_Error_body_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
