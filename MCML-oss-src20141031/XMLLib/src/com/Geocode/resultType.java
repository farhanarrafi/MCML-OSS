////////////////////////////////////////////////////////////////////////
//
// resultType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.Geocode;

public class resultType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.Geocode.GeocodeTypeInfo.binder.getTypes()[com.Geocode.GeocodeTypeInfo._altova_ti_altova_resultType]); }
	
	public resultType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		type= new MemberElement_type (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_resultType._type]);
		formatted_address= new MemberElement_formatted_address (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_resultType._formatted_address]);
		address_component= new MemberElement_address_component (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_resultType._address_component]);
		geometry= new MemberElement_geometry (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_resultType._geometry]);
	}
	// Attributes


	// Elements
	
	public MemberElement_type type;

		public static class MemberElement_type
		{
			public static class MemberElement_type_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_type member;
				public MemberElement_type_Iterator(MemberElement_type member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					typeType nx = new typeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_type (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public typeType at(int index) {return new typeType(owner.getElementAt(info, index));}
			public typeType first() {return new typeType(owner.getElementFirst(info));}
			public typeType last(){return new typeType(owner.getElementLast(info));}
			public typeType append(){return new typeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_type_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_formatted_address formatted_address;

		public static class MemberElement_formatted_address
		{
			public static class MemberElement_formatted_address_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_formatted_address member;
				public MemberElement_formatted_address_Iterator(MemberElement_formatted_address member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					formatted_addressType nx = new formatted_addressType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_formatted_address (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public formatted_addressType at(int index) {return new formatted_addressType(owner.getElementAt(info, index));}
			public formatted_addressType first() {return new formatted_addressType(owner.getElementFirst(info));}
			public formatted_addressType last(){return new formatted_addressType(owner.getElementLast(info));}
			public formatted_addressType append(){return new formatted_addressType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_formatted_address_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_address_component address_component;

		public static class MemberElement_address_component
		{
			public static class MemberElement_address_component_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_address_component member;
				public MemberElement_address_component_Iterator(MemberElement_address_component member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					address_componentType nx = new address_componentType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_address_component (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public address_componentType at(int index) {return new address_componentType(owner.getElementAt(info, index));}
			public address_componentType first() {return new address_componentType(owner.getElementFirst(info));}
			public address_componentType last(){return new address_componentType(owner.getElementLast(info));}
			public address_componentType append(){return new address_componentType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_address_component_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_geometry geometry;

		public static class MemberElement_geometry
		{
			public static class MemberElement_geometry_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_geometry member;
				public MemberElement_geometry_Iterator(MemberElement_geometry member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					geometryType nx = new geometryType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_geometry (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public geometryType at(int index) {return new geometryType(owner.getElementAt(info, index));}
			public geometryType first() {return new geometryType(owner.getElementFirst(info));}
			public geometryType last(){return new geometryType(owner.getElementLast(info));}
			public geometryType append(){return new geometryType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_geometry_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
