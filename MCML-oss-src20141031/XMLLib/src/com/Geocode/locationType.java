////////////////////////////////////////////////////////////////////////
//
// locationType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.Geocode;

public class locationType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.Geocode.GeocodeTypeInfo.binder.getTypes()[com.Geocode.GeocodeTypeInfo._altova_ti_altova_locationType]); }
	
	public locationType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		lat= new MemberElement_lat (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_locationType._lat]);
		lng= new MemberElement_lng (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_locationType._lng]);
	}
	// Attributes


	// Elements
	
	public MemberElement_lat lat;

		public static class MemberElement_lat
		{
			public static class MemberElement_lat_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_lat member;
				public MemberElement_lat_Iterator(MemberElement_lat member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					latType nx = new latType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_lat (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public latType at(int index) {return new latType(owner.getElementAt(info, index));}
			public latType first() {return new latType(owner.getElementFirst(info));}
			public latType last(){return new latType(owner.getElementLast(info));}
			public latType append(){return new latType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_lat_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_lng lng;

		public static class MemberElement_lng
		{
			public static class MemberElement_lng_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_lng member;
				public MemberElement_lng_Iterator(MemberElement_lng member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					lngType nx = new lngType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_lng (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public lngType at(int index) {return new lngType(owner.getElementAt(info, index));}
			public lngType first() {return new lngType(owner.getElementFirst(info));}
			public lngType last(){return new lngType(owner.getElementLast(info));}
			public lngType append(){return new lngType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_lng_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
