////////////////////////////////////////////////////////////////////////
//
// geometryType.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.Geocode;

public class geometryType extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.Geocode.GeocodeTypeInfo.binder.getTypes()[com.Geocode.GeocodeTypeInfo._altova_ti_altova_geometryType]); }
	
	public geometryType(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		location= new MemberElement_location (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_geometryType._location]);
		location_type= new MemberElement_location_type (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_geometryType._location_type]);
		viewport= new MemberElement_viewport (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_geometryType._viewport]);
		bounds= new MemberElement_bounds (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_geometryType._bounds]);
	}
	// Attributes


	// Elements
	
	public MemberElement_location location;

		public static class MemberElement_location
		{
			public static class MemberElement_location_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_location member;
				public MemberElement_location_Iterator(MemberElement_location member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					locationType nx = new locationType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_location (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public locationType at(int index) {return new locationType(owner.getElementAt(info, index));}
			public locationType first() {return new locationType(owner.getElementFirst(info));}
			public locationType last(){return new locationType(owner.getElementLast(info));}
			public locationType append(){return new locationType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_location_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_location_type location_type;

		public static class MemberElement_location_type
		{
			public static class MemberElement_location_type_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_location_type member;
				public MemberElement_location_type_Iterator(MemberElement_location_type member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					location_typeType nx = new location_typeType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_location_type (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public location_typeType at(int index) {return new location_typeType(owner.getElementAt(info, index));}
			public location_typeType first() {return new location_typeType(owner.getElementFirst(info));}
			public location_typeType last(){return new location_typeType(owner.getElementLast(info));}
			public location_typeType append(){return new location_typeType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_location_type_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_viewport viewport;

		public static class MemberElement_viewport
		{
			public static class MemberElement_viewport_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_viewport member;
				public MemberElement_viewport_Iterator(MemberElement_viewport member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					viewportType nx = new viewportType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_viewport (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public viewportType at(int index) {return new viewportType(owner.getElementAt(info, index));}
			public viewportType first() {return new viewportType(owner.getElementFirst(info));}
			public viewportType last(){return new viewportType(owner.getElementLast(info));}
			public viewportType append(){return new viewportType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_viewport_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
	
	public MemberElement_bounds bounds;

		public static class MemberElement_bounds
		{
			public static class MemberElement_bounds_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_bounds member;
				public MemberElement_bounds_Iterator(MemberElement_bounds member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					boundsType nx = new boundsType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_bounds (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public boundsType at(int index) {return new boundsType(owner.getElementAt(info, index));}
			public boundsType first() {return new boundsType(owner.getElementFirst(info));}
			public boundsType last(){return new boundsType(owner.getElementLast(info));}
			public boundsType append(){return new boundsType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_bounds_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}
}
