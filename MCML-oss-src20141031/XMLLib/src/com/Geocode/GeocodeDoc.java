////////////////////////////////////////////////////////////////////////
//
// GeocodeDoc.java
//
// This file was generated by XMLSpy 2014 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

package com.Geocode;

public class GeocodeDoc extends com.altova.xml.TypeBase
{
	public static com.altova.xml.meta.ComplexType getStaticInfo() { return new com.altova.xml.meta.ComplexType(com.Geocode.GeocodeTypeInfo.binder.getTypes()[com.Geocode.GeocodeTypeInfo._altova_ti_altova_GeocodeDoc]); }

	public static GeocodeDoc loadFromFile(String filename) throws Exception
	{
		return new GeocodeDoc(com.altova.xml.XmlTreeOperations.loadDocument(filename));			
	}

	public static GeocodeDoc loadFromString(String xmlstring) throws Exception
	{
		return new GeocodeDoc(com.altova.xml.XmlTreeOperations.loadXml(xmlstring));			
	}

	public static GeocodeDoc loadFromBinary(byte[] binary) throws Exception
	{
		return new GeocodeDoc(com.altova.xml.XmlTreeOperations.loadXmlBinary(binary));
	}

	public void saveToFile(String filename, boolean prettyPrint) throws Exception
	{
		saveToFile(filename, prettyPrint, "UTF-8", false, false);
	}
	
	public void saveToFile(String filename, boolean prettyPrint, String encoding) throws Exception
	{
		saveToFile( filename, prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public void saveToFile(String filename, boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		com.altova.xml.XmlTreeOperations.saveDocument(doc, filename, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public String saveToString(boolean prettyPrint) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.altova.xml.XmlTreeOperations.saveXml(doc, prettyPrint);
	}

	public byte[] saveToBinary(boolean prettyPrint) throws Exception
	{
		return saveToBinary(prettyPrint, "UTF-8", false, false);
	}
	
	public byte[] saveToBinary(boolean prettyPrint, String encoding) throws Exception
	{
		return saveToBinary( prettyPrint, encoding, encoding.compareToIgnoreCase("UTF-16BE") == 0, encoding.compareToIgnoreCase("UTF-16") == 0 );
	}

	public byte[] saveToBinary(boolean prettyPrint, String encoding, boolean bBigEndian, boolean bBOM) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) getNode();
		return com.altova.xml.XmlTreeOperations.saveXmlBinary(doc, encoding, bBigEndian, bBOM, prettyPrint);
	}

	public static GeocodeDoc createDocument() throws Exception
	{
		org.w3c.dom.Document doc = com.altova.xml.XmlTreeOperations.createDocument();
		return new GeocodeDoc(doc);
	}

	public void setSchemaLocation(String schemaLocation) throws Exception
	{
		org.w3c.dom.Document doc = (org.w3c.dom.Document) node;
		if (doc.getDocumentElement() == null)
			throw new Exception("SetSchemaLocation requires a root element.");
		String namespaceuri = doc.getDocumentElement().getNamespaceURI();
		if (namespaceuri == null || namespaceuri.length() == 0)
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation", schemaLocation);
		else
			doc.getDocumentElement().setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "schemaLocation", namespaceuri + " " + schemaLocation);
	}
	
	public GeocodeDoc(org.w3c.dom.Node init)
	{
		super(init);
		instantiateMembers();
	}

	private void instantiateMembers()
	{

		GeocodeResponse= new MemberElement_GeocodeResponse (this, com.Geocode.GeocodeTypeInfo.binder.getMembers()[com.Geocode.GeocodeTypeInfo._altova_mi_altova_GeocodeDoc._GeocodeResponse]);
	}
	// Attributes


	// Elements
	
	public MemberElement_GeocodeResponse GeocodeResponse;

		public static class MemberElement_GeocodeResponse
		{
			public static class MemberElement_GeocodeResponse_Iterator implements java.util.Iterator
			{
				private org.w3c.dom.Node nextNode;
				private MemberElement_GeocodeResponse member;
				public MemberElement_GeocodeResponse_Iterator(MemberElement_GeocodeResponse member) {this.member=member; nextNode=member.owner.getElementFirst(member.info);}
				public boolean hasNext() 
				{
					while (nextNode != null)
					{
						if (com.altova.xml.TypeBase.memberEqualsNode(member.info, nextNode))
							return true;
						nextNode = nextNode.getNextSibling();
					}
					return false;
				}
				
				public Object next()
				{
					GeocodeResponseType nx = new GeocodeResponseType(nextNode);
					nextNode = nextNode.getNextSibling();
					return nx;
				}
				
				public void remove () {}
			}
			protected com.altova.xml.TypeBase owner;
			protected com.altova.typeinfo.MemberInfo info;
			public MemberElement_GeocodeResponse (com.altova.xml.TypeBase owner, com.altova.typeinfo.MemberInfo info) { this.owner = owner; this.info = info;}
			public GeocodeResponseType at(int index) {return new GeocodeResponseType(owner.getElementAt(info, index));}
			public GeocodeResponseType first() {return new GeocodeResponseType(owner.getElementFirst(info));}
			public GeocodeResponseType last(){return new GeocodeResponseType(owner.getElementLast(info));}
			public GeocodeResponseType append(){return new GeocodeResponseType(owner.createElement(info));}
			public boolean exists() {return count() > 0;}
			public int count() {return owner.countElement(info);}
			public void remove() {owner.removeElement(info);}
			public void removeAt(int index) {owner.removeElementAt(info, index);}
			public java.util.Iterator iterator() {return new MemberElement_GeocodeResponse_Iterator(this);}
			public com.altova.xml.meta.Element getInfo() { return new com.altova.xml.meta.Element(info); }
		}

		public void setXsiType() {com.altova.xml.XmlTreeOperations.setAttribute(getNode(), "http://www.w3.org/2001/XMLSchema-instance", "xsi:type", "", "GeocodeDoc");}
}
